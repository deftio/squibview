{"version":3,"file":"html-to-markdown.js","sources":["../src/HtmlToMarkdown.js"],"sourcesContent":["import TurndownService from 'turndown';\n\n/**\n * Converts HTML content to Markdown format using the Turndown library with \n * customizations specific to SquibView's needs.\n */\nexport default class HtmlToMarkdown {\n  constructor(options = {}) {\n    this.turndownService = new TurndownService({\n      headingStyle: 'atx',       // Use # style headings\n      codeBlockStyle: 'fenced',  // Use ``` style code blocks\n      emDelimiter: '*',          // Use * for emphasis\n      bulletListMarker: '-',     // Use - for bullet lists\n      ...options\n    });\n    \n    // Add a simple cache for converted content to improve performance\n    this.cache = new Map();\n    this.cacheSize = options.cacheSize || 10;\n    \n    // Store special blocks for preservation\n    this._specialBlocks = new Map();\n    \n    this.configureTurndownRules();\n  }\n  \n  /**\n   * Configure custom Turndown rules\n   */\n  configureTurndownRules() {\n    // Since we're using pre-processing for data-source-type containers,\n    // we can simplify this and keep it as a fallback for any missed cases\n    this.turndownService.addRule('squibviewFencedBlock', {\n      filter: (node) => {\n        return node.nodeName === 'DIV' && node.hasAttribute('data-source-type');\n      },\n      replacement: (content, node, options) => {\n        const lang = node.getAttribute('data-source-type') || 'code';\n        let innerContent = '';\n\n        switch (lang) {\n          case 'mermaid':\n          case 'math':\n            let contentFromHtml = node.innerHTML;\n            // Convert <br> tags to newlines first\n            contentFromHtml = contentFromHtml.replace(/<br\\s*\\/?>/gi, '\\n');\n            // For Mermaid and Math, the content is expected to be text-like after <br> replacement.\n            // Avoid stripping other tags if they are part of the intended content (e.g. MathML in MathJax)\n            // Instead, rely on a robust way to get text content, then trim.\n            const tempDiv = node.ownerDocument.createElement('div');\n            tempDiv.innerHTML = contentFromHtml; // Let browser parse it\n            innerContent = tempDiv.textContent || tempDiv.innerText || ''; // Get text content\n            break;\n          case 'geojson':\n          case 'topojson':\n          case 'stl':\n            // For GeoJSON, TopoJSON, and STL, the original data is stored in data-original-source attribute\n            if (node.hasAttribute('data-original-source')) {\n              // The attribute value is HTML-escaped, browser will decode it when getting the attribute\n              innerContent = node.getAttribute('data-original-source');\n            } else if (node.textContent && node.textContent.trim()) {\n              // Fallback to text content if not yet rendered\n              innerContent = node.textContent;\n            } else {\n              // If no original data available, we can't recover it\n              console.warn('[HtmlToMarkdown] Missing original data for', lang, 'block');\n              innerContent = 'Error: Original data lost during rendering';\n            }\n            break;\n          case 'svg':\n            // The 'node' is the div with data-source-type=\"svg\".\n            // For proper round-trip fidelity, use the original source from the data attribute if available\n            if (node.hasAttribute('data-original-source')) {\n              // The attribute value is HTML-escaped, browser will decode it when getting the attribute\n              innerContent = node.getAttribute('data-original-source');\n            } else {\n              // Fallback to innerHTML if no original source stored\n              innerContent = node.innerHTML;\n            }\n            // console.warn('[HtmlToMarkdown] squibviewFencedBlock SVG: Captured content:', innerContent.substring(0, 200));\n            break;\n          case 'csv':\n          case 'tsv':\n          case 'psv':\n            const tableElement = node.querySelector('table');\n            if (tableElement) {\n              innerContent = this._htmlTableToDelimitedText(tableElement, lang);\n            } else {\n              innerContent = 'Error: Table not found for ' + lang;\n              console.warn('Could not find table inside div[data-source-type=\"' + lang + '\"]');\n            }\n            break;\n          default: // Handles 'javascript', 'python', 'code', etc.\n            const preElement = node.querySelector('pre');\n            if (preElement) {\n              const codeElement = preElement.querySelector('code');\n              // textContent of <code> or <pre> contains the code.\n              innerContent = (codeElement || preElement).textContent; // trimEnd removed, will be handled by trim() later\n            } else {\n              // Fallback if <pre> not found (e.g. if it was just a div with code)\n              innerContent = node.textContent; // trimEnd removed\n               console.warn('Could not find <pre> inside div[data-source-type=\"' + lang + '\"]');\n            }\n            break;\n        }\n\n        const langTag = (lang === 'code') ? '' : lang;\n        let finalInnerContent = innerContent.trim(); // Trim whitespace consistently here\n\n        if (finalInnerContent) { // If there's content after trimming\n          finalInnerContent = '\\n' + finalInnerContent + '\\n';\n        } else { // If content was empty or just whitespace\n          finalInnerContent = '\\n'; // Ensure a blank line for empty fenced blocks\n        }\n\n        return '\\n```' + langTag + finalInnerContent + '```\\n';\n      }\n    });\n\n    // Preserve HTML image tags by returning their outerHTML\n    this.turndownService.addRule('keepImageTags', {\n      filter: 'img',\n      replacement: function (content, node) {\n        return node.outerHTML;\n      }\n    });\n\n    // TEMPORARILY DISABLED: Preserve standalone <svg> tags NOT inside a data-source-type div\n    /*\n    this.turndownService.addRule('keepStandaloneSvgTags', {\n      filter: function(node) {\n        if (node.nodeName !== 'SVG') return false;\n        \n        // Don't process SVG elements that are inside a data-source-type div\n        const parentDiv = node.closest('div[data-source-type]');\n        if (parentDiv) {\n          console.warn('[HtmlToMarkdown] Skipping SVG inside data-source-type div');\n          return false;\n        }\n        \n        console.warn('[HtmlToMarkdown] Processing standalone SVG');\n        return true;\n      },\n      replacement: function (content, node) {\n        // console.warn('[HtmlToMarkdown] standalone SVG rule processing:', node.outerHTML);\n        return node.outerHTML;\n      }\n    });\n    */\n    \n    // Preserve Mermaid diagram blocks with special identifiers\n    this.turndownService.addRule('mermaid', {\n      filter: node => {\n        return node.nodeName === 'DIV' && \n               node.classList.contains('mermaid');\n      },\n      replacement: (content, node) => {\n        // Generate a unique ID for this mermaid block to help with matching later\n        const blockId = 'mermaid_' + Math.random().toString(36).substring(2, 10);\n        \n        // Store the raw content for later use\n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'mermaid',\n            content: node.textContent\n          });\n        }\n        \n        // Return with special marker that can be identified later\n        return `\\n<div data-special-block=\"${blockId}\" class=\"mermaid\">\\n` +\n               node.textContent + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    /*\n    // Preserve SVG elements with special identifiers\n    this.turndownService.addRule('svg', {\n      filter: node => {\n        // Only apply this rule if the SVG is NOT inside one of our data-source-type divs\n        // and has one of our specific identifiers (e.g., an id starting with \"squib-svg-\")\n        // or if it does not have a data-source-type attribute itself.\n        const isInsideSquibDiv = node.closest('div[data-source-type]');\n        const hasSquibIdentifier = node.id && node.id.startsWith('squib-svg-'); // Example identifier\n        const isSpecialSquibSvg = node.hasAttribute('data-source-type') && node.getAttribute('data-source-type') === 'svg';\n\n        if (isInsideSquibDiv || isSpecialSquibSvg) {\n          // console.warn('[HtmlToMarkdown] SVG rule: Skipping SVG inside data-source-type div or special SVG.');\n          return false; // Don't process if it's already handled or should be handled by squibviewFencedBlock\n        }\n        // console.warn('[HtmlToMarkdown] SVG rule: Processing standalone SVG:', node.outerHTML.substring(0,100));\n        return node.nodeName === 'SVG' && hasSquibIdentifier; // Or other conditions for standalone SVGs\n      },\n      replacement: function (content, node) {\n        // console.warn('[HtmlToMarkdown] SVG rule: Replacing with outerHTML for node:', node.outerHTML.substring(0,100));\n        return node.outerHTML; // Preserve the whole SVG tag\n      }\n    });\n    */\n\n    // Preserve GeoJSON map blocks\n    this.turndownService.addRule('geojson', {\n      filter: node => {\n        return node.nodeName === 'DIV' && \n               node.classList.contains('geojson-map');\n      },\n      replacement: (content, node) => {\n        // Generate a unique ID for this GeoJSON block\n        const blockId = 'geojson_' + Math.random().toString(36).substring(2, 10);\n        \n        // Try to extract the GeoJSON data from the script element\n        let geojsonContent = '';\n        try {\n          // The actual GeoJSON would be in a script tag or in a data attribute\n          // Here we'll use a placeholder since the actual data is hard to extract\n          geojsonContent = node.dataset.geojson || '{\"type\":\"FeatureCollection\",\"features\":[]}';\n        } catch(e) {\n          console.error('Error extracting GeoJSON data:', e);\n        }\n        \n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'geojson',\n            content: geojsonContent\n          });\n        }\n        \n        return `\\n<div data-special-block=\"${blockId}\" class=\"geojson-container\">\\n` +\n               geojsonContent + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    // Preserve Math blocks\n    this.turndownService.addRule('math', {\n      filter: node => {\n        return node.nodeName === 'DIV' && \n               node.classList.contains('math-display');\n      },\n      replacement: (content, node) => {\n        // Generate a unique ID for this math block\n        const blockId = 'math_' + Math.random().toString(36).substring(2, 10);\n        \n        // Get the raw math content (might be wrapped in $$...$$ in the original)\n        let mathContent = node.textContent;\n        \n        // Remove $$ delimiters if present\n        mathContent = mathContent.replace(/^\\$\\$([\\s\\S]*)\\$\\$$/, '$1');\n        \n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'math',\n            content: mathContent\n          });\n        }\n        \n        return `\\n<div data-special-block=\"${blockId}\" class=\"math-container\">\\n` +\n               mathContent + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    // Special handling for code blocks\n    this.turndownService.addRule('codeBlock', {\n      filter: node => {\n        return node.nodeName === 'PRE' && \n               node.firstChild && \n               node.firstChild.nodeName === 'CODE';\n      },\n      replacement: (content, node) => {\n        const code = node.firstChild.textContent;\n        let language = '';\n        \n        // Try to detect language from class\n        if (node.firstChild.className) {\n          const match = node.firstChild.className.match(/language-(\\w+)/);\n          if (match) {\n            language = match[1];\n          }\n        }\n        \n        return '\\n```' + language + '\\n' + code.trim() + '\\n```\\n';\n      }\n    });\n    \n    // Improve table handling\n    this.turndownService.addRule('tableCell', {\n      filter: ['th', 'td'],\n      replacement: (content, node) => {\n        return ' ' + content.trim() + ' |';\n      }\n    });\n    \n    this.turndownService.addRule('tableRow', {\n      filter: 'tr',\n      replacement: (content, node) => {\n        let prefix = '|';\n        \n        // Handle header rows\n        if (node.parentNode.nodeName === 'THEAD') {\n          const cells = node.querySelectorAll('th, td').length;\n          const separatorRow = '\\n|' + ' --- |'.repeat(cells);\n          return prefix + content + separatorRow;\n        }\n        \n        return prefix + content + '\\n';\n      }\n    });\n    \n    this.turndownService.addRule('table', {\n      filter: 'table',\n      replacement: (content, node) => {\n        // If this table is inside our data-source-type div, it's already handled.\n        if (node.parentElement && node.parentElement.hasAttribute('data-source-type')) {\n          const type = node.parentElement.getAttribute('data-source-type');\n          if (type === 'csv' || type === 'tsv' || type === 'psv') {\n            return content; // Turndown will process children, but our main rule handles the fence.\n          }\n        }\n        // Default table processing otherwise\n        // (Existing complex table rule logic from Turndown or custom might be here)\n        // For simplicity, using a basic version of Turndown's own table handling as a placeholder\n        // if not already handled by a more specific rule like the one above for data-source-type.\n        let markdown = '';\n        const headerRow = node.querySelector('thead tr');\n        if (headerRow) {\n          markdown += '|';\n          headerRow.querySelectorAll('th').forEach(th => {\n            markdown += ` ${this.turndownService.turndown(th.innerHTML).trim()} |`;\n          });\n          markdown += '\\n|';\n          headerRow.querySelectorAll('th').forEach(() => {\n            markdown += ' --- |';\n          });\n          markdown += '\\n';\n        }\n\n        const bodyRows = node.querySelectorAll('tbody tr');\n        bodyRows.forEach(row => {\n          markdown += '|';\n          row.querySelectorAll('td').forEach(td => {\n            markdown += ` ${this.turndownService.turndown(td.innerHTML).trim()} |`;\n          });\n          markdown += '\\n';\n        });\n        return '\\n' + markdown + '\\n';\n      }\n    });\n\n    // Ensure this class is aware of custom GFM task list items if not default in Turndown version\n    this.turndownService.keep(['li']); // Keep <li> to allow custom rule for task list items\n    this.turndownService.addRule('taskListItems', {\n      filter: function (node) {\n        return node.nodeName === 'LI' && node.firstChild && node.firstChild.nodeName === 'INPUT' && node.firstChild.type === 'checkbox';\n      },\n      replacement: function (content, node) {\n        const checkbox = node.firstChild;\n        const checked = checkbox.checked;\n        // Need to remove the input from the content that turndown processes for the <li>\n        // The first child (input) is already handled, process the rest of the <li> content.\n        // Create a temporary div to hold the rest of the li children\n        let restOfLiContent = '';\n        let current = checkbox.nextSibling;\n        while(current) {\n            restOfLiContent += current.outerHTML || current.textContent;\n            current = current.nextSibling;\n        }\n        // Turndown the rest of the LI content\n        const markdownContent = this.turndownService.turndown(restOfLiContent).trim(); \n        return (checked ? '[x] ' : '[ ] ') + markdownContent;\n      }\n    });\n  }\n  \n  /**\n   * Get a simplified hash code of a string for caching\n   * \n   * @private\n   * @param {string} str - The string to hash\n   * @returns {string} A hash representation of the string\n   */\n  _getStringHash(str) {\n    // Simple and fast hash function for strings\n    // This is not a cryptographic hash, just for caching purposes\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash.toString(36); // Convert to base36 for shorter string\n  }\n  \n  /**\n   * Convert HTML to Markdown with caching for performance\n   * \n   * @param {string} html - The HTML content to convert\n   * @param {Object} options - Additional options\n   * @param {string} options.originalSource - The original source if available\n   * @returns {string} The converted Markdown content\n   */\n  convert(html, options = {}) {\n    // Clear special blocks map for this conversion\n    this._specialBlocks.clear();\n    this._placeholders = [];\n    \n    // Use a hash of the HTML as the cache key\n    const cacheKey = this._getStringHash(html);\n    \n    // Check if we have a cached version\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey);\n    }\n    \n    // Pre-process HTML to extract and preserve data-source-type containers\n    let processedHtml = this._preProcessSpecialContainers(html);\n    \n    // Convert the HTML to Markdown\n    let markdown = this.turndownService.turndown(processedHtml);\n    \n    // Post-process the markdown to restore special blocks\n    markdown = this._postProcessMarkdown(markdown, options.originalSource);\n    \n    // Cache the result\n    this.cache.set(cacheKey, markdown);\n    \n    // Keep the cache size under control\n    if (this.cache.size > this.cacheSize) {\n      // Remove the oldest entry\n      const firstKey = this.cache.keys().next().value;\n      this.cache.delete(firstKey);\n    }\n    \n    return markdown;\n  }\n  \n  /**\n   * Pre-process HTML to extract data-source-type containers and replace them with placeholders\n   * \n   * @private\n   * @param {string} html - The HTML to process\n   * @returns {string} - The processed HTML with placeholders\n   */\n  _preProcessSpecialContainers(html) {\n    // Handle both browser and test environments safely\n    if (typeof document === 'undefined' || !document.createElement) {\n      // If no document is available, skip pre-processing and use the original HTML\n      console.warn('Document not available, skipping pre-processing');\n      this._placeholders = [];\n      return html;\n    }\n    \n    let tempDiv;\n    try {\n      tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      // Test if querySelector is available - if not, we'll use a fallback approach\n      if (typeof tempDiv.querySelector !== 'function') {\n        throw new Error('querySelector not available');\n      }\n    } catch (e) {\n      // Fallback: if DOM methods aren't available, use simple regex-based processing\n      console.warn('DOM methods not available, using regex fallback for pre-processing');\n      return this._regexFallbackPreProcess(html);\n    }\n    \n    // Find all divs with data-source-type attribute\n    const specialDivs = tempDiv.querySelectorAll('div[data-source-type]');\n    const placeholders = [];\n    \n    specialDivs.forEach((div, index) => {\n      const sourceType = div.getAttribute('data-source-type');\n      const placeholder = `__SPECIAL_CONTAINER_${index}__`;\n      let content;\n      if (sourceType === 'svg' && div.hasAttribute('data-original-source')) {\n        content = div.getAttribute('data-original-source');\n      } else if (['mermaid', 'math', 'geojson'].includes(sourceType) && div.hasAttribute('data-original-source')) {\n        content = div.getAttribute('data-original-source');\n      } else if (sourceType === 'csv' || sourceType === 'tsv' || sourceType === 'psv') {\n        const tableElement = div.querySelector('table');\n        if (tableElement) {\n          content = this._htmlTableToDelimitedText(tableElement, sourceType);\n        } else {\n          content = 'Error: Table not found for ' + sourceType;\n        }\n      } else {\n        const preElement = div.querySelector('pre');\n        if (preElement) {\n          const codeElement = preElement.querySelector('code');\n          content = (codeElement || preElement).textContent.replace(/^[\\r\\n]+|[\\r\\n]+$/g, '');\n        } else {\n          content = div.textContent.replace(/^[\\r\\n]+|[\\r\\n]+$/g, '');\n        }\n      }\n      placeholders.push({\n        placeholder,\n        type: sourceType,\n        content: content\n      });\n      const placeholderText = document.createTextNode(placeholder);\n      if (div.parentNode) {\n        div.parentNode.replaceChild(placeholderText, div);\n      }\n    });\n    \n    // Store placeholders for post-processing\n    this._placeholders = placeholders;\n    \n    return tempDiv.innerHTML;\n  }\n\n  /**\n   * Post-process markdown to restore special blocks and apply additional formatting\n   * \n   * @private\n   * @param {string} markdown - The converted markdown \n   * @param {string} originalSource - The original markdown source if available\n   * @returns {string} - The processed markdown\n   */\n  _postProcessMarkdown(markdown, originalSource) {\n    // First pass: Replace placeholders with proper fenced code blocks\n    if (this._placeholders && this._placeholders.length > 0) {\n      this._placeholders.forEach(({ placeholder, type, content }) => {\n        const langTag = (type === 'code') ? '' : type;\n        const blockContent = content.replace(/^[\\r\\n]+|[\\r\\n]+$/g, '');\n        const fencedBlock = `\\`\\`\\`${langTag}\\n${blockContent}\\n\\`\\`\\``;\n        \n        // Handle both DOM-based placeholders (text nodes) and regex-based placeholders\n        const textPlaceholder = placeholder; // This is __SPECIAL_CONTAINER_${idx}__\n        const escapedPlaceholder = textPlaceholder.replace(/_/g, '\\\\_'); // Turndown escapes underscores\n        \n        // Replace the placeholder with the fenced block (try both forms)\n        if (markdown.includes(textPlaceholder)) {\n          markdown = markdown.replace(textPlaceholder, fencedBlock);\n        } else if (markdown.includes(escapedPlaceholder)) {\n          markdown = markdown.replace(escapedPlaceholder, fencedBlock);\n        }\n      });\n    }\n    \n    // Second pass: Convert any remaining special blocks markers back to proper markdown\n    \n    // Convert mermaid blocks\n    const mermaidBlockRegex = /<div data-special-block=\"mermaid_[^\"]*\" class=\"mermaid\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(mermaidBlockRegex, (match, content) => {\n      return `\\n\\`\\`\\`mermaid\\n${content.trim()}\\n\\`\\`\\`\\n`;\n    });\n    \n    // Convert SVG blocks\n    const svgBlockRegex = /<div data-special-block=\"svg_[^\"]*\" class=\"svg-container\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(svgBlockRegex, (match, content) => {\n      // Try to find a closing SVG tag\n      const svgMatch = content.match(/<svg[\\s\\S]*?<\\/svg>/);\n      if (svgMatch) {\n        return `\\n\\`\\`\\`svg\\n${svgMatch[0]}\\n\\`\\`\\`\\n`;\n      }\n      return match;\n    });\n    \n    // Convert GeoJSON blocks\n    const geojsonBlockRegex = /<div data-special-block=\"geojson_[^\"]*\" class=\"geojson-container\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(geojsonBlockRegex, (match, content) => {\n      try {\n        // Ensure content is valid JSON before creating the code block\n        JSON.parse(content);\n        return `\\n\\`\\`\\`geojson\\n${content.trim()}\\n\\`\\`\\`\\n`;\n      } catch (e) {\n        console.error('Invalid GeoJSON data:', e);\n        return `\\n\\`\\`\\`geojson\\n{\"type\":\"FeatureCollection\",\"features\":[]}\\n\\`\\`\\`\\n`;\n      }\n    });\n    \n    // Convert Math blocks\n    const mathBlockRegex = /<div data-special-block=\"math_[^\"]*\" class=\"math-container\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(mathBlockRegex, (match, content) => {\n      return `\\n\\`\\`\\`math\\n${content.trim()}\\n\\`\\`\\`\\n`;\n    });\n    \n    // Second pass: Restore blocks from original source if possible\n    if (originalSource) {\n      // Extract code blocks from original source\n      const codeBlockRegex = /```(\\w+)\\s*([\\s\\S]*?)```/g;\n      let match;\n      let blockIndex = 0;\n      const originalBlocks = [];\n      \n      while ((match = codeBlockRegex.exec(originalSource)) !== null) {\n        const type = match[1];\n        const content = match[2];\n        \n        if (type === 'mermaid' || type === 'svg' || type === 'geojson' || type === 'math') {\n          originalBlocks.push({\n            type,\n            content: match[0],\n            index: blockIndex++\n          });\n        }\n      }\n      \n      // Try to match original blocks with current blocks\n      // This is a simplistic approach that assumes blocks are in the same order\n      \n      let mermaidIndex = 0;\n      let svgIndex = 0;\n      let geojsonIndex = 0;\n      let mathIndex = 0;\n      \n      // Replace mermaid blocks\n      markdown = markdown.replace(/```mermaid\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const mermaidBlocks = originalBlocks.filter(b => b.type === 'mermaid');\n        if (mermaidIndex < mermaidBlocks.length) {\n          return mermaidBlocks[mermaidIndex++].content;\n        }\n        return match;\n      });\n      \n      // Replace SVG blocks\n      markdown = markdown.replace(/```svg\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const svgBlocks = originalBlocks.filter(b => b.type === 'svg');\n        if (svgIndex < svgBlocks.length) {\n          return svgBlocks[svgIndex++].content;\n        }\n        return match;\n      });\n      \n      // Replace GeoJSON blocks\n      markdown = markdown.replace(/```geojson\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const geojsonBlocks = originalBlocks.filter(b => b.type === 'geojson');\n        if (geojsonIndex < geojsonBlocks.length) {\n          return geojsonBlocks[geojsonIndex++].content;\n        }\n        return match;\n      });\n      \n      // Replace Math blocks\n      markdown = markdown.replace(/```math\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const mathBlocks = originalBlocks.filter(b => b.type === 'math');\n        if (mathIndex < mathBlocks.length) {\n          return mathBlocks[mathIndex++].content;\n        }\n        return match;\n      });\n    }\n    \n    return markdown;\n  }\n\n  /**\n   * Converts an HTML table element to a delimited string (CSV, TSV, etc.).\n   * @param {HTMLTableElement} tableElement The HTML table element.\n   * @param {string} type The type of delimited format ('csv', 'tsv', 'psv').\n   * @returns {string} The delimited text representation of the table.\n   * @private\n   */\n  _htmlTableToDelimitedText(tableElement, type) {\n    let delimiter;\n    switch (type) {\n      case 'csv': delimiter = ','; break;\n      case 'tsv': delimiter = '\\t'; break;\n      case 'psv': delimiter = '|'; break;\n      default:    delimiter = ','; // Default to CSV\n    }\n\n    const data = [];\n    \n    // Check if we have proper DOM methods available\n    if (!tableElement || typeof tableElement.querySelectorAll !== 'function') {\n      console.warn('DOM methods not available for table extraction, using regex fallback');\n      return this._extractTableDataFromHtml(tableElement ? tableElement.outerHTML || tableElement.innerHTML || String(tableElement) : '', type);\n    }\n    \n    const rows = tableElement.querySelectorAll('tr');\n    \n    // Additional safety check for the rows result\n    if (!rows || typeof rows.forEach !== 'function') {\n      console.warn('querySelectorAll did not return proper NodeList, falling back to regex');\n      return this._extractTableDataFromHtml(tableElement.outerHTML || tableElement.innerHTML || String(tableElement), type);\n    }\n\n    rows.forEach(row => {\n      const rowData = [];\n      const cells = row.querySelectorAll('th, td');\n      cells.forEach(cell => {\n        // Basic text content extraction. For complex cell content, might need refinement.\n        // Replace newlines within a cell with a space, trim content.\n        let cellText = cell.textContent || '';\n        cellText = cellText.replace(/\\r?\\n|\\r/g, ' ').trim();\n        // If delimiter is comma, and cellText contains comma, quote it.\n        if (delimiter === ',' && cellText.includes(',')) {\n          cellText = `\"${cellText.replace(/\"/g, '\"\"')}\"`;\n        }\n        // If delimiter is tab, and cellText contains tab, it might be an issue depending on consumer.\n        // For PSV, if cellText contains pipe, it's an issue unless handled by quoting (not standard for PSV).\n        rowData.push(cellText);\n      });\n      data.push(rowData.join(delimiter));\n    });\n\n    return data.join('\\n');\n  }\n\n  /**\n   * Extract table data from HTML content using regex when DOM methods aren't available\n   * \n   * @private\n   * @param {string} htmlContent - The HTML content containing the table\n   * @param {string} type - The type of delimited format ('csv', 'tsv', 'psv')\n   * @returns {string} - The extracted delimited text\n   */\n  _extractTableDataFromHtml(htmlContent, type) {\n    let delimiter;\n    switch (type) {\n      case 'csv': delimiter = ','; break;\n      case 'tsv': delimiter = '\\t'; break;\n      case 'psv': delimiter = '|'; break;\n      default:    delimiter = ','; // Default to CSV\n    }\n\n    try {\n      // Extract all table rows using regex\n      const rowRegex = /<tr[^>]*>([\\s\\S]*?)<\\/tr>/gi;\n      const rows = [];\n      let match;\n\n      while ((match = rowRegex.exec(htmlContent)) !== null) {\n        const rowContent = match[1];\n        \n        // Extract all cells (th or td) from this row\n        const cellRegex = /<(?:th|td)[^>]*>([\\s\\S]*?)<\\/(?:th|td)>/gi;\n        const cells = [];\n        let cellMatch;\n\n        while ((cellMatch = cellRegex.exec(rowContent)) !== null) {\n          let cellText = cellMatch[1];\n          \n          // Remove HTML tags and decode entities\n          cellText = cellText\n            .replace(/<[^>]*>/g, '') // Remove all HTML tags\n            .replace(/&quot;/g, '\"')\n            .replace(/&#x27;/g, \"'\")\n            .replace(/&lt;/g, '<')\n            .replace(/&gt;/g, '>')\n            .replace(/&amp;/g, '&')\n            .replace(/\\r?\\n|\\r/g, ' ') // Replace newlines with spaces\n            .trim();\n\n          // Handle CSV quoting if cell contains delimiter\n          if (delimiter === ',' && cellText.includes(',')) {\n            cellText = `\"${cellText.replace(/\"/g, '\"\"')}\"`;\n          }\n\n          cells.push(cellText);\n        }\n\n        if (cells.length > 0) {\n          rows.push(cells.join(delimiter));\n        }\n      }\n\n      return rows.join('\\n');\n    } catch (e) {\n      console.error('Error extracting table data from HTML:', e);\n      return 'Error: Could not extract table data';\n    }\n  }\n\n  /**\n   * Regex-based fallback for pre-processing when DOM methods aren't available\n   * \n   * @private\n   * @param {string} html - The HTML to process\n   * @returns {string} - The processed HTML with placeholders\n   */\n  _regexFallbackPreProcess(html) {\n    // Simple regex-based approach when DOM isn't available\n    // This matches div elements with data-source-type attributes\n    const divRegex = /<div[^>]*data-source-type=\"([^\"]*)\"[^>]*>([\\s\\S]*?)<\\/div>/g;\n    const placeholders = [];\n    let index = 0;\n    \n    const processedHtml = html.replace(divRegex, (match, sourceType, content) => {\n      const placeholder = `__SPECIAL_CONTAINER_${index}__`;\n      \n      // Extract content based on type\n      let extractedContent;\n      if (sourceType === 'svg') {\n        // For SVG, look for data-original-source attribute first\n        const originalSourceMatch = match.match(/data-original-source=\"([^\"]*)\"/);\n        if (originalSourceMatch) {\n          // Decode HTML entities in the attribute value\n          extractedContent = originalSourceMatch[1]\n            .replace(/&quot;/g, '\"')\n            .replace(/&#x27;/g, \"'\")\n            .replace(/&lt;/g, '<')\n            .replace(/&gt;/g, '>')\n            .replace(/&amp;/g, '&');\n        } else {\n          // Fallback to inner SVG content\n          const svgMatch = content.match(/<svg[\\s\\S]*?<\\/svg>/);\n          extractedContent = svgMatch ? svgMatch[0] : content;\n        }\n      } else if (sourceType === 'csv' || sourceType === 'tsv' || sourceType === 'psv') {\n        // For delimited data, we need to extract from table using regex\n        extractedContent = this._extractTableDataFromHtml(content, sourceType);\n      } else {\n        // For code blocks, extract from pre/code elements\n        const preMatch = content.match(/<pre[^>]*><code[^>]*>([\\s\\S]*?)<\\/code><\\/pre>/);\n        if (preMatch) {\n          extractedContent = preMatch[1]\n            .replace(/<span[^>]*>/g, '')\n            .replace(/<\\/span>/g, '')\n            .replace(/&quot;/g, '\"')\n            .replace(/&lt;/g, '<')\n            .replace(/&gt;/g, '>')\n            .replace(/&amp;/g, '&');\n        } else {\n          // For other content types (mermaid, math, etc.), use raw content but decode HTML entities\n          extractedContent = content\n            .replace(/<[^>]*>/g, '') // Remove any HTML tags\n            .replace(/&quot;/g, '\"')\n            .replace(/&#x27;/g, \"'\")\n            .replace(/&lt;/g, '<')\n            .replace(/&gt;/g, '>')\n            .replace(/&amp;/g, '&'); // &amp; should be last to avoid double-decoding\n        }\n      }\n      \n      placeholders.push({\n        placeholder,\n        type: sourceType,\n        content: extractedContent\n      });\n      \n      index++;\n      return `<p>${placeholder}</p>`;\n    });\n    \n    // Store placeholders for post-processing\n    this._placeholders = placeholders;\n    \n    return processedHtml;\n  }\n}"],"names":["HtmlToMarkdown","options","arguments","length","undefined","_classCallCheck","turndownService","TurndownService","_objectSpread","headingStyle","codeBlockStyle","emDelimiter","bulletListMarker","cache","Map","cacheSize","_specialBlocks","configureTurndownRules","_createClass","key","value","_this","addRule","filter","node","nodeName","hasAttribute","replacement","content","lang","getAttribute","innerContent","contentFromHtml","innerHTML","replace","tempDiv","ownerDocument","createElement","textContent","innerText","trim","console","warn","tableElement","querySelector","_htmlTableToDelimitedText","preElement","codeElement","langTag","finalInnerContent","outerHTML","classList","contains","blockId","Math","random","toString","substring","set","type","concat","geojsonContent","dataset","geojson","e","error","mathContent","firstChild","code","language","className","match","prefix","parentNode","cells","querySelectorAll","separatorRow","repeat","parentElement","markdown","headerRow","forEach","th","turndown","bodyRows","row","td","keep","checkbox","checked","restOfLiContent","current","nextSibling","markdownContent","_getStringHash","str","hash","i","char","charCodeAt","convert","html","clear","_placeholders","cacheKey","has","get","processedHtml","_preProcessSpecialContainers","_postProcessMarkdown","originalSource","size","firstKey","keys","next","_this2","document","Error","_regexFallbackPreProcess","specialDivs","placeholders","div","index","sourceType","placeholder","includes","push","placeholderText","createTextNode","replaceChild","_ref","blockContent","fencedBlock","textPlaceholder","escapedPlaceholder","mermaidBlockRegex","svgBlockRegex","svgMatch","geojsonBlockRegex","JSON","parse","mathBlockRegex","codeBlockRegex","blockIndex","originalBlocks","exec","mermaidIndex","svgIndex","geojsonIndex","mathIndex","mermaidBlocks","b","svgBlocks","geojsonBlocks","mathBlocks","delimiter","data","_extractTableDataFromHtml","String","rows","rowData","cell","cellText","join","htmlContent","rowRegex","rowContent","cellRegex","cellMatch","_this3","divRegex","extractedContent","originalSourceMatch","preMatch"],"mappings":"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"}