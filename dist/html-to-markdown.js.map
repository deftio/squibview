{"version":3,"file":"html-to-markdown.js","sources":["../src/HtmlToMarkdown.js"],"sourcesContent":["import TurndownService from 'turndown';\n\n/**\n * Converts HTML content to Markdown format using the Turndown library with \n * customizations specific to SquibView's needs.\n */\nexport default class HtmlToMarkdown {\n  constructor(options = {}) {\n    console.warn('[HtmlToMarkdown] CONSTRUCTOR CALLED');\n    this.turndownService = new TurndownService({\n      headingStyle: 'atx',       // Use # style headings\n      codeBlockStyle: 'fenced',  // Use ``` style code blocks\n      emDelimiter: '*',          // Use * for emphasis\n      bulletListMarker: '-',     // Use - for bullet lists\n      ...options\n    });\n    \n    // Add a simple cache for converted content to improve performance\n    this.cache = new Map();\n    this.cacheSize = options.cacheSize || 10;\n    \n    // Store special blocks for preservation\n    this._specialBlocks = new Map();\n    \n    this.configureTurndownRules();\n  }\n  \n  /**\n   * Configure custom Turndown rules\n   */\n  configureTurndownRules() {\n    // Preserve HTML image tags by returning their outerHTML\n    this.turndownService.addRule('keepImageTags', {\n      filter: 'img',\n      replacement: function (content, node) {\n        return node.outerHTML;\n      }\n    });\n\n    // Rule for our data-source-type wrapper divs - should be high priority\n    this.turndownService.addRule('squibviewFencedBlock', {\n      filter: (node) => {\n        const hasAttr = node.nodeName === 'DIV' && node.hasAttribute('data-source-type');\n        if (hasAttr) {\n          const lang = node.getAttribute('data-source-type') || 'code';\n          console.warn(`[HtmlToMarkdown] squibviewFencedBlock filter: Matched div with data-source-type=\"${lang}\". Node outerHTML:`, node.outerHTML);\n        }\n        return hasAttr;\n      },\n      replacement: (content, node, options) => {\n        const lang = node.getAttribute('data-source-type') || 'code';\n        let innerContent = '';\n\n        switch (lang) {\n          case 'mermaid':\n          case 'math':\n            let contentFromHtml = node.innerHTML;\n            // Convert <br> tags to newlines first\n            contentFromHtml = contentFromHtml.replace(/<br\\s*\\/?>/gi, '\\n');\n            // Strip any other HTML tags (simple regex, not for complex/nested HTML)\n            contentFromHtml = contentFromHtml.replace(/<[^>]+>/g, '');\n            // Use a textarea to unescape HTML entities & normalize\n            const tempTextArea = document.createElement('textarea');\n            tempTextArea.innerHTML = contentFromHtml;\n            innerContent = tempTextArea.value.trim();\n            break;\n          case 'svg':\n            // This console.warn is inside the replacement. If not reached, filter or lang extraction is the issue.\n            console.warn('[HtmlToMarkdown] squibviewFencedBlock REPLACEMENT for SVG. Node outerHTML:', node.outerHTML, 'Node innerHTML:', node.innerHTML);\n            innerContent = node.innerHTML.trim();\n            break;\n          case 'csv':\n          case 'tsv':\n          case 'psv':\n            const tableElement = node.querySelector('table');\n            if (tableElement) {\n              innerContent = this._htmlTableToDelimitedText(tableElement, lang);\n            } else {\n              innerContent = 'Error: Table not found for ' + lang;\n              console.warn('Could not find table inside div[data-source-type=\"' + lang + '\"]');\n            }\n            break;\n          default: // Handles 'javascript', 'python', 'code', etc.\n            const preElement = node.querySelector('pre');\n            if (preElement) {\n              const codeElement = preElement.querySelector('code');\n              // textContent of <code> or <pre> contains the code.\n              innerContent = (codeElement || preElement).textContent.trimEnd(); // trimEnd to preserve leading newlines if any, but remove trailing ones from block.\n            } else {\n              // Fallback if <pre> not found (e.g. if it was just a div with code)\n              innerContent = node.textContent.trimEnd();\n               console.warn('Could not find <pre> inside div[data-source-type=\"' + lang + '\"]');\n            }\n            break;\n        }\n\n        const langTag = (lang === 'code') ? '' : lang;\n        // Ensure there's a newline before the closing fence if content doesn't end with one.\n        if (innerContent && !innerContent.endsWith('\\n')) {\n          innerContent += '\\n';\n        }\n        return '\\n```' + langTag + '\\n' + innerContent + '```\\n';\n      }\n    });\n    \n    // Preserve Mermaid diagram blocks with special identifiers\n    this.turndownService.addRule('mermaid', {\n      filter: node => {\n        return node.nodeName === 'DIV' && \n               node.classList.contains('mermaid');\n      },\n      replacement: (content, node) => {\n        // Generate a unique ID for this mermaid block to help with matching later\n        const blockId = 'mermaid_' + Math.random().toString(36).substring(2, 10);\n        \n        // Store the raw content for later use\n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'mermaid',\n            content: node.textContent\n          });\n        }\n        \n        // Return with special marker that can be identified later\n        return `\\n<div data-special-block=\"${blockId}\" class=\"mermaid\">\\n` +\n               node.textContent + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    // Preserve SVG elements with special identifiers\n    this.turndownService.addRule('svg', {\n      filter: node => {\n        const isSvg = node.nodeName === 'SVG';\n        const isChildOfSquibViewSvgDiv = !!(node.parentElement && node.parentElement.nodeName === 'DIV' && node.parentElement.getAttribute('data-source-type') === 'svg');\n        if (isSvg) {\n          console.warn(`[HtmlToMarkdown] standalone 'svg' rule filter: Matched <svg>. Is child of SquibView SVG div? ${isChildOfSquibViewSvgDiv}. Node outerHTML:`, node.outerHTML);\n        }\n        return isSvg && !isChildOfSquibViewSvgDiv;\n      },\n      replacement: (content, node) => {\n        // Generate a unique ID for this SVG block\n        const blockId = 'svg_' + Math.random().toString(36).substring(2, 10);\n        \n        // Store the raw SVG for later use\n        const serializer = new XMLSerializer();\n        const svgString = serializer.serializeToString(node);\n        \n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'svg',\n            content: svgString\n          });\n        }\n        \n        // Return with special marker\n        return `\\n<div data-special-block=\"${blockId}\" class=\"svg-container\">\\n` +\n               svgString + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    // Preserve GeoJSON map blocks\n    this.turndownService.addRule('geojson', {\n      filter: node => {\n        return node.nodeName === 'DIV' && \n               node.classList.contains('geojson-map');\n      },\n      replacement: (content, node) => {\n        // Generate a unique ID for this GeoJSON block\n        const blockId = 'geojson_' + Math.random().toString(36).substring(2, 10);\n        \n        // Try to extract the GeoJSON data from the script element\n        let geojsonContent = '';\n        try {\n          // The actual GeoJSON would be in a script tag or in a data attribute\n          // Here we'll use a placeholder since the actual data is hard to extract\n          geojsonContent = node.dataset.geojson || '{\"type\":\"FeatureCollection\",\"features\":[]}';\n        } catch(e) {\n          console.error('Error extracting GeoJSON data:', e);\n        }\n        \n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'geojson',\n            content: geojsonContent\n          });\n        }\n        \n        return `\\n<div data-special-block=\"${blockId}\" class=\"geojson-container\">\\n` +\n               geojsonContent + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    // Preserve Math blocks\n    this.turndownService.addRule('math', {\n      filter: node => {\n        return node.nodeName === 'DIV' && \n               node.classList.contains('math-display');\n      },\n      replacement: (content, node) => {\n        // Generate a unique ID for this math block\n        const blockId = 'math_' + Math.random().toString(36).substring(2, 10);\n        \n        // Get the raw math content (might be wrapped in $$...$$ in the original)\n        let mathContent = node.textContent;\n        \n        // Remove $$ delimiters if present\n        mathContent = mathContent.replace(/^\\$\\$([\\s\\S]*)\\$\\$$/, '$1');\n        \n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'math',\n            content: mathContent\n          });\n        }\n        \n        return `\\n<div data-special-block=\"${blockId}\" class=\"math-container\">\\n` +\n               mathContent + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    // Special handling for code blocks\n    this.turndownService.addRule('codeBlock', {\n      filter: node => {\n        return node.nodeName === 'PRE' && \n               node.firstChild && \n               node.firstChild.nodeName === 'CODE';\n      },\n      replacement: (content, node) => {\n        const code = node.firstChild.textContent;\n        let language = '';\n        \n        // Try to detect language from class\n        if (node.firstChild.className) {\n          const match = node.firstChild.className.match(/language-(\\w+)/);\n          if (match) {\n            language = match[1];\n          }\n        }\n        \n        return '\\n```' + language + '\\n' + code.trim() + '\\n```\\n';\n      }\n    });\n    \n    // Improve table handling\n    this.turndownService.addRule('tableCell', {\n      filter: ['th', 'td'],\n      replacement: (content, node) => {\n        return ' ' + content.trim() + ' |';\n      }\n    });\n    \n    this.turndownService.addRule('tableRow', {\n      filter: 'tr',\n      replacement: (content, node) => {\n        let prefix = '|';\n        \n        // Handle header rows\n        if (node.parentNode.nodeName === 'THEAD') {\n          const cells = node.querySelectorAll('th, td').length;\n          const separatorRow = '\\n|' + ' --- |'.repeat(cells);\n          return prefix + content + separatorRow;\n        }\n        \n        return prefix + content + '\\n';\n      }\n    });\n    \n    this.turndownService.addRule('table', {\n      filter: 'table',\n      replacement: (content, node) => {\n        // If this table is inside our data-source-type div, it's already handled.\n        if (node.parentElement && node.parentElement.hasAttribute('data-source-type')) {\n          const type = node.parentElement.getAttribute('data-source-type');\n          if (type === 'csv' || type === 'tsv' || type === 'psv') {\n            return content; // Turndown will process children, but our main rule handles the fence.\n          }\n        }\n        // Default table processing otherwise\n        // (Existing complex table rule logic from Turndown or custom might be here)\n        // For simplicity, using a basic version of Turndown's own table handling as a placeholder\n        // if not already handled by a more specific rule like the one above for data-source-type.\n        let markdown = '';\n        const headerRow = node.querySelector('thead tr');\n        if (headerRow) {\n          markdown += '|';\n          headerRow.querySelectorAll('th').forEach(th => {\n            markdown += ` ${this.turndownService.turndown(th.innerHTML).trim()} |`;\n          });\n          markdown += '\\n|';\n          headerRow.querySelectorAll('th').forEach(() => {\n            markdown += ' --- |';\n          });\n          markdown += '\\n';\n        }\n\n        const bodyRows = node.querySelectorAll('tbody tr');\n        bodyRows.forEach(row => {\n          markdown += '|';\n          row.querySelectorAll('td').forEach(td => {\n            markdown += ` ${this.turndownService.turndown(td.innerHTML).trim()} |`;\n          });\n          markdown += '\\n';\n        });\n        return '\\n' + markdown + '\\n';\n      }\n    });\n\n    // Ensure this class is aware of custom GFM task list items if not default in Turndown version\n    this.turndownService.keep(['li']); // Keep <li> to allow custom rule for task list items\n    this.turndownService.addRule('taskListItems', {\n      filter: function (node) {\n        return node.nodeName === 'LI' && node.firstChild && node.firstChild.nodeName === 'INPUT' && node.firstChild.type === 'checkbox';\n      },\n      replacement: function (content, node) {\n        const checkbox = node.firstChild;\n        const checked = checkbox.checked;\n        // Need to remove the input from the content that turndown processes for the <li>\n        // The first child (input) is already handled, process the rest of the <li> content.\n        // Create a temporary div to hold the rest of the li children\n        let restOfLiContent = '';\n        let current = checkbox.nextSibling;\n        while(current) {\n            restOfLiContent += current.outerHTML || current.textContent;\n            current = current.nextSibling;\n        }\n        // Turndown the rest of the LI content\n        const markdownContent = this.turndownService.turndown(restOfLiContent).trim(); \n        return (checked ? '[x] ' : '[ ] ') + markdownContent;\n      }\n    });\n  }\n  \n  /**\n   * Get a simplified hash code of a string for caching\n   * \n   * @private\n   * @param {string} str - The string to hash\n   * @returns {string} A hash representation of the string\n   */\n  _getStringHash(str) {\n    // Simple and fast hash function for strings\n    // This is not a cryptographic hash, just for caching purposes\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash.toString(36); // Convert to base36 for shorter string\n  }\n  \n  /**\n   * Convert HTML to Markdown with caching for performance\n   * \n   * @param {string} html - The HTML content to convert\n   * @param {Object} options - Additional options\n   * @param {string} options.originalSource - The original source if available\n   * @returns {string} The converted Markdown content\n   */\n  convert(html, options = {}) {\n    console.warn('[HtmlToMarkdown] CONVERT METHOD CALLED. HTML input (first 100 chars):', html.substring(0, 100));\n    // Clear special blocks map for this conversion\n    this._specialBlocks.clear();\n    \n    // Use a hash of the HTML as the cache key\n    const cacheKey = this._getStringHash(html);\n    \n    // Check if we have a cached version\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey);\n    }\n    \n    // Convert the HTML to Markdown\n    let markdown = this.turndownService.turndown(html);\n    \n    // Post-process the markdown to restore special blocks\n    markdown = this._postProcessMarkdown(markdown, options.originalSource);\n    \n    // Cache the result\n    this.cache.set(cacheKey, markdown);\n    \n    // Keep the cache size under control\n    if (this.cache.size > this.cacheSize) {\n      // Remove the oldest entry\n      const firstKey = this.cache.keys().next().value;\n      this.cache.delete(firstKey);\n    }\n    \n    return markdown;\n  }\n  \n  /**\n   * Post-process markdown to restore special blocks and apply additional formatting\n   * \n   * @private\n   * @param {string} markdown - The converted markdown \n   * @param {string} originalSource - The original markdown source if available\n   * @returns {string} - The processed markdown\n   */\n  _postProcessMarkdown(markdown, originalSource) {\n    // First pass: Convert the special blocks markers back to proper markdown\n    \n    // Convert mermaid blocks\n    const mermaidBlockRegex = /<div data-special-block=\"mermaid_[^\"]*\" class=\"mermaid\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(mermaidBlockRegex, (match, content) => {\n      return `\\n\\`\\`\\`mermaid\\n${content.trim()}\\n\\`\\`\\`\\n`;\n    });\n    \n    // Convert SVG blocks\n    const svgBlockRegex = /<div data-special-block=\"svg_[^\"]*\" class=\"svg-container\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(svgBlockRegex, (match, content) => {\n      // Try to find a closing SVG tag\n      const svgMatch = content.match(/<svg[\\s\\S]*?<\\/svg>/);\n      if (svgMatch) {\n        return `\\n\\`\\`\\`svg\\n${svgMatch[0]}\\n\\`\\`\\`\\n`;\n      }\n      return match;\n    });\n    \n    // Convert GeoJSON blocks\n    const geojsonBlockRegex = /<div data-special-block=\"geojson_[^\"]*\" class=\"geojson-container\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(geojsonBlockRegex, (match, content) => {\n      try {\n        // Ensure content is valid JSON before creating the code block\n        JSON.parse(content);\n        return `\\n\\`\\`\\`geojson\\n${content.trim()}\\n\\`\\`\\`\\n`;\n      } catch (e) {\n        console.error('Invalid GeoJSON data:', e);\n        return `\\n\\`\\`\\`geojson\\n{\"type\":\"FeatureCollection\",\"features\":[]}\\n\\`\\`\\`\\n`;\n      }\n    });\n    \n    // Convert Math blocks\n    const mathBlockRegex = /<div data-special-block=\"math_[^\"]*\" class=\"math-container\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(mathBlockRegex, (match, content) => {\n      return `\\n\\`\\`\\`math\\n${content.trim()}\\n\\`\\`\\`\\n`;\n    });\n    \n    // Second pass: Restore blocks from original source if possible\n    if (originalSource) {\n      // Extract code blocks from original source\n      const codeBlockRegex = /```(\\w+)\\s*([\\s\\S]*?)```/g;\n      let match;\n      let blockIndex = 0;\n      const originalBlocks = [];\n      \n      while ((match = codeBlockRegex.exec(originalSource)) !== null) {\n        const type = match[1];\n        const content = match[2];\n        \n        if (type === 'mermaid' || type === 'svg' || type === 'geojson' || type === 'math') {\n          originalBlocks.push({\n            type,\n            content: match[0],\n            index: blockIndex++\n          });\n        }\n      }\n      \n      // Try to match original blocks with current blocks\n      // This is a simplistic approach that assumes blocks are in the same order\n      \n      let mermaidIndex = 0;\n      let svgIndex = 0;\n      let geojsonIndex = 0;\n      let mathIndex = 0;\n      \n      // Replace mermaid blocks\n      markdown = markdown.replace(/```mermaid\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const mermaidBlocks = originalBlocks.filter(b => b.type === 'mermaid');\n        if (mermaidIndex < mermaidBlocks.length) {\n          return mermaidBlocks[mermaidIndex++].content;\n        }\n        return match;\n      });\n      \n      // Replace SVG blocks\n      markdown = markdown.replace(/```svg\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const svgBlocks = originalBlocks.filter(b => b.type === 'svg');\n        if (svgIndex < svgBlocks.length) {\n          return svgBlocks[svgIndex++].content;\n        }\n        return match;\n      });\n      \n      // Replace GeoJSON blocks\n      markdown = markdown.replace(/```geojson\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const geojsonBlocks = originalBlocks.filter(b => b.type === 'geojson');\n        if (geojsonIndex < geojsonBlocks.length) {\n          return geojsonBlocks[geojsonIndex++].content;\n        }\n        return match;\n      });\n      \n      // Replace Math blocks\n      markdown = markdown.replace(/```math\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const mathBlocks = originalBlocks.filter(b => b.type === 'math');\n        if (mathIndex < mathBlocks.length) {\n          return mathBlocks[mathIndex++].content;\n        }\n        return match;\n      });\n    }\n    \n    return markdown;\n  }\n\n  /**\n   * Converts an HTML table element to a delimited string (CSV, TSV, etc.).\n   * @param {HTMLTableElement} tableElement The HTML table element.\n   * @param {string} type The type of delimited format ('csv', 'tsv', 'psv').\n   * @returns {string} The delimited text representation of the table.\n   * @private\n   */\n  _htmlTableToDelimitedText(tableElement, type) {\n    let delimiter;\n    switch (type) {\n      case 'csv': delimiter = ','; break;\n      case 'tsv': delimiter = '\\t'; break;\n      case 'psv': delimiter = '|'; break;\n      default:    delimiter = ','; // Default to CSV\n    }\n\n    const data = [];\n    const rows = tableElement.querySelectorAll('tr');\n\n    rows.forEach(row => {\n      const rowData = [];\n      const cells = row.querySelectorAll('th, td');\n      cells.forEach(cell => {\n        // Basic text content extraction. For complex cell content, might need refinement.\n        // Replace newlines within a cell with a space, trim content.\n        let cellText = cell.textContent || '';\n        cellText = cellText.replace(/\\r?\\n|\\r/g, ' ').trim();\n        // If delimiter is comma, and cellText contains comma, quote it.\n        if (delimiter === ',' && cellText.includes(',')) {\n          cellText = `\"${cellText.replace(/\"/g, '\"\"')}\"`;\n        }\n        // If delimiter is tab, and cellText contains tab, it might be an issue depending on consumer.\n        // For PSV, if cellText contains pipe, it's an issue unless handled by quoting (not standard for PSV).\n        rowData.push(cellText);\n      });\n      data.push(rowData.join(delimiter));\n    });\n\n    return data.join('\\n');\n  }\n}"],"names":["HtmlToMarkdown","options","arguments","length","undefined","_classCallCheck","console","warn","turndownService","TurndownService","_objectSpread","headingStyle","codeBlockStyle","emDelimiter","bulletListMarker","cache","Map","cacheSize","_specialBlocks","configureTurndownRules","_createClass","key","value","_this","addRule","filter","replacement","content","node","outerHTML","hasAttr","nodeName","hasAttribute","lang","getAttribute","concat","innerContent","contentFromHtml","innerHTML","replace","tempTextArea","document","createElement","trim","tableElement","querySelector","_htmlTableToDelimitedText","preElement","codeElement","textContent","trimEnd","langTag","endsWith","classList","contains","blockId","Math","random","toString","substring","set","type","isSvg","isChildOfSquibViewSvgDiv","parentElement","serializer","XMLSerializer","svgString","serializeToString","geojsonContent","dataset","geojson","e","error","mathContent","firstChild","code","language","className","match","prefix","parentNode","cells","querySelectorAll","separatorRow","repeat","markdown","headerRow","forEach","th","turndown","bodyRows","row","td","keep","checkbox","checked","restOfLiContent","current","nextSibling","markdownContent","_getStringHash","str","hash","i","char","charCodeAt","convert","html","clear","cacheKey","has","get","_postProcessMarkdown","originalSource","size","firstKey","keys","next","mermaidBlockRegex","svgBlockRegex","svgMatch","geojsonBlockRegex","JSON","parse","mathBlockRegex","codeBlockRegex","blockIndex","originalBlocks","exec","push","index","mermaidIndex","svgIndex","geojsonIndex","mathIndex","mermaidBlocks","b","svgBlocks","geojsonBlocks","mathBlocks","delimiter","data","rows","rowData","cell","cellText","includes","join"],"mappings":"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"}