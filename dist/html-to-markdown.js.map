{"version":3,"file":"html-to-markdown.js","sources":["../src/HtmlToMarkdown.js"],"sourcesContent":["import TurndownService from 'turndown';\n\n/**\n * Converts HTML content to Markdown format using the Turndown library with \n * customizations specific to SquibView's needs.\n */\nexport default class HtmlToMarkdown {\n  constructor(options = {}) {\n    this.turndownService = new TurndownService({\n      headingStyle: 'atx',       // Use # style headings\n      codeBlockStyle: 'fenced',  // Use ``` style code blocks\n      emDelimiter: '*',          // Use * for emphasis\n      bulletListMarker: '-',     // Use - for bullet lists\n      ...options\n    });\n    \n    // Add a simple cache for converted content to improve performance\n    this.cache = new Map();\n    this.cacheSize = options.cacheSize || 10;\n    \n    // Store special blocks for preservation\n    this._specialBlocks = new Map();\n    \n    this.configureTurndownRules();\n  }\n  \n  /**\n   * Configure custom Turndown rules\n   */\n  configureTurndownRules() {\n    // Preserve Mermaid diagram blocks with special identifiers\n    this.turndownService.addRule('mermaid', {\n      filter: node => {\n        return node.nodeName === 'DIV' && \n               node.classList.contains('mermaid');\n      },\n      replacement: (content, node) => {\n        // Generate a unique ID for this mermaid block to help with matching later\n        const blockId = 'mermaid_' + Math.random().toString(36).substring(2, 10);\n        \n        // Store the raw content for later use\n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'mermaid',\n            content: node.textContent\n          });\n        }\n        \n        // Return with special marker that can be identified later\n        return `\\n<div data-special-block=\"${blockId}\" class=\"mermaid\">\\n` +\n               node.textContent + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    // Preserve SVG elements with special identifiers\n    this.turndownService.addRule('svg', {\n      filter: 'svg',\n      replacement: (content, node) => {\n        // Generate a unique ID for this SVG block\n        const blockId = 'svg_' + Math.random().toString(36).substring(2, 10);\n        \n        // Store the raw SVG for later use\n        const serializer = new XMLSerializer();\n        const svgString = serializer.serializeToString(node);\n        \n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'svg',\n            content: svgString\n          });\n        }\n        \n        // Return with special marker\n        return `\\n<div data-special-block=\"${blockId}\" class=\"svg-container\">\\n` +\n               svgString + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    // Special handling for code blocks\n    this.turndownService.addRule('codeBlock', {\n      filter: node => {\n        return node.nodeName === 'PRE' && \n               node.firstChild && \n               node.firstChild.nodeName === 'CODE';\n      },\n      replacement: (content, node) => {\n        const code = node.firstChild.textContent;\n        let language = '';\n        \n        // Try to detect language from class\n        if (node.firstChild.className) {\n          const match = node.firstChild.className.match(/language-(\\w+)/);\n          if (match) {\n            language = match[1];\n          }\n        }\n        \n        return '\\n```' + language + '\\n' + code.trim() + '\\n```\\n';\n      }\n    });\n    \n    // Improve table handling\n    this.turndownService.addRule('tableCell', {\n      filter: ['th', 'td'],\n      replacement: (content, node) => {\n        return ' ' + content.trim() + ' |';\n      }\n    });\n    \n    this.turndownService.addRule('tableRow', {\n      filter: 'tr',\n      replacement: (content, node) => {\n        let prefix = '|';\n        \n        // Handle header rows\n        if (node.parentNode.nodeName === 'THEAD') {\n          const cells = node.querySelectorAll('th, td').length;\n          const separatorRow = '\\n|' + ' --- |'.repeat(cells);\n          return prefix + content + separatorRow;\n        }\n        \n        return prefix + content + '\\n';\n      }\n    });\n    \n    this.turndownService.addRule('table', {\n      filter: 'table',\n      replacement: (content, node) => {\n        // If the table doesn't have a header row, we need to add the separator\n        if (!node.querySelector('thead') && node.querySelector('tr')) {\n          const firstRow = node.querySelector('tr');\n          const cells = firstRow.querySelectorAll('th, td').length;\n          const separator = '\\n|' + ' --- |'.repeat(cells) + '\\n';\n          \n          // Insert separator after the first row\n          const rows = content.split('\\n');\n          if (rows.length > 0) {\n            return rows[0] + separator + rows.slice(1).join('\\n') + '\\n\\n';\n          }\n        }\n        \n        return content + '\\n\\n';\n      }\n    });\n  }\n  \n  /**\n   * Get a simplified hash code of a string for caching\n   * \n   * @private\n   * @param {string} str - The string to hash\n   * @returns {string} A hash representation of the string\n   */\n  _getStringHash(str) {\n    // Simple and fast hash function for strings\n    // This is not a cryptographic hash, just for caching purposes\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash.toString(36); // Convert to base36 for shorter string\n  }\n  \n  /**\n   * Convert HTML to Markdown with caching for performance\n   * \n   * @param {string} html - The HTML content to convert\n   * @param {Object} options - Additional options\n   * @param {string} options.originalSource - The original source if available\n   * @returns {string} The converted Markdown content\n   */\n  convert(html, options = {}) {\n    // Clear special blocks map for this conversion\n    this._specialBlocks.clear();\n    \n    // Use a hash of the HTML as the cache key\n    const cacheKey = this._getStringHash(html);\n    \n    // Check if we have a cached version\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey);\n    }\n    \n    // Convert the HTML to Markdown\n    let markdown = this.turndownService.turndown(html);\n    \n    // Post-process the markdown to restore special blocks\n    markdown = this._postProcessMarkdown(markdown, options.originalSource);\n    \n    // Cache the result\n    this.cache.set(cacheKey, markdown);\n    \n    // Keep the cache size under control\n    if (this.cache.size > this.cacheSize) {\n      // Remove the oldest entry\n      const firstKey = this.cache.keys().next().value;\n      this.cache.delete(firstKey);\n    }\n    \n    return markdown;\n  }\n  \n  /**\n   * Post-process markdown to restore special blocks and apply additional formatting\n   * \n   * @private\n   * @param {string} markdown - The converted markdown \n   * @param {string} originalSource - The original markdown source if available\n   * @returns {string} - The processed markdown\n   */\n  _postProcessMarkdown(markdown, originalSource) {\n    // First pass: Convert the special blocks markers back to proper markdown\n    \n    // Convert mermaid blocks\n    const mermaidBlockRegex = /<div data-special-block=\"mermaid_[^\"]*\" class=\"mermaid\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(mermaidBlockRegex, (match, content) => {\n      return `\\n\\`\\`\\`mermaid\\n${content.trim()}\\n\\`\\`\\`\\n`;\n    });\n    \n    // Convert SVG blocks\n    const svgBlockRegex = /<div data-special-block=\"svg_[^\"]*\" class=\"svg-container\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(svgBlockRegex, (match, content) => {\n      // Try to find a closing SVG tag\n      const svgMatch = content.match(/<svg[\\s\\S]*?<\\/svg>/);\n      if (svgMatch) {\n        return `\\n\\`\\`\\`svg\\n${svgMatch[0]}\\n\\`\\`\\`\\n`;\n      }\n      return match;\n    });\n    \n    // Second pass: Restore blocks from original source if possible\n    if (originalSource) {\n      // Extract code blocks from original source\n      const codeBlockRegex = /```(\\w+)\\s*([\\s\\S]*?)```/g;\n      let match;\n      let blockIndex = 0;\n      const originalBlocks = [];\n      \n      while ((match = codeBlockRegex.exec(originalSource)) !== null) {\n        const type = match[1];\n        const content = match[2];\n        \n        if (type === 'mermaid' || type === 'svg') {\n          originalBlocks.push({\n            type,\n            content: match[0],\n            index: blockIndex++\n          });\n        }\n      }\n      \n      // Try to match original blocks with current blocks\n      // This is a simplistic approach that assumes blocks are in the same order\n      \n      let mermaidIndex = 0;\n      let svgIndex = 0;\n      \n      // Replace mermaid blocks\n      markdown = markdown.replace(/```mermaid\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const mermaidBlocks = originalBlocks.filter(b => b.type === 'mermaid');\n        if (mermaidIndex < mermaidBlocks.length) {\n          return mermaidBlocks[mermaidIndex++].content;\n        }\n        return match;\n      });\n      \n      // Replace SVG blocks\n      markdown = markdown.replace(/```svg\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const svgBlocks = originalBlocks.filter(b => b.type === 'svg');\n        if (svgIndex < svgBlocks.length) {\n          return svgBlocks[svgIndex++].content;\n        }\n        return match;\n      });\n    }\n    \n    return markdown;\n  }\n}"],"names":["HtmlToMarkdown","options","arguments","length","undefined","_classCallCheck","turndownService","TurndownService","_objectSpread","headingStyle","codeBlockStyle","emDelimiter","bulletListMarker","cache","Map","cacheSize","_specialBlocks","configureTurndownRules","_createClass","key","value","_this","addRule","filter","node","nodeName","classList","contains","replacement","content","blockId","Math","random","toString","substring","set","type","textContent","concat","serializer","XMLSerializer","svgString","serializeToString","firstChild","code","language","className","match","trim","prefix","parentNode","cells","querySelectorAll","separatorRow","repeat","querySelector","firstRow","separator","rows","split","slice","join","_getStringHash","str","hash","i","char","charCodeAt","convert","html","clear","cacheKey","has","get","markdown","turndown","_postProcessMarkdown","originalSource","size","firstKey","keys","next","mermaidBlockRegex","replace","svgBlockRegex","svgMatch","codeBlockRegex","blockIndex","originalBlocks","exec","push","index","mermaidIndex","svgIndex","mermaidBlocks","b","svgBlocks"],"mappings":"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"}