{"version":3,"file":"squibview.esm.js","sources":["../src/squibview.js"],"sourcesContent":["/* SquibView a live md/html/etc Editor/renderer with copy support\n supports markdown, html, and split view\n supports copying of formatted html and markdown\n supports copying of images as data urls\n supports copying of svg as png\n supports copying of tables as formatted tables\n supports copying of code blocks as formatted tables\n by deftio (c) 2024\n*/\n\nclass SquibView {\n    static defaultOptions = {\n      initialContent: '',\n      showControls: true,\n      titleShow: false,        \n      titleContent: '',\n      initialView: 'split',\n      baseClass: 'squibview'\n    };\n\n    static version = {\n      version: \"0.0.25\",\n      url : \"https://github.com/deftio/squibview\"\n    };\n\n    constructor(element, options = {}) {\n      this.options = { ...SquibView.defaultOptions, ...options };\n      this.container = typeof element === 'string' ? document.querySelector(element) : element;\n\n      if (!this.container) {\n        throw new Error('Container element not found');\n      }\n\n      this.initializeLibraries();\n      this.createStructure();\n      this.initializeEventHandlers();\n      this.setContent(this.options.initialContent);\n      this.setView(this.options.initialView);\n      this.initializeResizeObserver();\n    }\n\n    initializeLibraries() {\n      mermaid.initialize({\n        startOnLoad: false,\n        securityLevel: 'loose',\n        theme: 'default',\n        errorCallback: function (error) {\n          console.warn(\"Mermaid error:\", error);\n          return \"<div class='mermaid-error'></div>\"; // Replace with custom message\n        }\n      });\n      mermaid.init(undefined, \".mermaid\"); \n      this.md = window.markdownit({\n        html: true,\n        linkify: true,\n        typographer: true,\n        highlight: (str, lang) => {\n          if (lang && hljs.getLanguage(lang)) {\n            try {\n              return hljs.highlight(str, { language: lang }).value;\n            } catch (__) { }\n          }\n          return '';\n        }\n      });\n\n      const defaultFence = this.md.renderer.rules.fence ||\n        ((tokens, idx, options, env, self) => self.renderToken(tokens, idx, options));\n\n      this.md.renderer.rules.fence = (tokens, idx, options, env, self) => {\n        const token = tokens[idx];\n        const info = token.info.trim();\n        if (info === 'mermaid') {\n          return '<div class=\"mermaid\">' + token.content + '</div>';\n        }\n        if (info === 'svg') {\n          return token.content;\n        }\n        return defaultFence(tokens, idx, options, env, self);\n      };\n    }\n\n    createStructure() {\n      this.container.classList.add(this.options.baseClass);\n\n      this.container.innerHTML = `\n        <div class=\"${this.options.baseClass}-title\" ${!this.options.titleShow ? 'style=\"display:none\"' : ''}>\n          ${this.options.titleContent}\n        </div>\n        <div class=\"${this.options.baseClass}-controls\" ${!this.options.showControls ? 'style=\"display:none\"' : ''}>\n          <button data-view=\"md\">Markdown</button>\n          <button data-view=\"html\">Rendered</button>\n          <button data-view=\"split\">Split</button>\n          <button class=\"copy-md-button\">Copy MD</button>\n          <button class=\"copy-html-button\">Copy Formatted</button>\n        </div>\n        <div class=\"${this.options.baseClass}-editor\">\n          <textarea class=\"${this.options.baseClass}-input\"></textarea>\n          <div class=\"${this.options.baseClass}-output\"></div>\n        </div>\n      `;\n\n      this.title = this.container.querySelector(`.${this.options.baseClass}-title`);\n      this.controls = this.container.querySelector(`.${this.options.baseClass}-controls`);\n      this.editor = this.container.querySelector(`.${this.options.baseClass}-editor`);\n      this.input = this.container.querySelector(`.${this.options.baseClass}-input`);\n      this.output = this.container.querySelector(`.${this.options.baseClass}-output`);\n    }\n\n    initializeEventHandlers() {\n      this.controls.querySelectorAll('button[data-view]').forEach(button => {\n        button.addEventListener('click', () => this.setView(button.dataset.view));\n      });\n\n      this.controls.querySelector('.copy-md-button').addEventListener('click', () => this.copyMarkdown());\n      this.controls.querySelector('.copy-html-button').addEventListener('click', () => this.copyHTML());\n\n      this.input.addEventListener('input', () => {\n        // use input type to call the renderMarkdown or renderHTML function\n        if (this.inputContentType === \"html\") {\n          this.writeHTMLContent(this.input.value)\n        } else {\n          this.renderMarkdown()\n        }\n      });\n    }\n\n    initializeResizeObserver() {\n      const resizeObserver = new ResizeObserver(entries => {\n        for (let entry of entries) {\n          if (entry.target === this.container) {\n            this.adjustLayout();\n          }\n        }\n      });\n      resizeObserver.observe(this.container);\n    }\n\n    adjustLayout() {\n      const containerRect = this.container.getBoundingClientRect();\n      const titleHeight = this.title.offsetHeight;\n      const controlsHeight = this.controls.offsetHeight;\n\n      const availableHeight = containerRect.height - titleHeight - controlsHeight;\n      const availableWidth = containerRect.width;\n      this.editor.style.height = `${availableHeight}px`;\n      this.editor.style.width = `${availableWidth}px`;\n\n      if (this.currentView === 'split') {\n        this.input.style.width = '50%';\n        this.output.style.width = '50%';\n      } else if (this.currentView === 'md') {\n        this.input.style.width = '100%';\n      } else if (this.currentView === 'html') {\n        this.output.style.width = '100%';\n      }\n    }\n\n    setContent(content, contentType = \"md\") {\n      this.input.value = content;\n      this.inputContentType = contentType;\n      if (contentType === \"md\") {\n        this.renderMarkdown();\n      } else if (contentType === \"html\") {\n        this.writeHTMLContent(content);\n      }\n    }\n\n    getContent() {\n      return this.input.value;\n    }\n\n    cleanMarkdown(md) {\n      return md.replace(/^```markdown\\s+/, '').replace(/```$/, '');\n    }\n\n    async renderMarkdown() {\n      const html = this.md.render(this.input.value);\n      this.output.innerHTML = \"<div contenteditable='true'>\" + html + \"</div>\";\n\n      // Convert all images to data URLs immediately after rendering\n      const contentDiv = this.output.querySelector('div[contenteditable=\"true\"]');\n      const images = contentDiv.querySelectorAll('img');\n\n      // render images to data urls\n\n      for (const img of images) {\n        try {\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d');\n\n          // Create new image and wait for it to load\n          const tempImg = new Image();\n          tempImg.crossOrigin = 'anonymous';\n\n          await new Promise((resolve, reject) => {\n            tempImg.onload = () => {\n              // Set canvas size to match image\n              canvas.width = tempImg.naturalWidth;\n              canvas.height = tempImg.naturalHeight;\n\n              // Draw image to canvas\n              ctx.drawImage(tempImg, 0, 0);\n\n              // Convert to data URL\n              const dataUrl = canvas.toDataURL('image/png', 1.0);\n\n              // Update original image\n              img.src = dataUrl;\n              resolve();\n            };\n            tempImg.onerror = reject;\n            tempImg.src = img.src;\n          });\n        } catch (error) {\n          console.error('Failed to convert image:', error);\n        }\n\n      }\n\n      // end of images to data urls\n\n      // Initialize mermaid diagrams after all images are processed\n      mermaid.init(undefined, this.output.querySelectorAll('.mermaid'));\n    } // end of renderMarkdown\n\n    markdownRemoveAllHR  () {\n      if (this.inputContentType === \"md\") {\n        const markdown = this.getMarkdownSource();\n        const newMarkdown = markdown.replace(/---/g, '');\n        this.setContent(newMarkdown);\n      }\n    }\n\n    setView(view) {\n      this.currentView = view;\n\n      this.controls.querySelectorAll('button[data-view]').forEach(btn => {\n        btn.classList.toggle('active', btn.dataset.view === view);\n      });\n\n      const copyMDButton = this.controls.querySelector('.copy-md-button');\n      const copyHTMLButton = this.controls.querySelector('.copy-html-button');\n\n      if (view === 'md') {\n        this.input.classList.remove('squibview-hidden');\n        this.output.classList.add('squibview-hidden');\n        this.input.style.width = '100%';\n        copyMDButton.classList.remove('squibview-hidden');\n        copyHTMLButton.classList.add('squibview-hidden');\n      } else if (view === 'html') {\n        this.input.classList.add('squibview-hidden');\n        this.output.classList.remove('squibview-hidden');\n        this.output.style.width = '100%';\n        copyMDButton.classList.add('squibview-hidden');\n        copyHTMLButton.classList.remove('squibview-hidden');\n      } else {\n        this.input.classList.remove('squibview-hidden');\n        this.output.classList.remove('squibview-hidden');\n        this.input.style.width = '50%';\n        this.output.style.width = '50%';\n        copyMDButton.classList.remove('squibview-hidden');\n        copyHTMLButton.classList.remove('squibview-hidden');\n      }\n\n      this.adjustLayout();\n    }\n\n    async copyContent() {\n      const copyButton = this.controls.querySelector('.copy-button');\n      copyButton.textContent = 'Copying...';\n\n      try {\n        const contentDiv = this.output.querySelector('div[contenteditable=\"true\"]');\n        if (!contentDiv) {\n          throw new Error('Content div not found');\n        }\n\n        const clone = contentDiv.cloneNode(true);\n\n        clone.querySelectorAll('pre code').forEach(block => {\n          const formattedCode = block.innerHTML;\n\n          const table = document.createElement('table');\n          table.style.width = '100%';\n          table.style.borderCollapse = 'collapse';\n          table.style.border = 'none';\n\n          const tr = document.createElement('tr');\n          const td = document.createElement('td');\n          td.style.backgroundColor = '#f7f7f7';\n          td.style.padding = '12px';\n          td.style.fontFamily = 'Consolas, Monaco, \"Courier New\", monospace';\n          td.style.whiteSpace = 'pre';\n          td.style.border = 'none';\n\n          td.innerHTML = formattedCode.trim();\n\n          tr.appendChild(td);\n          table.appendChild(tr);\n          block.parentNode.replaceWith(table);\n        });\n\n        const svgElements = clone.querySelectorAll('svg');\n        for (const svg of svgElements) {\n          try {\n            const pngBlob = await this.svgToPng(svg);\n            const dataUrl = await new Promise(resolve => {\n              const reader = new FileReader();\n              reader.onloadend = () => resolve(reader.result);\n              reader.readAsDataURL(pngBlob);\n            });\n\n            const img = document.createElement('img');\n            img.src = dataUrl;\n            img.width = svg.clientWidth || svg.viewBox.baseVal.width || 100;\n            img.height = svg.clientHeight || svg.viewBox.baseVal.height || 100;\n            img.setAttribute('v:shapes', 'image' + Math.random().toString(36).substr(2, 9));\n            img.style.width = img.width + 'px';\n            img.style.height = img.height + 'px';\n            img.alt = \"Converted diagram\";\n            svg.parentNode.replaceChild(img, svg);\n          } catch (error) {\n            console.error('Failed to convert SVG:', error);\n          }\n        }\n\n\n        // Convert all images to data URLs\n        const imgElements = clone.querySelectorAll('img');\n        await Promise.all(imgElements.map(async img => {\n          console.log('Converting image:', img.src);\n\n          // Create canvas\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d');\n\n          // Create new image and wait for it to load completely\n          const tempImg = new Image();\n          tempImg.crossOrigin = 'anonymous';\n\n          try {\n            await new Promise((resolve, reject) => {\n              tempImg.onload = resolve;\n              tempImg.onerror = reject;\n              tempImg.src = img.src;\n            });\n\n            // Set dimensions\n            canvas.width = tempImg.offsetWidth || img.offsetWidth || 200;\n            canvas.height = tempImg.offsetHeight || img.offsetHeight || 200;\n\n            // Draw and convert\n            ctx.drawImage(tempImg, 0, 0);\n            const dataUrl = canvas.toDataURL('image/png', 1.0);\n\n            // Create and wait for new image with data URL\n            const newImg = new Image();\n            await new Promise((resolve, reject) => {\n              newImg.onload = () => {\n                newImg.alt = img.alt || 'Converted image';\n                newImg.width = canvas.width;\n                newImg.height = canvas.height;\n                newImg.style.cssText = img.style.cssText;\n                // Force image to be treated as embedded\n                newImg.setAttribute('data-embedded', 'true');\n                // Replace the old image\n                img.parentNode.replaceChild(newImg, img);\n                console.log('Successfully converted image to data URL');\n                resolve();\n              };\n              newImg.onerror = reject;\n              newImg.src = dataUrl;\n            });\n          } catch (error) {\n            console.error('Error converting image:', error, img.src);\n            // Don't rethrow - we want to continue with other images\n          }\n        }));\n\n\n        const clipData = new ClipboardItem({\n          'text/html': new Blob([`\n            <html xmlns:v=\"urn:schemas-microsoft-com:vml\"\n                  xmlns:o=\"urn:schemas-microsoft-com:office:office\"\n                  xmlns:w=\"urn:schemas-microsoft-com:office:word\">\n              <head>\n                <meta charset=\"utf-8\">\n                <style>\n                  table { border-collapse: collapse; width: 100%; margin-bottom: 1em; }\n                  th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }\n                  th { background-color: #f0f0f0; font-weight: bold; }\n\n                  /* Code block styling */\n                  .hljs { display: block; overflow-x: auto; padding: 1em; }\n                  .hljs-keyword { color: #0033B3; }\n                  .hljs-string { color: #067D17; }\n                  .hljs-comment { color: #8C8C8C; }\n                  .hljs-function { color: #00627A; }\n                  .hljs-number { color: #1750EB; }\n                  .hljs-operator { color: #687687; }\n                  .hljs-punctuation { color: #000000; }\n\n                  /* Word-specific image handling */\n                  img { display: block; max-width: none; }\n                </style>\n              </head>\n              <body>\n                ${clone.innerHTML}\n              </body>\n            </html>\n          `], { type: 'text/html' }),\n          'text/plain': new Blob([clone.innerText], { type: 'text/plain' })\n        });\n\n        await navigator.clipboard.write([clipData]);\n        copyButton.textContent = 'Copied!';\n      } catch (err) {\n        console.error('Copy failed:', err);\n        copyButton.textContent = 'Copy failed';\n      }\n\n      setTimeout(() => {\n        copyButton.textContent = 'Copy';\n      }, 2000);\n    }\n\n    svgToPng(svgElement) {\n      return new Promise((resolve, reject) => {\n        const svgString = new XMLSerializer().serializeToString(svgElement);\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        const img = new Image();\n\n        const scale = 2;\n        const svgWidth = svgElement.clientWidth || svgElement.viewBox.baseVal.width || 100;\n        const svgHeight = svgElement.clientHeight || svgElement.viewBox.baseVal.height || 100;\n\n        canvas.width = svgWidth * scale;\n        canvas.height = svgHeight * scale;\n        ctx.scale(scale, scale);\n\n        img.onload = () => {\n          try {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.drawImage(img, 0, 0, svgWidth, svgHeight);\n            canvas.toBlob(blob => {\n              resolve(blob);\n            }, 'image/png', 1.0);\n          } catch (err) {\n            reject(err);\n          }\n        };\n\n        img.onerror = reject;\n        const svgDataUrl = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svgString)}`;\n        img.src = svgDataUrl;\n      });\n    }\n\n    controlsShow(show) {\n      this.controls.style.display = show ? '' : 'none';\n      this.options.showControls = show;\n      this.adjustLayout();\n    }\n\n    titleShow(show) {\n      this.title.style.display = show ? '' : 'none';\n      this.options.titleShow = show;\n      this.adjustLayout();\n    }\n\n    titleSetContent(content) {\n      this.title.innerHTML = content;\n      this.options.titleContent = content;\n    }\n\n    titleGetContent() {\n      return this.title.innerHTML;\n    }\n\n    getMarkdownSource() {\n      return this.input.value;\n    }\n\n    getHTMLSource() {\n      return this.output.querySelector('div[contenteditable=\"true\"]').innerHTML;\n    }\n\n    // Standalone function to toggle between Markdown preview and split view\n    toggleView() {\n      const editor = window.editor;\n      if (editor.currentView === 'md') {\n        editor.setView('split');\n      } else if (editor.currentView === 'split') {\n        editor.setView('html');\n      } else\n        editor.setView('md')\n\n      console.log(editor.currentView)\n    }\n\n    /**\n     * Creates an iframe that fills the entire parent element and injects provided HTML content.\n     * @param {HTMLElement} parentElement - The parent element to contain the iframe.\n     * @param {string} htmlContent - The HTML content to inject into the iframe.\n     */\n    insertContentInIframe(parentElement, htmlContent) {\n      // Create an iframe element\n      const iframe = document.createElement('iframe');\n\n      // Style the iframe to fill the parent completely\n      iframe.style.width = '100%';\n      iframe.style.height = '100%';\n      iframe.style.border = 'none';\n      iframe.style.display = 'block';\n\n      //iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin');\n      // Append the iframe to the parent element\n      parentElement.innerHTML = '';\n      parentElement.appendChild(iframe);\n\n      // Access the iframe's document and write the HTML content into it\n      const iframeDoc = iframe.contentWindow.document;\n      iframeDoc.open();\n      iframeDoc.write(htmlContent);\n      iframeDoc.close();\n      this.output_iframe = iframe\n      this.output_ifraome_content = htmlContent;\n    }\n    // this function takes input as html and renders it in an iframe in the output div\n    // it write to the outputDiv that is a member of this object\n    writeHTMLContent(src) {\n      const htmlContent = src;\n      const outputDiv = this.output;\n      this.insertContentInIframe(outputDiv, htmlContent);\n    }\n\n    async copyMarkdown() {\n      const copyButton = this.controls.querySelector('.copy-md-button');\n      copyButton.textContent = 'Copying...';\n\n      try {\n        const markdownText = this.getMarkdownSource();\n\n        try {\n          await navigator.clipboard.writeText(markdownText);\n        } catch (modernErr) {\n          const textarea = document.createElement('textarea');\n          textarea.value = markdownText;\n          textarea.style.position = 'fixed';\n          textarea.style.opacity = '0';\n          document.body.appendChild(textarea);\n          textarea.select();\n\n          const successful = document.execCommand('copy');\n          document.body.removeChild(textarea);\n\n          if (!successful) throw new Error('Fallback copy failed');\n        }\n\n        copyButton.textContent = 'Copied!';\n      } catch (err) {\n        console.error('Copy Markdown failed:', err);\n        copyButton.textContent = 'Copy failed';\n      }\n\n      setTimeout(() => {\n        copyButton.textContent = 'Copy MD';\n      }, 2000);\n    }\n\n    async copyHTML() {\n      const copyButton = this.controls.querySelector('.copy-html-button');\n      copyButton.textContent = 'Copying...';\n\n      try {\n        const contentDiv = this.output.querySelector('div[contenteditable=\"true\"]');\n        if (!contentDiv) {\n          throw new Error('Content div not found');\n        }\n\n        const clone = contentDiv.cloneNode(true);\n\n        // Process code blocks\n        clone.querySelectorAll('pre code').forEach(block => {\n          const formattedCode = block.innerHTML;\n\n          const table = document.createElement('table');\n          table.style.width = '100%';\n          table.style.borderCollapse = 'collapse';\n          table.style.border = 'none';\n\n          const tr = document.createElement('tr');\n          const td = document.createElement('td');\n          td.style.backgroundColor = '#f7f7f7';\n          td.style.padding = '12px';\n          td.style.fontFamily = 'Consolas, Monaco, \"Courier New\", monospace';\n          td.style.whiteSpace = 'pre';\n          td.style.border = 'none';\n\n          td.innerHTML = formattedCode.trim();\n\n          tr.appendChild(td);\n          table.appendChild(tr);\n          block.parentNode.replaceWith(table);\n        });\n\n        // Convert SVG elements to PNG\n        const svgElements = clone.querySelectorAll('svg');\n        for (const svg of svgElements) {\n          try {\n            const pngBlob = await this.svgToPng(svg);\n            const dataUrl = await new Promise(resolve => {\n              const reader = new FileReader();\n              reader.onloadend = () => resolve(reader.result);\n              reader.readAsDataURL(pngBlob);\n            });\n\n            const img = document.createElement('img');\n            img.src = dataUrl;\n            img.width = svg.clientWidth || svg.viewBox.baseVal.width || 100;\n            img.height = svg.clientHeight || svg.viewBox.baseVal.height || 100;\n            img.setAttribute('v:shapes', 'image' + Math.random().toString(36).substr(2, 9));\n            img.style.width = img.width + 'px';\n            img.style.height = img.height + 'px';\n            img.alt = \"Converted diagram\";\n            svg.parentNode.replaceChild(img, svg);\n          } catch (error) {\n            console.error('Failed to convert SVG:', error);\n          }\n        }\n\n        const htmlContent = `\n          <html xmlns:v=\"urn:schemas-microsoft-com:vml\"\n                xmlns:o=\"urn:schemas-microsoft-com:office:office\"\n                xmlns:w=\"urn:schemas-microsoft-com:office:word\">\n            <head>\n              <meta charset=\"utf-8\">\n              <style>\n                table { border-collapse: collapse; width: 100%; margin-bottom: 1em; }\n                th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }\n                th { background-color: #f0f0f0; font-weight: bold; }\n\n                /* Code block styling */\n                .hljs { display: block; overflow-x: auto; padding: 1em; }\n                .hljs-keyword { color: #0033B3; }\n                .hljs-string { color: #067D17; }\n                .hljs-comment { color: #8C8C8C; }\n                .hljs-function { color: #00627A; }\n                .hljs-number { color: #1750EB; }\n                .hljs-operator { color: #687687; }\n                .hljs-punctuation { color: #000000; }\n\n                /* Word-specific image handling */\n                img { display: block; max-width: none; }\n              </style>\n            </head>\n            <body>\n              ${clone.innerHTML}\n            </body>\n          </html>`;\n\n        const platform = this.getPlatform();\n\n        if (platform === 'macos') {\n          // macOS approach (previously working version)\n          try {\n            await navigator.clipboard.write([\n              new ClipboardItem({\n                'text/html': new Blob([htmlContent], { type: 'text/html' }),\n                'text/plain': new Blob([clone.innerText], { type: 'text/plain' })\n              })\n            ]);\n          } catch (modernErr) {\n            // Safari fallback\n            if (!this.copyToClipboard(htmlContent)) {\n              throw new Error('Fallback copy failed');\n            }\n          }\n        } else {\n          // Windows/Linux approach\n          const tempDiv = document.createElement('div');\n          tempDiv.style.position = 'fixed';\n          tempDiv.style.left = '-9999px';\n          tempDiv.style.top = '0';\n          tempDiv.innerHTML = htmlContent;\n          document.body.appendChild(tempDiv);\n\n          try {\n            await navigator.clipboard.write([\n              new ClipboardItem({\n                'text/html': new Blob([htmlContent], { type: 'text/html' }),\n                'text/plain': new Blob([clone.innerText], { type: 'text/plain' })\n              })\n            ]);\n          } catch (modernErr) {\n            const selection = window.getSelection();\n            const range = document.createRange();\n            range.selectNodeContents(tempDiv);\n            selection.removeAllRanges();\n            selection.addRange(range);\n\n            const successful = document.execCommand('copy');\n            if (!successful) {\n              throw new Error('Fallback copy failed');\n            }\n          } finally {\n            if (tempDiv && tempDiv.parentNode) {\n              document.body.removeChild(tempDiv);\n            }\n          }\n        }\n\n        copyButton.textContent = 'Copied!';\n      } catch (err) {\n        console.error('Copy HTML failed:', err);\n        copyButton.textContent = 'Copy failed';\n      }\n\n      setTimeout(() => {\n        copyButton.textContent = 'Copy Formatted';\n      }, 2000);\n    }\n\n    getVersion() {\n      return GraphicalMD.version;\n    }\n\n    copyToClipboard(string) {\n      let textarea;\n      let result;\n\n      try {\n        textarea = document.createElement('textarea');\n        textarea.setAttribute('readonly', true);\n        textarea.setAttribute('contenteditable', true);\n        textarea.style.position = 'fixed';\n        textarea.style.left = '0';\n        textarea.style.top = '0';\n        textarea.style.opacity = '0';\n        textarea.value = string;\n\n        document.body.appendChild(textarea);\n\n        textarea.focus();\n        textarea.select();\n\n        const range = document.createRange();\n        range.selectNodeContents(textarea);\n\n        const sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(range);\n\n        textarea.setSelectionRange(0, textarea.value.length);\n        result = document.execCommand('copy');\n      } catch (err) {\n        console.error(err);\n        result = null;\n      } finally {\n        if (textarea && textarea.parentNode) {\n          document.body.removeChild(textarea);\n        }\n      }\n\n      // manual copy fallback using prompt\n      if (!result) {\n        const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n        const copyHotkey = isMac ? '⌘C' : 'CTRL+C';\n        result = prompt(`Press ${copyHotkey}`, string);\n        if (!result) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    getPlatform() {\n      const platform = navigator.platform.toLowerCase();\n      const userAgent = navigator.userAgent.toLowerCase();\n\n      if (platform.includes('mac') || userAgent.includes('mac')) {\n        return 'macos';\n      } else if (userAgent.includes('windows')) {\n        return 'windows';\n      } else if (userAgent.includes('linux')) {\n        return 'linux';\n      }\n      return 'unknown';\n    }\n\n    // Make a complete HTML page from a div (or any html snippet) with optional editability\n    makeHTMLPageFromDiv(inputDivHTML, editable = false) {\n      let editableAttr = editable ? 'contenteditable=\"true\"' : '';\n      let s =\n        `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Markdown Viewer with Graphics Support</title>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n  <xscripx src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></xscripx>\n  <xscripx src=\"https://unpkg.com/mermaid/dist/mermaid.min.js\"></xscripx>\n  <style>\n      body {\n          font-family: Arial, sans-serif;\n          /* margin: 20px; */\n          box-sizing: border-box;\n          padding: 20px;\n      }\n      .squibview-output {\n          width: 50%;\n          margin: auto;\n      }\n      pre {\n          background-color: #f4f4f4;\n          padding: 10px;\n          border-radius: 5px;\n          overflow-x: auto;\n      }\n      table {\n          width: 100%;\n          border-collapse: collapse;\n          margin: 20px 0;\n      }\n      table, th, td {\n          border: 1px solid black;\n      }\n      th, td {\n          padding: 8px;\n          text-align: left;\n      }\n  </style>\n</head>\n<body ${editableAttr}>\n  ${inputDivHTML}\n</body>\n</html>`;\n      // now we need to remove the temp-script tag with the script in it.\n      // we do this with a regex search/replace\n      s = s.replaceAll(\"xscripx\", \"script\");\n      console.log(editableAttr);\n      return s;\n    }\n\n    makeRevealJSFullPage(markdown, title = \"Reveal.js Markdown Presentation\") {\n      return `<!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>${title}</title>\n      <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/reveal.js/dist/reveal.css\">\n      <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/reveal.js/dist/theme/black.css\">\n      <script src=\"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\"></script>\n  </head>\n  <body>\n      <div class=\"reveal\">\n          <div class=\"slides\">\n              ${markdown.split('---').map(slide => `<section data-markdown><script type=\"text/template\">${slide.trim()}</script></section>`).join('\\n')}\n          </div>\n      </div>\n      <script src=\"https://cdn.jsdelivr.net/npm/reveal.js/dist/reveal.js\"></script>\n      <script src=\"https://cdn.jsdelivr.net/npm/reveal.js/plugin/markdown/markdown.js\"></script>\n      <script>\n          Reveal.initialize({\n              plugins: [ RevealMarkdown ]\n          });\n          \n          // Ensure Mermaid diagrams initialize correctly\n          document.addEventListener('DOMContentLoaded', () => {\n              mermaid.initialize({ startOnLoad: true , securityLevel: 'loose', theme: 'dark' });\n              document.querySelectorAll('.mermaid').forEach(el => {\n                  el.innerHTML = el.textContent;\n                  mermaid.init(undefined, el);\n              });\n          });\n      </script>\n  </body>\n  </html>`;\n  }\n  \n\n\n}// end of class SquibView\n\nexport default SquibView;\n"],"names":["SquibView","element","options","arguments","length","undefined","_classCallCheck","_objectSpread","defaultOptions","container","document","querySelector","Error","initializeLibraries","createStructure","initializeEventHandlers","setContent","initialContent","setView","initialView","initializeResizeObserver","_createClass","key","value","mermaid","initialize","startOnLoad","securityLevel","theme","errorCallback","error","console","warn","init","md","window","markdownit","html","linkify","typographer","highlight","str","lang","hljs","getLanguage","language","__","defaultFence","renderer","rules","fence","tokens","idx","env","self","renderToken","token","info","trim","content","classList","add","baseClass","innerHTML","concat","titleShow","titleContent","showControls","title","controls","editor","input","output","_this","querySelectorAll","forEach","button","addEventListener","dataset","view","copyMarkdown","copyHTML","inputContentType","writeHTMLContent","renderMarkdown","_this2","resizeObserver","ResizeObserver","entries","_iterator","_createForOfIteratorHelper","_step","s","n","done","entry","target","adjustLayout","err","e","f","observe","containerRect","getBoundingClientRect","titleHeight","offsetHeight","controlsHeight","availableHeight","height","availableWidth","width","style","currentView","contentType","getContent","cleanMarkdown","replace","_renderMarkdown","_asyncToGenerator","_regeneratorRuntime","mark","_callee","contentDiv","images","_iterator2","_step2","_loop","wrap","_callee$","_context2","prev","next","render","img","canvas","ctx","tempImg","_loop$","_context","createElement","getContext","Image","crossOrigin","Promise","resolve","reject","onload","naturalWidth","naturalHeight","drawImage","dataUrl","toDataURL","src","onerror","t0","stop","delegateYield","t1","finish","apply","markdownRemoveAllHR","markdown","getMarkdownSource","newMarkdown","btn","toggle","copyMDButton","copyHTMLButton","remove","_copyContent","_callee3","_this3","copyButton","clone","svgElements","_iterator3","_step3","_loop2","imgElements","clipData","_callee3$","_context5","textContent","cloneNode","block","formattedCode","table","borderCollapse","border","tr","td","backgroundColor","padding","fontFamily","whiteSpace","appendChild","parentNode","replaceWith","svg","pngBlob","_loop2$","_context4","svgToPng","sent","reader","FileReader","onloadend","result","readAsDataURL","clientWidth","viewBox","baseVal","clientHeight","setAttribute","Math","random","toString","substr","alt","replaceChild","all","map","_ref","_callee2","newImg","_callee2$","_context3","log","offsetWidth","cssText","_x","ClipboardItem","Blob","type","innerText","navigator","clipboard","write","t2","setTimeout","copyContent","svgElement","svgString","XMLSerializer","serializeToString","scale","svgWidth","svgHeight","clearRect","toBlob","blob","svgDataUrl","encodeURIComponent","controlsShow","show","display","titleSetContent","titleGetContent","getHTMLSource","toggleView","insertContentInIframe","parentElement","htmlContent","iframe","iframeDoc","contentWindow","open","close","output_iframe","output_ifraome_content","outputDiv","_copyMarkdown","_callee4","markdownText","textarea","successful","_callee4$","_context6","writeText","position","opacity","body","select","execCommand","removeChild","_copyHTML","_callee5","_this4","_iterator4","_step4","_loop3","platform","tempDiv","selection","range","_callee5$","_context8","_loop3$","_context7","getPlatform","copyToClipboard","left","top","t3","getSelection","createRange","selectNodeContents","removeAllRanges","addRange","t4","getVersion","GraphicalMD","version","string","focus","sel","setSelectionRange","isMac","toUpperCase","indexOf","copyHotkey","prompt","toLowerCase","userAgent","includes","makeHTMLPageFromDiv","inputDivHTML","editable","editableAttr","replaceAll","makeRevealJSFullPage","split","slide","join","_defineProperty","url"],"mappings":"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"}