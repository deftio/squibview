{"version":3,"file":"squibview.esm.js","sources":["../src/squibview.js"],"sourcesContent":["/* SquibView a live md/html/etc Editor/renderer with copy support\n supports markdown, html, and split view\n supports copying of formatted html and markdown\n supports copying of images as data urls\n supports copying of svg as png\n supports copying of tables as formatted tables\n supports copying of code blocks as formatted tables\n by deftio (c) 2024\n*/\n\nclass SquibView {\n  static defaultOptions = {\n    initialContent: '',\n    inputContentType: 'md', // 'md', 'html', 'reveal', 'csv' or 'tsv'\n    showControls: true,\n    titleShow: false,\n    titleContent: '',\n    initialView: 'split',\n    baseClass: 'squibview',\n    show_md_buttons: true\n  };\n\n  \n  static version = {\n    version: \"0.0.28\",\n    url: \"https://github.com/deftio/squibview\"\n  };\n\n  /**\n   * Creates a new SquibView instance.\n   * \n   * @param {HTMLElement|string} element - The DOM element or selector where the editor will be mounted\n   * @param {Object} options - Configuration options for the editor\n   * @param {string} [options.initialContent=''] - Initial content to load\n   * @param {string} [options.inputContentType='md'] - Type of the initial content ('md', 'html', 'reveal', 'csv', 'tsv')\n   * @param {boolean} [options.showControls=true] - Whether to show the control buttons\n   * @param {boolean} [options.titleShow=false] - Whether to show the title section\n   * @param {string} [options.titleContent=''] - Content for the title section\n   * @param {string} [options.initialView='split'] - Initial view mode ('src', 'html', 'split')\n   * @param {string} [options.baseClass='squibview'] - Base CSS class for styling\n   * @param {boolean} [options.show_md_buttons=true] - Whether to show markdown-specific buttons\n   * @throws {Error} Throws if the container element is not found\n   */\n  constructor(element, options = {}) {\n    this.options = { ...SquibView.defaultOptions, ...options };\n\n    this.options.show_md_buttons = this.options.show_md_buttons && this.options.inputContentType === 'md';\n    \n    this.container = typeof element === 'string' ? document.querySelector(element) : element;\n\n    if (!this.container) {\n      throw new Error('Container element not found');\n    }\n\n    // Initialize undo/redo buffer we should also have a way to clear it or access an abitrary version of it\n    this.revisions = {buffer : [], index : 0};\n  \n    // iniit all the libs and \n    this.initializeLibraries();\n    this.createStructure();\n    this.initializeEventHandlers();\n    this.initializeResizeObserver();  // resize container if needed\n\n    // set content\n    if (this.options.initialContent)\n      this.setContent(this.options.initialContent, this.options.inputContentType);\n    this.setView(this.options.initialView);  // src / rendered / split\n    \n  }\n\n  /**\n   * Initializes the required libraries for rendering content.\n   * Sets up Mermaid for diagrams and markdown-it for Markdown processing.\n   * Configures custom renderers for fenced code blocks.\n   * \n   * @private\n   */\n  initializeLibraries() {\n    mermaid.initialize({\n      startOnLoad: false,\n      securityLevel: 'loose',\n      theme: 'default',\n      errorCallback: function (error) {\n        console.warn(\"Mermaid error:\", error);\n        return \"<div class='mermaid-error'></div>\"; // Replace with custom message\n      }\n    });\n    mermaid.init(undefined, \".mermaid\");\n    this.md = window.markdownit({\n      html: true,\n      linkify: true,\n      typographer: true,\n      highlight: (str, lang) => {\n        if (lang && hljs.getLanguage(lang)) {\n          try {\n            return hljs.highlight(str, { language: lang }).value;\n          } catch (__) { }\n        }\n        return '';\n      }\n    });\n\n    const defaultFence = this.md.renderer.rules.fence ||\n      ((tokens, idx, options, env, self) => self.renderToken(tokens, idx, options));\n\n    this.md.renderer.rules.fence = (tokens, idx, options, env, self) => {\n      const token = tokens[idx];\n      const info = token.info.trim();\n      if (info === 'mermaid') {\n        return '<div class=\"mermaid\">' + token.content + '</div>';\n      }\n      if (info === 'svg') {\n        return token.content;\n      }\n      return defaultFence(tokens, idx, options, env, self);\n    };\n  }\n\n  /**\n   * Creates the DOM structure for the editor.\n   * Sets up the title bar, controls, and editor areas.\n   * \n   * @private\n   */\n  createStructure() {\n    this.container.classList.add(this.options.baseClass);\n\n    this.md_buttons= this.options.show_md_buttons ? `<button  onclick=\"editor.markdownRemoveAllHR()\">Remove HR</button>\n  <button  onclick=\"editor.markdownEditorAdjustHeadings(-1)\">H-</button>\n  <button  onclick=\"editor.markdownEditorAdjustHeadings(+1)\">H+</button>\n  <button  onclick=\"editor.revisionUndo()\">&#x21A9</button>\n  <button  onclick=\"editor.revisionRedo()\">&#x21AA</button>` : \"\";\n\n    this.container.innerHTML = `\n        <div class=\"${this.options.baseClass}-title\" ${!this.options.titleShow ? 'style=\"display:none\"' : ''}>\n          ${this.options.titleContent}\n        </div>\n        <div class=\"${this.options.baseClass}-controls\" ${!this.options.showControls ? 'style=\"display:none\"' : ''}>\n          <button data-view='src'>Source</button>\n          <button data-view=\"html\">Rendered</button>\n          <button data-view=\"split\">Split</button>\n          <button class=\"copy-src-button\">Copy Source</button>\n          <button class=\"copy-html-button\">Copy Rendered</button>\n          <span>${this.md_buttons}</span>\n        </div>\n        <div class=\"${this.options.baseClass}-editor\">\n          <textarea class=\"${this.options.baseClass}-input\"></textarea>\n          <div class=\"${this.options.baseClass}-output\"></div>\n        </div>\n      `;\n\n    this.title = this.container.querySelector(`.${this.options.baseClass}-title`);\n    this.controls = this.container.querySelector(`.${this.options.baseClass}-controls`);\n    this.editor = this.container.querySelector(`.${this.options.baseClass}-editor`);\n    this.input = this.container.querySelector(`.${this.options.baseClass}-input`);\n    this.output = this.container.querySelector(`.${this.options.baseClass}-output`);\n\n    \n  }\n\n  /**\n   * Sets up event listeners for user interactions.\n   * Handles view changes, copy functionality, and input changes.\n   * \n   * @private\n   */\n  initializeEventHandlers() {\n    this.controls.querySelectorAll('button[data-view]').forEach(button => {\n      button.addEventListener('click', () => this.setView(button.dataset.view));\n    });\n\n    this.controls.querySelector('.copy-src-button').addEventListener('click', () => this.copySource());\n    this.controls.querySelector('.copy-html-button').addEventListener('click', () => this.copyHTML());\n\n    //onchange() for input source\n    this.input.addEventListener('input', () => { this.setContent(); });\n  }\n  \n  /**\n   * Sets up a resize observer to adjust the layout when the container size changes.\n   * \n   * @private\n   */\n  initializeResizeObserver() {\n    const resizeObserver = new ResizeObserver(entries => {\n      for (let entry of entries) {\n        if (entry.target === this.container) {\n          this.adjustLayout();\n        }\n      }\n    });\n    resizeObserver.observe(this.container);\n  }\n\n  /**\n   * Adjusts the layout of the editor components based on the current view and container size.\n   * \n   * @private\n   */\n  adjustLayout() {\n    const containerRect = this.container.getBoundingClientRect();\n    const titleHeight = this.title.offsetHeight;\n    const controlsHeight = this.controls.offsetHeight;\n\n    const availableHeight = containerRect.height - titleHeight - controlsHeight;\n    const availableWidth = containerRect.width;\n    this.editor.style.height = `${availableHeight}px`;\n    this.editor.style.width = `${availableWidth}px`;\n\n    if (this.currentView === 'split') {\n      this.input.style.width = '50%';\n      this.output.style.width = '50%';\n    } else if (this.currentView === 'src') {\n      this.input.style.width = '100%';\n    } else if (this.currentView === 'html') {\n      this.output.style.width = '100%';\n    }\n  }\n\n  /**\n   * Sets the content of the editor and renders it.\n   * \n   * @param {string} [content=this.input.value] - The content to set\n   * @param {string} [contentType=this.inputContentType] - The type of content ('md', 'html', 'reveal', 'csv', 'tsv')\n   * @param {boolean} [saveRevision=true] - Whether to save this change to the revision history\n   */\n  setContent(content = this.input.value, contentType = this.inputContentType, saveRevision = true) {\n    this.input.value = content;\n    this.inputContentType = contentType;\n    // push the content to the revisions\n    if (saveRevision) {\n      this.revisions.buffer.push({ content, contentType });\n      this.revisions.index = this.revisions.buffer.length - 1;  \n      // remove all the revisions after the current index\n      this.revisions.buffer = this.revisions.buffer.slice(0, this.revisions.index + 1);\n    }\n    // render it\n    this.renderOutput();\n  }\n\n  /**\n   * Undoes the last change if possible.\n   * Decrements the revision index and restores the content from that revision.\n   */\n  revisionUndo() {\n    // if possible undo the last change else do nothing, use the revisions buffer and index\n    if (this.revisions.buffer.length > 0 && this.revisions.index > 0) {\n      this.revisions.index--;\n      const lastChange = this.revisions.buffer[this.revisions.index];\n      this.input.value = lastChange.content;\n      this.inputContentType = lastChange.contentType;\n      //console.log(this.revisions.index);\n      this.renderOutput();\n\n    }\n  }\n  \n  /**\n   * Redoes a previously undone change if possible.\n   * Increments the revision index and restores the content from that revision.\n   */\n  revisionRedo() {\n    if (this.revisions.index < this.revisions.buffer.length - 1) {\n      this.revisions.index++;\n      const lastChange = this.revisions.buffer[this.revisions.index];\n      this.input.value = lastChange.content;\n      this.inputContentType = lastChange.contentType;\n      //console.log(this.revisions.index);\n      this.renderOutput();\n    }\n  }\n  \n  /**\n   * Sets the revision to a specific index in the history.\n   * \n   * @param {number} index - The revision index to set\n   */\n  revisionSet(index) {\n    if (index >= 0 && index < this.revisions.buffer.length) {\n      this.revisions.index = index;\n      const lastChange = this.revisions.buffer[this.revisions.index];\n      this.input.value = lastChange.content;\n      this.inputContentType = lastChange.contentType;\n      //console.log(this.revisions.index);\n      this.renderOutput();\n    }\n  }\n  \n  /**\n   * Returns the total number of revisions in the history.\n   * \n   * @returns {number} The number of revisions\n   */\n  revisionNumRevsions() {\n    return this.revisions.buffer.length;\n  }\n  \n  /**\n   * Returns the current index in the revision history.\n   * \n   * @returns {number} The current revision index\n   */\n  revisionGetCurrentIndex() {\n    return this.revisions.index;\n  }\n\n  /**\n   * Gets the current content from the input textarea.\n   * \n   * @returns {string} The current content\n   */\n  getContent() {\n    return this.input.value;\n  }\n\n  /**\n   * Cleans markdown content by removing markdown code fence markers.\n   * \n   * @param {string} md - The markdown content to clean\n   * @returns {string} The cleaned markdown content\n   */\n  cleanMarkdown(md) {\n    return md.replace(/^```markdown\\s+/, '').replace(/```$/, '');\n  }\n\n  /**\n   * Renders Markdown content to HTML and processes the result.\n   * Converts images to data URLs and initializes Mermaid diagrams.\n   * \n   * @param {string} [md] - The Markdown content to render, defaults to current input value\n   * @returns {Promise<void>} A promise that resolves when rendering is complete\n   */\n  async renderMarkdown(md) {\n    const markdown = md || this.input.value;\n    const html = this.md.render(markdown);\n    this.output.innerHTML = \"<div contenteditable='true'>\" + html + \"</div>\";\n\n    // Convert all images to data URLs immediately after rendering\n    const contentDiv = this.output.querySelector('div[contenteditable=\"true\"]');\n    const images = contentDiv.querySelectorAll('img');\n\n    // render images to data urls\n    for (const img of images) {\n      try {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n\n        // Create new image and wait for it to load\n        const tempImg = new Image();\n        tempImg.crossOrigin = 'anonymous';\n\n        await new Promise((resolve, reject) => {\n          tempImg.onload = () => {\n            // Set canvas size to match image\n            canvas.width = tempImg.naturalWidth;\n            canvas.height = tempImg.naturalHeight;\n\n            // Draw image to canvas\n            ctx.drawImage(tempImg, 0, 0);\n\n            // Convert to data URL\n            const dataUrl = canvas.toDataURL('image/png', 1.0);\n\n            // Update original image\n            img.src = dataUrl;\n            resolve();\n          };\n          tempImg.onerror = reject;\n          tempImg.src = img.src;\n        });\n      } catch (error) {\n        console.error('Failed to convert image:', error);\n      }\n    }\n    // end of images to data urls\n\n    // Initialize mermaid diagrams after all images are processed\n    mermaid.init(undefined, this.output.querySelectorAll('.mermaid'));\n  } // end of renderMarkdown\n\n  /**\n   * Removes all horizontal rules (---) from the Markdown content.\n   * Only works when the current content type is Markdown.\n   */\n  markdownRemoveAllHR() {\n    if (this.inputContentType === 'md') {\n      const markdown = this.getMarkdownSource();\n      const newMarkdown = markdown.replace(/---/g, '');\n      this.setContent(newMarkdown, this.inputContentType);\n    }\n  }\n  /**\n   * Adjusts the heading levels in Markdown text by a specified offset.\n   * \n   * @param {string} markdown - The Markdown text to process\n   * @param {number} offset - The amount to adjust heading levels by (positive to increase, negative to decrease)\n   * @returns {string} - The Markdown text with adjusted heading levels\n   */\n  markdownAdjustHeadings(markdown, offset) {\n    // Early exit if offset is 0 or invalid input\n    if (offset === 0 || typeof markdown !== 'string') {\n      return markdown;\n    }\n\n    // Split the input into lines\n    const lines = markdown.split('\\n');\n\n    // Process each line\n    const modifiedLines = lines.map(line => {\n      // Regex to match heading lines: starts with 1-6 hash symbols followed by a space\n      const headingMatch = line.match(/^(#{1,6})\\s/);\n\n      if (!headingMatch) {\n        // Not a heading, return unchanged\n        return line;\n      }\n\n      const currentHeadingLevel = headingMatch[1].length;\n      // Calculate new heading level with bounds checking (min 1, max 6)\n      const newHeadingLevel = Math.min(Math.max(currentHeadingLevel + offset, 1), 6);\n\n      // Replace the heading prefix with the new level\n      return '#'.repeat(newHeadingLevel) + line.substring(currentHeadingLevel);\n    });\n\n    // Join the lines back together\n    return modifiedLines.join('\\n');\n  }\n  /**\n   * Adjusts heading levels in the current Markdown content.\n   * \n   * @param {number} offset - The amount to adjust heading levels by (positive to increase, negative to decrease)\n   */\n  markdownEditorAdjustHeadings(offset) {\n    const markdown = this.getMarkdownSource();\n    const newMarkdown = this.markdownAdjustHeadings(markdown, offset);\n    this.setContent(newMarkdown, this.inputContentType);\n  }\n\n  /**\n   * Sets the current view mode of the editor.\n   * \n   * @param {string} view - The view mode to set: 'src' (source only), 'html' (rendered only), or 'split' (both)\n   */\n  setView(view) {\n    this.currentView = view;\n\n    this.controls.querySelectorAll('button[data-view]').forEach(btn => {\n      btn.classList.toggle('active', btn.dataset.view === view);\n    });\n\n    const copyMDButton = this.controls.querySelector('.copy-src-button');\n    const copyHTMLButton = this.controls.querySelector('.copy-html-button');\n\n    if (view === 'src') {\n      this.input.classList.remove('squibview-hidden');\n      this.output.classList.add('squibview-hidden');\n      this.input.style.width = '100%';\n      copyMDButton.classList.remove('squibview-hidden');\n      copyHTMLButton.classList.add('squibview-hidden');\n    } else if (view === 'html') {\n      this.input.classList.add('squibview-hidden');\n      this.output.classList.remove('squibview-hidden');\n      this.output.style.width = '100%';\n      copyMDButton.classList.add('squibview-hidden');\n      copyHTMLButton.classList.remove('squibview-hidden');\n    } else { // view == 'split'\n      this.input.classList.remove('squibview-hidden');\n      this.output.classList.remove('squibview-hidden');\n      this.input.style.width = '50%';\n      this.output.style.width = '50%';\n      copyMDButton.classList.remove('squibview-hidden');\n      copyHTMLButton.classList.remove('squibview-hidden');\n    }\n\n    this.adjustLayout();\n  }\n\n  /**\n   * Copies the rendered content to the clipboard with formatting.\n   * Processes code blocks, SVG elements, and images to ensure they copy correctly.\n   * \n   * @returns {Promise<void>} A promise that resolves when copying is complete\n   */\n  async copyContent() {\n    const copyButton = this.controls.querySelector('.copy-button');\n    copyButton.textContent = 'Copying...';\n\n    try {\n      const contentDiv = this.output.querySelector('div[contenteditable=\"true\"]');\n      if (!contentDiv) {\n        throw new Error('Content div not found');\n      }\n\n      const clone = contentDiv.cloneNode(true);\n\n      clone.querySelectorAll('pre code').forEach(block => {\n        const formattedCode = block.innerHTML;\n\n        const table = document.createElement('table');\n        table.style.width = '100%';\n        table.style.borderCollapse = 'collapse';\n        table.style.border = 'none';\n\n        const tr = document.createElement('tr');\n        const td = document.createElement('td');\n        td.style.backgroundColor = '#f7f7f7';\n        td.style.padding = '12px';\n        td.style.fontFamily = 'Consolas, Monaco, \"Courier New\", monospace';\n        td.style.whiteSpace = 'pre';\n        td.style.border = 'none';\n\n        td.innerHTML = formattedCode.trim();\n\n        tr.appendChild(td);\n        table.appendChild(tr);\n        block.parentNode.replaceWith(table);\n      });\n\n      const svgElements = clone.querySelectorAll('svg');\n      for (const svg of svgElements) {\n        try {\n          const pngBlob = await this.svgToPng(svg);\n          const dataUrl = await new Promise(resolve => {\n            const reader = new FileReader();\n            reader.onloadend = () => resolve(reader.result);\n            reader.readAsDataURL(pngBlob);\n          });\n\n          const img = document.createElement('img');\n          img.src = dataUrl;\n          img.width = svg.clientWidth || svg.viewBox.baseVal.width || 100;\n          img.height = svg.clientHeight || svg.viewBox.baseVal.height || 100;\n          img.setAttribute('v:shapes', 'image' + Math.random().toString(36).substr(2, 9));\n          img.style.width = img.width + 'px';\n          img.style.height = img.height + 'px';\n          img.alt = \"Converted diagram\";\n          svg.parentNode.replaceChild(img, svg);\n        } catch (error) {\n          console.error('Failed to convert SVG:', error);\n        }\n      }\n\n\n      // Convert all images to data URLs\n      const imgElements = clone.querySelectorAll('img');\n      await Promise.all(imgElements.map(async img => {\n        console.log('Converting image:', img.src);\n\n        // Create canvas\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n\n        // Create new image and wait for it to load completely\n        const tempImg = new Image();\n        tempImg.crossOrigin = 'anonymous';\n\n        try {\n          await new Promise((resolve, reject) => {\n            tempImg.onload = resolve;\n            tempImg.onerror = reject;\n            tempImg.src = img.src;\n          });\n\n          // Set dimensions\n          canvas.width = tempImg.offsetWidth || img.offsetWidth || 200;\n          canvas.height = tempImg.offsetHeight || img.offsetHeight || 200;\n\n          // Draw and convert\n          ctx.drawImage(tempImg, 0, 0);\n          const dataUrl = canvas.toDataURL('image/png', 1.0);\n\n          // Create and wait for new image with data URL\n          const newImg = new Image();\n          await new Promise((resolve, reject) => {\n            newImg.onload = () => {\n              newImg.alt = img.alt || 'Converted image';\n              newImg.width = canvas.width;\n              newImg.height = canvas.height;\n              newImg.style.cssText = img.style.cssText;\n              // Force image to be treated as embedded\n              newImg.setAttribute('data-embedded', 'true');\n              // Replace the old image\n              img.parentNode.replaceChild(newImg, img);\n              console.log('Successfully converted image to data URL');\n              resolve();\n            };\n            newImg.onerror = reject;\n            newImg.src = dataUrl;\n          });\n        } catch (error) {\n          console.error('Error converting image:', error, img.src);\n          // Don't rethrow - we want to continue with other images\n        }\n      }));\n\n\n      const clipData = new ClipboardItem({\n        'text/html': new Blob([`\n            <html xmlns:v=\"urn:schemas-microsoft-com:vml\"\n                  xmlns:o=\"urn:schemas-microsoft-com:office:office\"\n                  xmlns:w=\"urn:schemas-microsoft-com:office:word\">\n              <head>\n                <meta charset=\"utf-8\">\n                <style>\n                  table { border-collapse: collapse; width: 100%; margin-bottom: 1em; }\n                  th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }\n                  th { background-color: #f0f0f0; font-weight: bold; }\n\n                  /* Code block styling */\n                  .hljs { display: block; overflow-x: auto; padding: 1em; }\n                  .hljs-keyword { color: #0033B3; }\n                  .hljs-string { color: #067D17; }\n                  .hljs-comment { color: #8C8C8C; }\n                  .hljs-function { color: #00627A; }\n                  .hljs-number { color: #1750EB; }\n                  .hljs-operator { color: #687687; }\n                  .hljs-punctuation { color: #000000; }\n\n                  /* Word-specific image handling */\n                  img { display: block; max-width: none; }\n                </style>\n              </head>\n              <body>\n                ${clone.innerHTML}\n              </body>\n            </html>\n          `], { type: 'text/html' }),\n        'text/plain': new Blob([clone.innerText], { type: 'text/plain' })\n      });\n\n      await navigator.clipboard.write([clipData]);\n      copyButton.textContent = 'Copied!';\n    } catch (err) {\n      console.error('Copy failed:', err);\n      copyButton.textContent = 'Copy failed';\n    }\n\n    setTimeout(() => {\n      copyButton.textContent = 'Copy';\n    }, 2000);\n  }\n\n  /**\n   * Converts an SVG element to a PNG blob.\n   * \n   * @param {SVGElement} svgElement - The SVG element to convert\n   * @returns {Promise<Blob>} A promise that resolves with the PNG blob\n   */\n  svgToPng(svgElement) {\n    return new Promise((resolve, reject) => {\n      const svgString = new XMLSerializer().serializeToString(svgElement);\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n\n      const scale = 2;\n      const svgWidth = svgElement.clientWidth || svgElement.viewBox.baseVal.width || 100;\n      const svgHeight = svgElement.clientHeight || svgElement.viewBox.baseVal.height || 100;\n\n      canvas.width = svgWidth * scale;\n      canvas.height = svgHeight * scale;\n      ctx.scale(scale, scale);\n\n      img.onload = () => {\n        try {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.drawImage(img, 0, 0, svgWidth, svgHeight);\n          canvas.toBlob(blob => {\n            resolve(blob);\n          }, 'image/png', 1.0);\n        } catch (err) {\n          reject(err);\n        }\n      };\n\n      img.onerror = reject;\n      const svgDataUrl = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svgString)}`;\n      img.src = svgDataUrl;\n    });\n  }\n\n  /**\n   * Shows or hides the control buttons.\n   * \n   * @param {boolean} show - Whether to show the controls\n   */\n  controlsShow(show) {\n    this.controls.style.display = show ? '' : 'none';\n    this.options.showControls = show;\n    this.adjustLayout();\n  }\n\n  /**\n   * Shows or hides the title section.\n   * \n   * @param {boolean} show - Whether to show the title\n   */\n  titleShow(show) {\n    this.title.style.display = show ? '' : 'none';\n    this.options.titleShow = show;\n    this.adjustLayout();\n  }\n\n  /**\n   * Sets the content of the title section.\n   * \n   * @param {string} content - The HTML content for the title\n   */\n  titleSetContent(content) {\n    this.title.innerHTML = content;\n    this.options.titleContent = content;\n  }\n\n  /**\n   * Gets the content of the title section.\n   * \n   * @returns {string} The HTML content of the title\n   */\n  titleGetContent() {\n    return this.title.innerHTML;\n  }\n\n  /**\n   * Gets the current markdown source from the input textarea.\n   * \n   * @returns {string} The markdown source\n   */\n  getMarkdownSource() {\n    return this.input.value;\n  }\n\n  /**\n   * Gets the HTML source from the rendered output.\n   * \n   * @returns {string} The HTML content\n   */\n  getHTMLSource() {\n    return this.output.querySelector('div[contenteditable=\"true\"]').innerHTML;\n  }\n\n  /**\n   * Toggles between the different view modes (source, rendered, split).\n   * Cycles through: source -> split -> rendered -> source.\n   * Note: This function relies on a global editor variable.\n   */\n  toggleView() {\n    const editor = window.editor;\n    if (editor.currentView === 'src') {\n      editor.setView('split');\n    } else if (editor.currentView === 'split') {\n      editor.setView('html');\n    } else\n      editor.setView('src')\n\n    console.log(editor.currentView)\n  }\n\n  /**\n   * Creates an iframe that fills the entire parent element and injects provided HTML content.\n   * @param {HTMLElement} parentElement - The parent element to contain the iframe.\n   * @param {string} htmlContent - The HTML content to inject into the iframe.\n   */\n  insertContentInIframe(parentElement, htmlContent) {\n    // Create an iframe element\n    const iframe = document.createElement('iframe');\n\n    // Style the iframe to fill the parent completely\n    iframe.style.width = '100%';\n    iframe.style.height = '100%';\n    iframe.style.border = 'none';\n    iframe.style.display = 'block';\n\n    //iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin');\n    // Append the iframe to the parent element\n    parentElement.innerHTML = '';\n    parentElement.appendChild(iframe);\n\n    // Access the iframe's document and write the HTML content into it\n    const iframeDoc = iframe.contentWindow.document;\n    iframeDoc.open();\n    iframeDoc.write(htmlContent);\n    iframeDoc.close();\n    this.output_iframe = iframe\n    this.output_ifraome_content = htmlContent;\n  }\n  /**\n   * Renders HTML content in an iframe within the output div.\n   * \n   * @param {string} src - The HTML source content to render\n   */\n  renderHTML(src) {\n    const htmlContent = src;\n    const outputDiv = this.output;\n    this.insertContentInIframe(outputDiv, htmlContent);\n  }\n\n  /**\n   * Renders the current content based on its type.\n   * Handles different content types: HTML, RevealJS, CSV/TSV, and Markdown.\n   */\n  renderOutput() {\n    switch (this.inputContentType) {\n      case 'html':\n        this.renderHTML(this.input.value)\n        break;\n      case 'reveal':\n        this.renderHTML(this.makeRevealJSFullPage(this.input.value))\n        break;\n      case 'csv': // comma separated\n      case 'tsv': // tab separated\n      case 'semisv': // semicolon separated\n      case 'ssv': //space separated\n        // take the input and treat it as csv / tsv and convert it to markdown to render on the fly\n        const data = this.getContent();\n        // delimiter can be commma, tab, space, or semi-colon\n        let delimiter = \",\";\n        const delims = { \"tsv\": \",\", \"semisv\": \";\", \"ssv\": \" \" };\n        if (this.inputContentType in delims)\n          delimiter = delims[this.inputContentType];\n        const markdownTable = this.csvOrTsvToMarkdownTable(data, delimiter);\n        this.renderMarkdown(markdownTable);\n        break;\n      case 'md':\n        this.renderMarkdown();\n        break;\n      default:\n        this.renderMarkdown();\n        console.log(\"Unsupported content type: \", this.inputContentType);\n    }\n  }\n\n  /**\n   * Copies the source content to the clipboard.\n   * Attempts to use the modern Clipboard API with fallbacks for older browsers.\n   * \n   * @returns {Promise<void>} A promise that resolves when copying is complete\n   */\n  async copySource() {\n    const copyButton = this.controls.querySelector('.copy-src-button');\n    copyButton.textContent = 'Copying...';\n\n    try {\n      const markdownText = this.getMarkdownSource();\n\n      try {\n        await navigator.clipboard.writeText(markdownText);\n      } catch (modernErr) {\n        const textarea = document.createElement('textarea');\n        textarea.value = markdownText;\n        textarea.style.position = 'fixed';\n        textarea.style.opacity = '0';\n        document.body.appendChild(textarea);\n        textarea.select();\n\n        //const successful = document.execCommand('copy');\n        document.body.removeChild(textarea);\n\n        //if (!successful) throw new Error('Fallback copy failed');\n      }\n\n      copyButton.textContent = 'Copied!';\n    } catch (err) {\n      console.error('Copy Markdown failed:', err);\n      copyButton.textContent = 'Copy failed';\n    }\n\n    setTimeout(() => {\n      copyButton.textContent = 'Copy Source';\n    }, 2000);\n  }\n\n  async copyHTML() {\n    const copyButton = this.controls.querySelector('.copy-html-button');\n    copyButton.textContent = 'Copying...';\n\n    try {\n      const contentDiv = this.output.querySelector('div[contenteditable=\"true\"]');\n      if (!contentDiv) {\n        throw new Error('Content div not found');\n      }\n\n      const clone = contentDiv.cloneNode(true);\n\n      // Process code blocks\n      clone.querySelectorAll('pre code').forEach(block => {\n        const formattedCode = block.innerHTML;\n\n        const table = document.createElement('table');\n        table.style.width = '100%';\n        table.style.borderCollapse = 'collapse';\n        table.style.border = 'none';\n\n        const tr = document.createElement('tr');\n        const td = document.createElement('td');\n        td.style.backgroundColor = '#f7f7f7';\n        td.style.padding = '12px';\n        td.style.fontFamily = 'Consolas, Monaco, \"Courier New\", monospace';\n        td.style.whiteSpace = 'pre';\n        td.style.border = 'none';\n\n        td.innerHTML = formattedCode.trim();\n\n        tr.appendChild(td);\n        table.appendChild(tr);\n        block.parentNode.replaceWith(table);\n      });\n\n      // Convert SVG elements to PNG\n      const svgElements = clone.querySelectorAll('svg');\n      for (const svg of svgElements) {\n        try {\n          const pngBlob = await this.svgToPng(svg);\n          const dataUrl = await new Promise(resolve => {\n            const reader = new FileReader();\n            reader.onloadend = () => resolve(reader.result);\n            reader.readAsDataURL(pngBlob);\n          });\n\n          const img = document.createElement('img');\n          img.src = dataUrl;\n          img.width = svg.clientWidth || svg.viewBox.baseVal.width || 100;\n          img.height = svg.clientHeight || svg.viewBox.baseVal.height || 100;\n          img.setAttribute('v:shapes', 'image' + Math.random().toString(36).substr(2, 9));\n          img.style.width = img.width + 'px';\n          img.style.height = img.height + 'px';\n          img.alt = \"Converted diagram\";\n          svg.parentNode.replaceChild(img, svg);\n        } catch (error) {\n          console.error('Failed to convert SVG:', error);\n        }\n      }\n\n      const htmlContent = `\n          <html xmlns:v=\"urn:schemas-microsoft-com:vml\"\n                xmlns:o=\"urn:schemas-microsoft-com:office:office\"\n                xmlns:w=\"urn:schemas-microsoft-com:office:word\">\n            <head>\n              <meta charset=\"utf-8\">\n              <style>\n                table { border-collapse: collapse; width: 100%; margin-bottom: 1em; }\n                th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }\n                th { background-color: #f0f0f0; font-weight: bold; }\n\n                /* Code block styling */\n                .hljs { display: block; overflow-x: auto; padding: 1em; }\n                .hljs-keyword { color: #0033B3; }\n                .hljs-string { color: #067D17; }\n                .hljs-comment { color: #8C8C8C; }\n                .hljs-function { color: #00627A; }\n                .hljs-number { color: #1750EB; }\n                .hljs-operator { color: #687687; }\n                .hljs-punctuation { color: #000000; }\n\n                /* Word-specific image handling */\n                img { display: block; max-width: none; }\n              </style>\n            </head>\n            <body>\n              ${clone.innerHTML}\n            </body>\n          </html>`;\n\n      const platform = this.getPlatform();\n\n      if (platform === 'macos') {\n        // macOS approach (previously working version)\n        try {\n          await navigator.clipboard.write([\n            new ClipboardItem({\n              'text/html': new Blob([htmlContent], { type: 'text/html' }),\n              'text/plain': new Blob([clone.innerText], { type: 'text/plain' })\n            })\n          ]);\n        } catch (modernErr) {\n          // Safari fallback\n          if (!this.copyToClipboard(htmlContent)) {\n            throw new Error('Fallback copy failed');\n          }\n        }\n      } else {\n        // Windows/Linux approach\n        const tempDiv = document.createElement('div');\n        tempDiv.style.position = 'fixed';\n        tempDiv.style.left = '-9999px';\n        tempDiv.style.top = '0';\n        tempDiv.innerHTML = htmlContent;\n        document.body.appendChild(tempDiv);\n\n        try {\n          await navigator.clipboard.write([\n            new ClipboardItem({\n              'text/html': new Blob([htmlContent], { type: 'text/html' }),\n              'text/plain': new Blob([clone.innerText], { type: 'text/plain' })\n            })\n          ]);\n        } catch (modernErr) {\n          const selection = window.getSelection();\n          const range = document.createRange();\n          range.selectNodeContents(tempDiv);\n          selection.removeAllRanges();\n          selection.addRange(range);\n\n          const successful = document.execCommand('copy');\n          if (!successful) {\n            throw new Error('Fallback copy failed');\n          }\n        } finally {\n          if (tempDiv && tempDiv.parentNode) {\n            document.body.removeChild(tempDiv);\n          }\n        }\n      }\n\n      copyButton.textContent = 'Copied!';\n    } catch (err) {\n      console.error('Copy HTML failed:', err);\n      copyButton.textContent = 'Copy failed';\n    }\n\n    setTimeout(() => {\n      copyButton.textContent = 'Copy Formatted';\n    }, 2000);\n  }\n\n  /**\n   * Copies text to clipboard using various fallback methods.\n   * \n   * @param {string} string - The text to copy to the clipboard\n   * @returns {boolean} Whether the copy operation was successful\n   */\n  copyToClipboard(string) {\n    let textarea;\n    let result;\n\n    try {\n      textarea = document.createElement('textarea');\n      textarea.setAttribute('readonly', true);\n      textarea.setAttribute('contenteditable', true);\n      textarea.style.position = 'fixed';\n      textarea.style.left = '0';\n      textarea.style.top = '0';\n      textarea.style.opacity = '0';\n      textarea.value = string;\n\n      document.body.appendChild(textarea);\n\n      textarea.focus();\n      textarea.select();\n\n      const range = document.createRange();\n      range.selectNodeContents(textarea);\n\n      const sel = window.getSelection();\n      sel.removeAllRanges();\n      sel.addRange(range);\n\n      textarea.setSelectionRange(0, textarea.value.length);\n      result = document.execCommand('copy');\n    } catch (err) {\n      console.error(err);\n      result = null;\n    } finally {\n      if (textarea && textarea.parentNode) {\n        document.body.removeChild(textarea);\n      }\n    }\n\n    // manual copy fallback using prompt\n    if (!result) {\n      const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n      const copyHotkey = isMac ? '⌘C' : 'CTRL+C';\n      result = prompt(`Press ${copyHotkey}`, string);\n      if (!result) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Detects the user's operating system platform.\n   * \n   * @returns {string} The detected platform: 'macos', 'windows', 'linux', or 'unknown'\n   */\n  getPlatform() {\n    const platform = navigator.platform.toLowerCase();\n    const userAgent = navigator.userAgent.toLowerCase();\n\n    if (platform.includes('mac') || userAgent.includes('mac')) {\n      return 'macos';\n    } else if (userAgent.includes('windows')) {\n      return 'windows';\n    } else if (userAgent.includes('linux')) {\n      return 'linux';\n    }\n    return 'unknown';\n  }\n\n  /**\n   * Creates a complete HTML page from a HTML snippet/div content.\n   * \n   * @param {string} inputDivHTML - The HTML content to include in the page\n   * @param {boolean} [editable=false] - Whether the content should be editable\n   * @returns {string} A complete HTML page as a string\n   */\n  makeHTMLPageFromDiv(inputDivHTML, editable = false) {\n    let editableAttr = editable ? 'contenteditable=\"true\"' : '';\n    let s =\n      `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Markdown Viewer with Graphics Support</title>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n  <xscripx src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></xscripx>\n  <xscripx src=\"https://unpkg.com/mermaid/dist/mermaid.min.js\"></xscripx>\n  <style>\n      body {\n          font-family: Arial, sans-serif;\n          box-sizing: border-box;\n          padding: 20px;\n      }\n      .squibview-output {\n          width: 50%;\n          margin: auto;\n      }\n      pre {\n          background-color: #f4f4f4;\n          padding: 10px;\n          border-radius: 5px;\n          overflow-x: auto;\n      }\n      table {\n          width: 100%;\n          border-collapse: collapse;\n          margin: 20px 0;\n      }\n      table, th, td {\n          border: 1px solid black;\n      }\n      th, td {\n          padding: 8px;\n          text-align: left;\n      }\n  </style>\n</head>\n<body ${editableAttr}>\n  ${inputDivHTML}\n</body>\n</html>`;\n    // now we need to remove the temp-script tag with the script in it.\n    // we do this with a regex search/replace\n    s = s.replaceAll(\"xscripx\", \"script\");\n    console.log(editableAttr);\n    return s;\n  }\n\n  /**\n   * Creates a RevealJS presentation page from markdown content.\n   * Splits the markdown on '---' delimiters to create slides.\n   * \n   * @param {string} markdown - The markdown content to convert to slides\n   * @param {string} [title=\"Slide Presentation\"] - The title for the presentation\n   * @returns {string} A complete HTML page with RevealJS for presenting slides\n   */\n  makeRevealJSFullPage(markdown, title = \"Slide Presentation\") {\n    return `<!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>${title}</title>\n      <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/reveal.js/dist/reveal.css\">\n      <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/reveal.js/dist/theme/black.css\">\n      <script src=\"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\"></script>\n  </head>\n  <body>\n      <div class=\"reveal\" contenteditable=\"true\">\n          <div class=\"slides\">\n              ${markdown.split('---').map(slide => `<section data-markdown><script type=\"text/template\">${slide.trim()}</script></section>`).join('\\n')}\n          </div>\n      </div>\n      <script src=\"https://cdn.jsdelivr.net/npm/reveal.js/dist/reveal.js\"></script>\n      <script src=\"https://cdn.jsdelivr.net/npm/reveal.js/plugin/markdown/markdown.js\"></script>\n      <script>\n          Reveal.initialize({\n              plugins: [ RevealMarkdown ]\n          });\n          \n          // Ensure Mermaid diagrams initialize correctly\n          document.addEventListener('DOMContentLoaded', () => {\n              mermaid.initialize({ startOnLoad: true , securityLevel: 'loose', theme: 'dark' });\n              document.querySelectorAll('.mermaid').forEach(el => {\n                  el.innerHTML = el.textContent;\n                  mermaid.init(undefined, el);\n              });\n          });\n      </script>\n  </body>\n  </html>`;\n  }\n\n  /**\n   * Converts CSV/TSV content to a markdown table.\n   * \n   * @param {string} input - The CSV/TSV string to convert\n   * @param {string} [delimiter=','] - The delimiter used in the input (comma, tab, etc.)\n   * @returns {string} A markdown formatted table\n   */\n  csvOrTsvToMarkdownTable(input, delimiter = ',') {\n    // Parse CSV/TSV content\n    const parsedData = Papa.parse(input, {\n      delimiter,\n      skipEmptyLines: true\n    });\n\n    const rows = parsedData.data;\n\n    if (rows.length === 0) return 'No data found.';\n\n    // Markdown table header\n    const header = `| ${rows[0].join(' | ')} |`;\n    const separator = `| ${rows[0].map(() => '---').join(' | ')} |`;\n    const tableRows = rows.slice(1).map(row => `| ${row.join(' | ')} |`).join('\\n');\n\n    return `${header}\\n${separator}\\n${tableRows}`;\n  }\n\n\n}// end of class SquibView\n\nexport default SquibView;\n"],"names":["SquibView","element","options","arguments","length","undefined","_classCallCheck","_objectSpread","defaultOptions","show_md_buttons","inputContentType","container","document","querySelector","Error","revisions","buffer","index","initializeLibraries","createStructure","initializeEventHandlers","initializeResizeObserver","initialContent","setContent","setView","initialView","_createClass","key","value","mermaid","initialize","startOnLoad","securityLevel","theme","errorCallback","error","console","warn","init","md","window","markdownit","html","linkify","typographer","highlight","str","lang","hljs","getLanguage","language","__","defaultFence","renderer","rules","fence","tokens","idx","env","self","renderToken","token","info","trim","content","classList","add","baseClass","md_buttons","innerHTML","concat","titleShow","titleContent","showControls","title","controls","editor","input","output","_this","querySelectorAll","forEach","button","addEventListener","dataset","view","copySource","copyHTML","_this2","resizeObserver","ResizeObserver","entries","_iterator","_createForOfIteratorHelper","_step","s","n","done","entry","target","adjustLayout","err","e","f","observe","containerRect","getBoundingClientRect","titleHeight","offsetHeight","controlsHeight","availableHeight","height","availableWidth","width","style","currentView","contentType","saveRevision","push","slice","renderOutput","revisionUndo","lastChange","revisionRedo","revisionSet","revisionNumRevsions","revisionGetCurrentIndex","getContent","cleanMarkdown","replace","_renderMarkdown","_asyncToGenerator","_regeneratorRuntime","mark","_callee","markdown","contentDiv","images","_iterator2","_step2","_loop","wrap","_callee$","_context2","prev","next","render","img","canvas","ctx","tempImg","_loop$","_context","createElement","getContext","Image","crossOrigin","Promise","resolve","reject","onload","naturalWidth","naturalHeight","drawImage","dataUrl","toDataURL","src","onerror","t0","stop","delegateYield","t1","finish","renderMarkdown","_x","apply","markdownRemoveAllHR","getMarkdownSource","newMarkdown","markdownAdjustHeadings","offset","lines","split","modifiedLines","map","line","headingMatch","match","currentHeadingLevel","newHeadingLevel","Math","min","max","repeat","substring","join","markdownEditorAdjustHeadings","btn","toggle","copyMDButton","copyHTMLButton","remove","_copyContent","_callee3","_this3","copyButton","clone","svgElements","_iterator3","_step3","_loop2","imgElements","clipData","_callee3$","_context5","textContent","cloneNode","block","formattedCode","table","borderCollapse","border","tr","td","backgroundColor","padding","fontFamily","whiteSpace","appendChild","parentNode","replaceWith","svg","pngBlob","_loop2$","_context4","svgToPng","sent","reader","FileReader","onloadend","result","readAsDataURL","clientWidth","viewBox","baseVal","clientHeight","setAttribute","random","toString","substr","alt","replaceChild","all","_ref","_callee2","newImg","_callee2$","_context3","log","offsetWidth","cssText","_x2","ClipboardItem","Blob","type","innerText","navigator","clipboard","write","t2","setTimeout","copyContent","svgElement","svgString","XMLSerializer","serializeToString","scale","svgWidth","svgHeight","clearRect","toBlob","blob","svgDataUrl","encodeURIComponent","controlsShow","show","display","titleSetContent","titleGetContent","getHTMLSource","toggleView","insertContentInIframe","parentElement","htmlContent","iframe","iframeDoc","contentWindow","open","close","output_iframe","output_ifraome_content","renderHTML","outputDiv","makeRevealJSFullPage","data","delimiter","delims","markdownTable","csvOrTsvToMarkdownTable","_copySource","_callee4","markdownText","textarea","_callee4$","_context6","writeText","position","opacity","body","select","removeChild","_copyHTML","_callee5","_this4","_iterator4","_step4","_loop3","platform","tempDiv","selection","range","successful","_callee5$","_context8","_loop3$","_context7","getPlatform","copyToClipboard","left","top","t3","getSelection","createRange","selectNodeContents","removeAllRanges","addRange","execCommand","t4","string","focus","sel","setSelectionRange","isMac","toUpperCase","indexOf","copyHotkey","prompt","toLowerCase","userAgent","includes","makeHTMLPageFromDiv","inputDivHTML","editable","editableAttr","replaceAll","slide","parsedData","Papa","parse","skipEmptyLines","rows","header","separator","tableRows","row","_defineProperty","version","url"],"mappings":"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"}