{"version":3,"file":"squibview.esm.min.js","sources":["../src/squibview.js"],"sourcesContent":["/* SquibView a live md/html/etc Editor/renderer with copy support\n supports markdown, html, and split view\n supports copying of formatted html and markdown\n supports copying of images as data urls\n supports copying of svg as png\n supports copying of tables as formatted tables\n supports copying of code blocks as formatted tables\n by deftio (c) 2024\n*/\n\nclass SquibView {\n  static defaultOptions = {\n    initialContent: '',\n    inputContentType: 'md', // 'md', 'html', 'reveal', 'csv' or 'tsv'\n    showControls: true,\n    titleShow: false,\n    titleContent: '',\n    initialView: 'split',\n    baseClass: 'squibview'\n  };\n\n  static version = {\n    version: \"0.0.27\",\n    url: \"https://github.com/deftio/squibview\"\n  };\n\n  constructor(element, options = {}) {\n    this.options = { ...SquibView.defaultOptions, ...options };\n    this.container = typeof element === 'string' ? document.querySelector(element) : element;\n\n    if (!this.container) {\n      throw new Error('Container element not found');\n    }\n\n    // Initialize undo/redo buffer we should also have a way to clear it or access an abitrary version of it\n    this.revisions = {buffer : [], index : 0};\n  \n    // iniit all the libs and \n    this.initializeLibraries();\n    this.createStructure();\n    this.initializeEventHandlers();\n    this.initializeResizeObserver();  // resize container if needed\n\n    // set content\n    if (this.options.initialContent)\n      this.setContent(this.options.initialContent, this.options.inputContentType);\n    this.setView(this.options.initialView);  // src / rendered / split\n    \n\n    \n  }\n\n  initializeLibraries() {\n    mermaid.initialize({\n      startOnLoad: false,\n      securityLevel: 'loose',\n      theme: 'default',\n      errorCallback: function (error) {\n        console.warn(\"Mermaid error:\", error);\n        return \"<div class='mermaid-error'></div>\"; // Replace with custom message\n      }\n    });\n    mermaid.init(undefined, \".mermaid\");\n    this.md = window.markdownit({\n      html: true,\n      linkify: true,\n      typographer: true,\n      highlight: (str, lang) => {\n        if (lang && hljs.getLanguage(lang)) {\n          try {\n            return hljs.highlight(str, { language: lang }).value;\n          } catch (__) { }\n        }\n        return '';\n      }\n    });\n\n    const defaultFence = this.md.renderer.rules.fence ||\n      ((tokens, idx, options, env, self) => self.renderToken(tokens, idx, options));\n\n    this.md.renderer.rules.fence = (tokens, idx, options, env, self) => {\n      const token = tokens[idx];\n      const info = token.info.trim();\n      if (info === 'mermaid') {\n        return '<div class=\"mermaid\">' + token.content + '</div>';\n      }\n      if (info === 'svg') {\n        return token.content;\n      }\n      return defaultFence(tokens, idx, options, env, self);\n    };\n  }\n\n  createStructure() {\n    this.container.classList.add(this.options.baseClass);\n\n    this.container.innerHTML = `\n        <div class=\"${this.options.baseClass}-title\" ${!this.options.titleShow ? 'style=\"display:none\"' : ''}>\n          ${this.options.titleContent}\n        </div>\n        <div class=\"${this.options.baseClass}-controls\" ${!this.options.showControls ? 'style=\"display:none\"' : ''}>\n          <button data-view='src'>Source</button>\n          <button data-view=\"html\">Rendered</button>\n          <button data-view=\"split\">Split</button>\n          <button class=\"copy-src-button\">Copy Source</button>\n          <button class=\"copy-html-button\">Copy Rendered</button>\n        </div>\n        <div class=\"${this.options.baseClass}-editor\">\n          <textarea class=\"${this.options.baseClass}-input\"></textarea>\n          <div class=\"${this.options.baseClass}-output\"></div>\n        </div>\n      `;\n\n    this.title = this.container.querySelector(`.${this.options.baseClass}-title`);\n    this.controls = this.container.querySelector(`.${this.options.baseClass}-controls`);\n    this.editor = this.container.querySelector(`.${this.options.baseClass}-editor`);\n    this.input = this.container.querySelector(`.${this.options.baseClass}-input`);\n    this.output = this.container.querySelector(`.${this.options.baseClass}-output`);\n\n    \n  }\n\n  initializeEventHandlers() {\n    this.controls.querySelectorAll('button[data-view]').forEach(button => {\n      button.addEventListener('click', () => this.setView(button.dataset.view));\n    });\n\n    this.controls.querySelector('.copy-src-button').addEventListener('click', () => this.copySource());\n    this.controls.querySelector('.copy-html-button').addEventListener('click', () => this.copyHTML());\n\n    //onchange() for input source\n    this.input.addEventListener('input', () => { this.setContent(); });\n  }\n  initializeResizeObserver() {\n    const resizeObserver = new ResizeObserver(entries => {\n      for (let entry of entries) {\n        if (entry.target === this.container) {\n          this.adjustLayout();\n        }\n      }\n    });\n    resizeObserver.observe(this.container);\n  }\n\n  adjustLayout() {\n    const containerRect = this.container.getBoundingClientRect();\n    const titleHeight = this.title.offsetHeight;\n    const controlsHeight = this.controls.offsetHeight;\n\n    const availableHeight = containerRect.height - titleHeight - controlsHeight;\n    const availableWidth = containerRect.width;\n    this.editor.style.height = `${availableHeight}px`;\n    this.editor.style.width = `${availableWidth}px`;\n\n    if (this.currentView === 'split') {\n      this.input.style.width = '50%';\n      this.output.style.width = '50%';\n    } else if (this.currentView === 'src') {\n      this.input.style.width = '100%';\n    } else if (this.currentView === 'html') {\n      this.output.style.width = '100%';\n    }\n  }\n\n  setContent(content = this.input.value, contentType = this.inputContentType, saveRevision = true) {\n    this.input.value = content;\n    this.inputContentType = contentType;\n    // push the content to the revisions\n    if (saveRevision) {\n      this.revisions.buffer.push({ content, contentType });\n      this.revisions.index = this.revisions.buffer.length - 1;  \n      // remove all the revisions after the current index\n      this.revisions.buffer = this.revisions.buffer.slice(0, this.revisions.index + 1);\n    }\n    // render it\n    this.renderOutput();\n  }\n\n  // if possible undo the last change else do nothing\n  revisionUndo() {\n    // if possible undo the last change else do nothing, use the revisions buffer and index\n    if (this.revisions.buffer.length > 0 && this.revisions.index > 0) {\n      this.revisions.index--;\n      const lastChange = this.revisions.buffer[this.revisions.index];\n      this.input.value = lastChange.content;\n      this.inputContentType = lastChange.contentType;\n      //console.log(this.revisions.index);\n      this.renderOutput();\n\n    }\n  }\n  // if possible redo the last change else do nothing\n  revisionRedo() {\n    if (this.revisions.index < this.revisions.buffer.length - 1) {\n      this.revisions.index++;\n      const lastChange = this.revisions.buffer[this.revisions.index];\n      this.input.value = lastChange.content;\n      this.inputContentType = lastChange.contentType;\n      //console.log(this.revisions.index);\n      this.renderOutput();\n    }\n  }\n  revisionSet(index) {\n    if (index >= 0 && index < this.revisions.buffer.length) {\n      this.revisions.index = index;\n      const lastChange = this.revisions.buffer[this.revisions.index];\n      this.input.value = lastChange.content;\n      this.inputContentType = lastChange.contentType;\n      //console.log(this.revisions.index);\n      this.renderOutput();\n    }\n  }\n  revisionNumRevsions() {\n    return this.revisions.buffer.length;\n  }\n  revisionGetCurrentIndex() {\n    return this.revisions.index;\n  }\n\n  getContent() {\n    return this.input.value;\n  }\n\n  cleanMarkdown(md) {\n    return md.replace(/^```markdown\\s+/, '').replace(/```$/, '');\n  }\n\n  async renderMarkdown(md) {\n\n    const markdown = md || this.input.value;\n    const html = this.md.render(markdown);\n    this.output.innerHTML = \"<div contenteditable='true'>\" + html + \"</div>\";\n\n    // Convert all images to data URLs immediately after rendering\n    const contentDiv = this.output.querySelector('div[contenteditable=\"true\"]');\n    const images = contentDiv.querySelectorAll('img');\n\n    // render images to data urls\n\n    for (const img of images) {\n      try {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n\n        // Create new image and wait for it to load\n        const tempImg = new Image();\n        tempImg.crossOrigin = 'anonymous';\n\n        await new Promise((resolve, reject) => {\n          tempImg.onload = () => {\n            // Set canvas size to match image\n            canvas.width = tempImg.naturalWidth;\n            canvas.height = tempImg.naturalHeight;\n\n            // Draw image to canvas\n            ctx.drawImage(tempImg, 0, 0);\n\n            // Convert to data URL\n            const dataUrl = canvas.toDataURL('image/png', 1.0);\n\n            // Update original image\n            img.src = dataUrl;\n            resolve();\n          };\n          tempImg.onerror = reject;\n          tempImg.src = img.src;\n        });\n      } catch (error) {\n        console.error('Failed to convert image:', error);\n      }\n\n    }\n\n    // end of images to data urls\n\n    // Initialize mermaid diagrams after all images are processed\n    mermaid.init(undefined, this.output.querySelectorAll('.mermaid'));\n  } // end of renderMarkdown\n\n  // todo rename sourceRemoveAllHR ()  ==> handled markdown or html via replace (---) or (<hr>, <hr/>) respectively\n  markdownRemoveAllHR() {\n    if (this.inputContentType === 'md') {\n      const markdown = this.getMarkdownSource();\n      const newMarkdown = markdown.replace(/---/g, '');\n      this.setContent(newMarkdown, this.inputContentType);\n    }\n  }\n  /**\n   * Adjusts the heading levels in Markdown text by a specified offset.\n   * \n   * @param {string} markdown - The Markdown text to process\n   * @param {number} offset - The amount to adjust heading levels by (positive to increase, negative to decrease)\n   * @returns {string} - The Markdown text with adjusted heading levels\n   */\n  markdownAdjustHeadings(markdown, offset) {\n    // Early exit if offset is 0 or invalid input\n    if (offset === 0 || typeof markdown !== 'string') {\n      return markdown;\n    }\n\n    // Split the input into lines\n    const lines = markdown.split('\\n');\n\n    // Process each line\n    const modifiedLines = lines.map(line => {\n      // Regex to match heading lines: starts with 1-6 hash symbols followed by a space\n      const headingMatch = line.match(/^(#{1,6})\\s/);\n\n      if (!headingMatch) {\n        // Not a heading, return unchanged\n        return line;\n      }\n\n      const currentHeadingLevel = headingMatch[1].length;\n      // Calculate new heading level with bounds checking (min 1, max 6)\n      const newHeadingLevel = Math.min(Math.max(currentHeadingLevel + offset, 1), 6);\n\n      // Replace the heading prefix with the new level\n      return '#'.repeat(newHeadingLevel) + line.substring(currentHeadingLevel);\n    });\n\n    // Join the lines back together\n    return modifiedLines.join('\\n');\n  }\n  markdownEditorAdjustHeadings(offset) {\n    const markdown = this.getMarkdownSource();\n    const newMarkdown = this.markdownAdjustHeadings(markdown, offset);\n    this.setContent(newMarkdown, this.inputContentType);\n  }\n\n  setView(view) {\n    this.currentView = view;\n\n    this.controls.querySelectorAll('button[data-view]').forEach(btn => {\n      btn.classList.toggle('active', btn.dataset.view === view);\n    });\n\n    const copyMDButton = this.controls.querySelector('.copy-src-button');\n    const copyHTMLButton = this.controls.querySelector('.copy-html-button');\n\n    if (view === 'src') {\n      this.input.classList.remove('squibview-hidden');\n      this.output.classList.add('squibview-hidden');\n      this.input.style.width = '100%';\n      copyMDButton.classList.remove('squibview-hidden');\n      copyHTMLButton.classList.add('squibview-hidden');\n    } else if (view === 'html') {\n      this.input.classList.add('squibview-hidden');\n      this.output.classList.remove('squibview-hidden');\n      this.output.style.width = '100%';\n      copyMDButton.classList.add('squibview-hidden');\n      copyHTMLButton.classList.remove('squibview-hidden');\n    } else { // view == 'split'\n      this.input.classList.remove('squibview-hidden');\n      this.output.classList.remove('squibview-hidden');\n      this.input.style.width = '50%';\n      this.output.style.width = '50%';\n      copyMDButton.classList.remove('squibview-hidden');\n      copyHTMLButton.classList.remove('squibview-hidden');\n    }\n\n    this.adjustLayout();\n  }\n\n  async copyContent() {\n    const copyButton = this.controls.querySelector('.copy-button');\n    copyButton.textContent = 'Copying...';\n\n    try {\n      const contentDiv = this.output.querySelector('div[contenteditable=\"true\"]');\n      if (!contentDiv) {\n        throw new Error('Content div not found');\n      }\n\n      const clone = contentDiv.cloneNode(true);\n\n      clone.querySelectorAll('pre code').forEach(block => {\n        const formattedCode = block.innerHTML;\n\n        const table = document.createElement('table');\n        table.style.width = '100%';\n        table.style.borderCollapse = 'collapse';\n        table.style.border = 'none';\n\n        const tr = document.createElement('tr');\n        const td = document.createElement('td');\n        td.style.backgroundColor = '#f7f7f7';\n        td.style.padding = '12px';\n        td.style.fontFamily = 'Consolas, Monaco, \"Courier New\", monospace';\n        td.style.whiteSpace = 'pre';\n        td.style.border = 'none';\n\n        td.innerHTML = formattedCode.trim();\n\n        tr.appendChild(td);\n        table.appendChild(tr);\n        block.parentNode.replaceWith(table);\n      });\n\n      const svgElements = clone.querySelectorAll('svg');\n      for (const svg of svgElements) {\n        try {\n          const pngBlob = await this.svgToPng(svg);\n          const dataUrl = await new Promise(resolve => {\n            const reader = new FileReader();\n            reader.onloadend = () => resolve(reader.result);\n            reader.readAsDataURL(pngBlob);\n          });\n\n          const img = document.createElement('img');\n          img.src = dataUrl;\n          img.width = svg.clientWidth || svg.viewBox.baseVal.width || 100;\n          img.height = svg.clientHeight || svg.viewBox.baseVal.height || 100;\n          img.setAttribute('v:shapes', 'image' + Math.random().toString(36).substr(2, 9));\n          img.style.width = img.width + 'px';\n          img.style.height = img.height + 'px';\n          img.alt = \"Converted diagram\";\n          svg.parentNode.replaceChild(img, svg);\n        } catch (error) {\n          console.error('Failed to convert SVG:', error);\n        }\n      }\n\n\n      // Convert all images to data URLs\n      const imgElements = clone.querySelectorAll('img');\n      await Promise.all(imgElements.map(async img => {\n        console.log('Converting image:', img.src);\n\n        // Create canvas\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n\n        // Create new image and wait for it to load completely\n        const tempImg = new Image();\n        tempImg.crossOrigin = 'anonymous';\n\n        try {\n          await new Promise((resolve, reject) => {\n            tempImg.onload = resolve;\n            tempImg.onerror = reject;\n            tempImg.src = img.src;\n          });\n\n          // Set dimensions\n          canvas.width = tempImg.offsetWidth || img.offsetWidth || 200;\n          canvas.height = tempImg.offsetHeight || img.offsetHeight || 200;\n\n          // Draw and convert\n          ctx.drawImage(tempImg, 0, 0);\n          const dataUrl = canvas.toDataURL('image/png', 1.0);\n\n          // Create and wait for new image with data URL\n          const newImg = new Image();\n          await new Promise((resolve, reject) => {\n            newImg.onload = () => {\n              newImg.alt = img.alt || 'Converted image';\n              newImg.width = canvas.width;\n              newImg.height = canvas.height;\n              newImg.style.cssText = img.style.cssText;\n              // Force image to be treated as embedded\n              newImg.setAttribute('data-embedded', 'true');\n              // Replace the old image\n              img.parentNode.replaceChild(newImg, img);\n              console.log('Successfully converted image to data URL');\n              resolve();\n            };\n            newImg.onerror = reject;\n            newImg.src = dataUrl;\n          });\n        } catch (error) {\n          console.error('Error converting image:', error, img.src);\n          // Don't rethrow - we want to continue with other images\n        }\n      }));\n\n\n      const clipData = new ClipboardItem({\n        'text/html': new Blob([`\n            <html xmlns:v=\"urn:schemas-microsoft-com:vml\"\n                  xmlns:o=\"urn:schemas-microsoft-com:office:office\"\n                  xmlns:w=\"urn:schemas-microsoft-com:office:word\">\n              <head>\n                <meta charset=\"utf-8\">\n                <style>\n                  table { border-collapse: collapse; width: 100%; margin-bottom: 1em; }\n                  th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }\n                  th { background-color: #f0f0f0; font-weight: bold; }\n\n                  /* Code block styling */\n                  .hljs { display: block; overflow-x: auto; padding: 1em; }\n                  .hljs-keyword { color: #0033B3; }\n                  .hljs-string { color: #067D17; }\n                  .hljs-comment { color: #8C8C8C; }\n                  .hljs-function { color: #00627A; }\n                  .hljs-number { color: #1750EB; }\n                  .hljs-operator { color: #687687; }\n                  .hljs-punctuation { color: #000000; }\n\n                  /* Word-specific image handling */\n                  img { display: block; max-width: none; }\n                </style>\n              </head>\n              <body>\n                ${clone.innerHTML}\n              </body>\n            </html>\n          `], { type: 'text/html' }),\n        'text/plain': new Blob([clone.innerText], { type: 'text/plain' })\n      });\n\n      await navigator.clipboard.write([clipData]);\n      copyButton.textContent = 'Copied!';\n    } catch (err) {\n      console.error('Copy failed:', err);\n      copyButton.textContent = 'Copy failed';\n    }\n\n    setTimeout(() => {\n      copyButton.textContent = 'Copy';\n    }, 2000);\n  }\n\n  svgToPng(svgElement) {\n    return new Promise((resolve, reject) => {\n      const svgString = new XMLSerializer().serializeToString(svgElement);\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n\n      const scale = 2;\n      const svgWidth = svgElement.clientWidth || svgElement.viewBox.baseVal.width || 100;\n      const svgHeight = svgElement.clientHeight || svgElement.viewBox.baseVal.height || 100;\n\n      canvas.width = svgWidth * scale;\n      canvas.height = svgHeight * scale;\n      ctx.scale(scale, scale);\n\n      img.onload = () => {\n        try {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.drawImage(img, 0, 0, svgWidth, svgHeight);\n          canvas.toBlob(blob => {\n            resolve(blob);\n          }, 'image/png', 1.0);\n        } catch (err) {\n          reject(err);\n        }\n      };\n\n      img.onerror = reject;\n      const svgDataUrl = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svgString)}`;\n      img.src = svgDataUrl;\n    });\n  }\n\n  controlsShow(show) {\n    this.controls.style.display = show ? '' : 'none';\n    this.options.showControls = show;\n    this.adjustLayout();\n  }\n\n  titleShow(show) {\n    this.title.style.display = show ? '' : 'none';\n    this.options.titleShow = show;\n    this.adjustLayout();\n  }\n\n  titleSetContent(content) {\n    this.title.innerHTML = content;\n    this.options.titleContent = content;\n  }\n\n  titleGetContent() {\n    return this.title.innerHTML;\n  }\n\n  getMarkdownSource() {\n    return this.input.value;\n  }\n\n  getHTMLSource() {\n    return this.output.querySelector('div[contenteditable=\"true\"]').innerHTML;\n  }\n\n  // Standalone function to toggle between Markdown preview and split view\n  toggleView() {\n    const editor = window.editor;\n    if (editor.currentView === 'src') {\n      editor.setView('split');\n    } else if (editor.currentView === 'split') {\n      editor.setView('html');\n    } else\n      editor.setView('src')\n\n    console.log(editor.currentView)\n  }\n\n  /**\n   * Creates an iframe that fills the entire parent element and injects provided HTML content.\n   * @param {HTMLElement} parentElement - The parent element to contain the iframe.\n   * @param {string} htmlContent - The HTML content to inject into the iframe.\n   */\n  insertContentInIframe(parentElement, htmlContent) {\n    // Create an iframe element\n    const iframe = document.createElement('iframe');\n\n    // Style the iframe to fill the parent completely\n    iframe.style.width = '100%';\n    iframe.style.height = '100%';\n    iframe.style.border = 'none';\n    iframe.style.display = 'block';\n\n    //iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin');\n    // Append the iframe to the parent element\n    parentElement.innerHTML = '';\n    parentElement.appendChild(iframe);\n\n    // Access the iframe's document and write the HTML content into it\n    const iframeDoc = iframe.contentWindow.document;\n    iframeDoc.open();\n    iframeDoc.write(htmlContent);\n    iframeDoc.close();\n    this.output_iframe = iframe\n    this.output_ifraome_content = htmlContent;\n  }\n  // this function takes input as html and renders it in an iframe in the output div\n  // it write to the outputDiv that is a member of this object\n  renderHTML(src) {\n    const htmlContent = src;\n    const outputDiv = this.output;\n    this.insertContentInIframe(outputDiv, htmlContent);\n  }\n\n  renderOutput() {\n    switch (this.inputContentType) {\n      case 'html':\n        this.renderHTML(this.input.value)\n        break;\n      case 'reveal':\n        this.renderHTML(this.makeRevealJSFullPage(this.input.value))\n        break;\n      case 'csv': // comma separated\n      case 'tsv': // tab separated\n      case 'semisv': // semicolon separated\n      case 'ssv': //space separated\n        // take the input and treat it as csv / tsv and convert it to markdown to render on the fly\n        const data = this.getContent();\n        // delimiter can be commma, tab, space, or semi-colon\n        let delimiter = \",\";\n        const delims = { \"tsv\": \",\", \"semisv\": \";\", \"ssv\": \" \" };\n        if (this.inputContentType in delims)\n          delimiter = delims[this.inputContentType];\n        const markdownTable = this.csvOrTsvToMarkdownTable(data, delimiter);\n        this.renderMarkdown(markdownTable);\n        break;\n      case 'md':\n        this.renderMarkdown();\n        break;\n      default:\n        this.renderMarkdown();\n        console.log(\"Unsupported content type: \", this.inputContentType);\n    }\n  }\n\n  async copySource() {\n    const copyButton = this.controls.querySelector('.copy-src-button');\n    copyButton.textContent = 'Copying...';\n\n    try {\n      const markdownText = this.getMarkdownSource();\n\n      try {\n        await navigator.clipboard.writeText(markdownText);\n      } catch (modernErr) {\n        const textarea = document.createElement('textarea');\n        textarea.value = markdownText;\n        textarea.style.position = 'fixed';\n        textarea.style.opacity = '0';\n        document.body.appendChild(textarea);\n        textarea.select();\n\n        //const successful = document.execCommand('copy');\n        document.body.removeChild(textarea);\n\n        //if (!successful) throw new Error('Fallback copy failed');\n      }\n\n      copyButton.textContent = 'Copied!';\n    } catch (err) {\n      console.error('Copy Markdown failed:', err);\n      copyButton.textContent = 'Copy failed';\n    }\n\n    setTimeout(() => {\n      copyButton.textContent = 'Copy Source';\n    }, 2000);\n  }\n\n  async copyHTML() {\n    const copyButton = this.controls.querySelector('.copy-html-button');\n    copyButton.textContent = 'Copying...';\n\n    try {\n      const contentDiv = this.output.querySelector('div[contenteditable=\"true\"]');\n      if (!contentDiv) {\n        throw new Error('Content div not found');\n      }\n\n      const clone = contentDiv.cloneNode(true);\n\n      // Process code blocks\n      clone.querySelectorAll('pre code').forEach(block => {\n        const formattedCode = block.innerHTML;\n\n        const table = document.createElement('table');\n        table.style.width = '100%';\n        table.style.borderCollapse = 'collapse';\n        table.style.border = 'none';\n\n        const tr = document.createElement('tr');\n        const td = document.createElement('td');\n        td.style.backgroundColor = '#f7f7f7';\n        td.style.padding = '12px';\n        td.style.fontFamily = 'Consolas, Monaco, \"Courier New\", monospace';\n        td.style.whiteSpace = 'pre';\n        td.style.border = 'none';\n\n        td.innerHTML = formattedCode.trim();\n\n        tr.appendChild(td);\n        table.appendChild(tr);\n        block.parentNode.replaceWith(table);\n      });\n\n      // Convert SVG elements to PNG\n      const svgElements = clone.querySelectorAll('svg');\n      for (const svg of svgElements) {\n        try {\n          const pngBlob = await this.svgToPng(svg);\n          const dataUrl = await new Promise(resolve => {\n            const reader = new FileReader();\n            reader.onloadend = () => resolve(reader.result);\n            reader.readAsDataURL(pngBlob);\n          });\n\n          const img = document.createElement('img');\n          img.src = dataUrl;\n          img.width = svg.clientWidth || svg.viewBox.baseVal.width || 100;\n          img.height = svg.clientHeight || svg.viewBox.baseVal.height || 100;\n          img.setAttribute('v:shapes', 'image' + Math.random().toString(36).substr(2, 9));\n          img.style.width = img.width + 'px';\n          img.style.height = img.height + 'px';\n          img.alt = \"Converted diagram\";\n          svg.parentNode.replaceChild(img, svg);\n        } catch (error) {\n          console.error('Failed to convert SVG:', error);\n        }\n      }\n\n      const htmlContent = `\n          <html xmlns:v=\"urn:schemas-microsoft-com:vml\"\n                xmlns:o=\"urn:schemas-microsoft-com:office:office\"\n                xmlns:w=\"urn:schemas-microsoft-com:office:word\">\n            <head>\n              <meta charset=\"utf-8\">\n              <style>\n                table { border-collapse: collapse; width: 100%; margin-bottom: 1em; }\n                th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }\n                th { background-color: #f0f0f0; font-weight: bold; }\n\n                /* Code block styling */\n                .hljs { display: block; overflow-x: auto; padding: 1em; }\n                .hljs-keyword { color: #0033B3; }\n                .hljs-string { color: #067D17; }\n                .hljs-comment { color: #8C8C8C; }\n                .hljs-function { color: #00627A; }\n                .hljs-number { color: #1750EB; }\n                .hljs-operator { color: #687687; }\n                .hljs-punctuation { color: #000000; }\n\n                /* Word-specific image handling */\n                img { display: block; max-width: none; }\n              </style>\n            </head>\n            <body>\n              ${clone.innerHTML}\n            </body>\n          </html>`;\n\n      const platform = this.getPlatform();\n\n      if (platform === 'macos') {\n        // macOS approach (previously working version)\n        try {\n          await navigator.clipboard.write([\n            new ClipboardItem({\n              'text/html': new Blob([htmlContent], { type: 'text/html' }),\n              'text/plain': new Blob([clone.innerText], { type: 'text/plain' })\n            })\n          ]);\n        } catch (modernErr) {\n          // Safari fallback\n          if (!this.copyToClipboard(htmlContent)) {\n            throw new Error('Fallback copy failed');\n          }\n        }\n      } else {\n        // Windows/Linux approach\n        const tempDiv = document.createElement('div');\n        tempDiv.style.position = 'fixed';\n        tempDiv.style.left = '-9999px';\n        tempDiv.style.top = '0';\n        tempDiv.innerHTML = htmlContent;\n        document.body.appendChild(tempDiv);\n\n        try {\n          await navigator.clipboard.write([\n            new ClipboardItem({\n              'text/html': new Blob([htmlContent], { type: 'text/html' }),\n              'text/plain': new Blob([clone.innerText], { type: 'text/plain' })\n            })\n          ]);\n        } catch (modernErr) {\n          const selection = window.getSelection();\n          const range = document.createRange();\n          range.selectNodeContents(tempDiv);\n          selection.removeAllRanges();\n          selection.addRange(range);\n\n          const successful = document.execCommand('copy');\n          if (!successful) {\n            throw new Error('Fallback copy failed');\n          }\n        } finally {\n          if (tempDiv && tempDiv.parentNode) {\n            document.body.removeChild(tempDiv);\n          }\n        }\n      }\n\n      copyButton.textContent = 'Copied!';\n    } catch (err) {\n      console.error('Copy HTML failed:', err);\n      copyButton.textContent = 'Copy failed';\n    }\n\n    setTimeout(() => {\n      copyButton.textContent = 'Copy Formatted';\n    }, 2000);\n  }\n\n  copyToClipboard(string) {\n    let textarea;\n    let result;\n\n    try {\n      textarea = document.createElement('textarea');\n      textarea.setAttribute('readonly', true);\n      textarea.setAttribute('contenteditable', true);\n      textarea.style.position = 'fixed';\n      textarea.style.left = '0';\n      textarea.style.top = '0';\n      textarea.style.opacity = '0';\n      textarea.value = string;\n\n      document.body.appendChild(textarea);\n\n      textarea.focus();\n      textarea.select();\n\n      const range = document.createRange();\n      range.selectNodeContents(textarea);\n\n      const sel = window.getSelection();\n      sel.removeAllRanges();\n      sel.addRange(range);\n\n      textarea.setSelectionRange(0, textarea.value.length);\n      result = document.execCommand('copy');\n    } catch (err) {\n      console.error(err);\n      result = null;\n    } finally {\n      if (textarea && textarea.parentNode) {\n        document.body.removeChild(textarea);\n      }\n    }\n\n    // manual copy fallback using prompt\n    if (!result) {\n      const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n      const copyHotkey = isMac ? '⌘C' : 'CTRL+C';\n      result = prompt(`Press ${copyHotkey}`, string);\n      if (!result) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  getPlatform() {\n    const platform = navigator.platform.toLowerCase();\n    const userAgent = navigator.userAgent.toLowerCase();\n\n    if (platform.includes('mac') || userAgent.includes('mac')) {\n      return 'macos';\n    } else if (userAgent.includes('windows')) {\n      return 'windows';\n    } else if (userAgent.includes('linux')) {\n      return 'linux';\n    }\n    return 'unknown';\n  }\n\n  // Make a complete HTML page from a div (or any html snippet) with optional editability\n  makeHTMLPageFromDiv(inputDivHTML, editable = false) {\n    let editableAttr = editable ? 'contenteditable=\"true\"' : '';\n    let s =\n      `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Markdown Viewer with Graphics Support</title>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n  <xscripx src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></xscripx>\n  <xscripx src=\"https://unpkg.com/mermaid/dist/mermaid.min.js\"></xscripx>\n  <style>\n      body {\n          font-family: Arial, sans-serif;\n          box-sizing: border-box;\n          padding: 20px;\n      }\n      .squibview-output {\n          width: 50%;\n          margin: auto;\n      }\n      pre {\n          background-color: #f4f4f4;\n          padding: 10px;\n          border-radius: 5px;\n          overflow-x: auto;\n      }\n      table {\n          width: 100%;\n          border-collapse: collapse;\n          margin: 20px 0;\n      }\n      table, th, td {\n          border: 1px solid black;\n      }\n      th, td {\n          padding: 8px;\n          text-align: left;\n      }\n  </style>\n</head>\n<body ${editableAttr}>\n  ${inputDivHTML}\n</body>\n</html>`;\n    // now we need to remove the temp-script tag with the script in it.\n    // we do this with a regex search/replace\n    s = s.replaceAll(\"xscripx\", \"script\");\n    console.log(editableAttr);\n    return s;\n  }\n\n  makeRevealJSFullPage(markdown, title = \"Slide Presentation\") {\n    return `<!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>${title}</title>\n      <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/reveal.js/dist/reveal.css\">\n      <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/reveal.js/dist/theme/black.css\">\n      <script src=\"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\"></script>\n  </head>\n  <body>\n      <div class=\"reveal\" contenteditable=\"true\">\n          <div class=\"slides\">\n              ${markdown.split('---').map(slide => `<section data-markdown><script type=\"text/template\">${slide.trim()}</script></section>`).join('\\n')}\n          </div>\n      </div>\n      <script src=\"https://cdn.jsdelivr.net/npm/reveal.js/dist/reveal.js\"></script>\n      <script src=\"https://cdn.jsdelivr.net/npm/reveal.js/plugin/markdown/markdown.js\"></script>\n      <script>\n          Reveal.initialize({\n              plugins: [ RevealMarkdown ]\n          });\n          \n          // Ensure Mermaid diagrams initialize correctly\n          document.addEventListener('DOMContentLoaded', () => {\n              mermaid.initialize({ startOnLoad: true , securityLevel: 'loose', theme: 'dark' });\n              document.querySelectorAll('.mermaid').forEach(el => {\n                  el.innerHTML = el.textContent;\n                  mermaid.init(undefined, el);\n              });\n          });\n      </script>\n  </body>\n  </html>`;\n  }\n\n  csvOrTsvToMarkdownTable(input, delimiter = ',') {\n    // Parse CSV/TSV content\n    const parsedData = Papa.parse(input, {\n      delimiter,\n      skipEmptyLines: true\n    });\n\n    const rows = parsedData.data;\n\n    if (rows.length === 0) return 'No data found.';\n\n    // Markdown table header\n    const header = `| ${rows[0].join(' | ')} |`;\n    const separator = `| ${rows[0].map(() => '---').join(' | ')} |`;\n    const tableRows = rows.slice(1).map(row => `| ${row.join(' | ')} |`).join('\\n');\n\n    return `${header}\\n${separator}\\n${tableRows}`;\n  }\n\n\n}// end of class SquibView\n\nexport default SquibView;\n"],"names":["SquibView","_createClass","element","options","arguments","length","undefined","_classCallCheck","this","_objectSpread","defaultOptions","container","document","querySelector","Error","revisions","buffer","index","initializeLibraries","createStructure","initializeEventHandlers","initializeResizeObserver","initialContent","setContent","inputContentType","setView","initialView","key","value","mermaid","initialize","startOnLoad","securityLevel","theme","errorCallback","error","console","warn","init","md","window","markdownit","html","linkify","typographer","highlight","str","lang","hljs","getLanguage","language","__","defaultFence","renderer","rules","fence","tokens","idx","env","self","renderToken","token","info","trim","content","classList","add","baseClass","innerHTML","concat","titleShow","titleContent","showControls","title","controls","editor","input","output","_this","querySelectorAll","forEach","button","addEventListener","dataset","view","copySource","copyHTML","_this2","ResizeObserver","entries","_step","_iterator","_createForOfIteratorHelper","s","n","done","target","adjustLayout","err","e","f","observe","containerRect","getBoundingClientRect","titleHeight","offsetHeight","controlsHeight","availableHeight","height","availableWidth","width","style","currentView","contentType","saveRevision","push","slice","renderOutput","lastChange","replace","_renderMarkdown","_asyncToGenerator","_regeneratorRuntime","mark","_callee","markdown","contentDiv","images","_iterator2","_step2","_loop","wrap","_context2","prev","next","render","img","canvas","ctx","tempImg","_context","createElement","getContext","Image","crossOrigin","Promise","resolve","reject","onload","naturalWidth","naturalHeight","drawImage","dataUrl","toDataURL","src","onerror","t0","stop","delegateYield","t1","finish","_x","apply","newMarkdown","getMarkdownSource","offset","split","map","line","headingMatch","match","currentHeadingLevel","newHeadingLevel","Math","min","max","repeat","substring","join","markdownAdjustHeadings","btn","toggle","copyMDButton","copyHTMLButton","remove","_copyContent","_callee3","copyButton","clone","svgElements","_iterator3","_step3","_loop2","imgElements","clipData","_this3","_context5","textContent","cloneNode","block","formattedCode","table","borderCollapse","border","tr","td","backgroundColor","padding","fontFamily","whiteSpace","appendChild","parentNode","replaceWith","svg","pngBlob","_context4","svgToPng","sent","reader","FileReader","onloadend","result","readAsDataURL","clientWidth","viewBox","baseVal","clientHeight","setAttribute","random","toString","substr","alt","replaceChild","all","_ref","_callee2","newImg","_context3","log","offsetWidth","cssText","_x2","ClipboardItem","Blob","type","innerText","navigator","clipboard","write","t2","setTimeout","svgElement","svgString","XMLSerializer","serializeToString","svgWidth","svgHeight","scale","clearRect","toBlob","blob","svgDataUrl","encodeURIComponent","show","display","parentElement","htmlContent","iframe","iframeDoc","contentWindow","open","close","output_iframe","output_ifraome_content","outputDiv","insertContentInIframe","renderHTML","makeRevealJSFullPage","data","getContent","delimiter","delims","tsv","semisv","ssv","markdownTable","csvOrTsvToMarkdownTable","renderMarkdown","_copySource","_callee4","markdownText","textarea","_context6","writeText","position","opacity","body","select","removeChild","_copyHTML","_callee5","_iterator4","_step4","_loop3","tempDiv","selection","range","_this4","_context8","_context7","getPlatform","copyToClipboard","left","top","t3","getSelection","createRange","selectNodeContents","removeAllRanges","addRange","execCommand","t4","string","focus","sel","setSelectionRange","isMac","platform","toUpperCase","indexOf","prompt","toLowerCase","userAgent","includes","inputDivHTML","editableAttr","replaceAll","slide","rows","Papa","parse","skipEmptyLines","header","separator","tableRows","row","_defineProperty","version","url"],"mappings":"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"}