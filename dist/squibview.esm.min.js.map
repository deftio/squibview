{"version":3,"file":"squibview.esm.min.js","sources":["../src/squibview.js"],"sourcesContent":["/* SquibView a live md/html/etc Editor/renderer with copy support\n supports markdown, html, and split view\n supports copying of formatted html and markdown\n supports copying of images as data urls\n supports copying of svg as png\n supports copying of tables as formatted tables\n supports copying of code blocks as formatted tables\n by deftio (c) 2024\n*/\n\nclass SquibView {\n    static defaultOptions = {\n      initialContent: '',\n      showControls: true,\n      titleShow: false,        \n      titleContent: '',\n      initialView: 'split',\n      baseClass: 'squibview'\n    };\n\n    static version = {\n      version: \"0.0.26\",\n      url : \"https://github.com/deftio/squibview\"\n    };\n\n    constructor(element, options = {}) {\n      this.options = { ...SquibView.defaultOptions, ...options };\n      this.container = typeof element === 'string' ? document.querySelector(element) : element;\n\n      if (!this.container) {\n        throw new Error('Container element not found');\n      }\n\n      this.initializeLibraries();\n      this.createStructure();\n      this.initializeEventHandlers();\n      this.setContent(this.options.initialContent);\n      this.setView(this.options.initialView);\n      this.initializeResizeObserver();\n    }\n\n    initializeLibraries() {\n      mermaid.initialize({\n        startOnLoad: false,\n        securityLevel: 'loose',\n        theme: 'default',\n        errorCallback: function (error) {\n          console.warn(\"Mermaid error:\", error);\n          return \"<div class='mermaid-error'></div>\"; // Replace with custom message\n        }\n      });\n      mermaid.init(undefined, \".mermaid\"); \n      this.md = window.markdownit({\n        html: true,\n        linkify: true,\n        typographer: true,\n        highlight: (str, lang) => {\n          if (lang && hljs.getLanguage(lang)) {\n            try {\n              return hljs.highlight(str, { language: lang }).value;\n            } catch (__) { }\n          }\n          return '';\n        }\n      });\n\n      const defaultFence = this.md.renderer.rules.fence ||\n        ((tokens, idx, options, env, self) => self.renderToken(tokens, idx, options));\n\n      this.md.renderer.rules.fence = (tokens, idx, options, env, self) => {\n        const token = tokens[idx];\n        const info = token.info.trim();\n        if (info === 'mermaid') {\n          return '<div class=\"mermaid\">' + token.content + '</div>';\n        }\n        if (info === 'svg') {\n          return token.content;\n        }\n        return defaultFence(tokens, idx, options, env, self);\n      };\n    }\n\n    createStructure() {\n      this.container.classList.add(this.options.baseClass);\n\n      this.container.innerHTML = `\n        <div class=\"${this.options.baseClass}-title\" ${!this.options.titleShow ? 'style=\"display:none\"' : ''}>\n          ${this.options.titleContent}\n        </div>\n        <div class=\"${this.options.baseClass}-controls\" ${!this.options.showControls ? 'style=\"display:none\"' : ''}>\n          <button data-view='src'>Markdown</button>\n          <button data-view=\"html\">Rendered</button>\n          <button data-view=\"split\">Split</button>\n          <button class=\"copy-src-button\">Copy MD</button>\n          <button class=\"copy-html-button\">Copy Formatted</button>\n        </div>\n        <div class=\"${this.options.baseClass}-editor\">\n          <textarea class=\"${this.options.baseClass}-input\"></textarea>\n          <div class=\"${this.options.baseClass}-output\"></div>\n        </div>\n      `;\n\n      this.title = this.container.querySelector(`.${this.options.baseClass}-title`);\n      this.controls = this.container.querySelector(`.${this.options.baseClass}-controls`);\n      this.editor = this.container.querySelector(`.${this.options.baseClass}-editor`);\n      this.input = this.container.querySelector(`.${this.options.baseClass}-input`);\n      this.output = this.container.querySelector(`.${this.options.baseClass}-output`);\n    }\n\n    initializeEventHandlers() {\n      this.controls.querySelectorAll('button[data-view]').forEach(button => {\n        button.addEventListener('click', () => this.setView(button.dataset.view));\n      });\n\n      this.controls.querySelector('.copy-src-button').addEventListener('click', () => this.copySource());\n      this.controls.querySelector('.copy-html-button').addEventListener('click', () => this.copyHTML());\n\n      //onchange() for input source\n      this.input.addEventListener('input', () => { this.renderOutput(); });\n    }\n    initializeResizeObserver() {\n      const resizeObserver = new ResizeObserver(entries => {\n        for (let entry of entries) {\n          if (entry.target === this.container) {\n            this.adjustLayout();\n          }\n        }\n      });\n      resizeObserver.observe(this.container);\n    }\n\n    adjustLayout() {\n      const containerRect = this.container.getBoundingClientRect();\n      const titleHeight = this.title.offsetHeight;\n      const controlsHeight = this.controls.offsetHeight;\n\n      const availableHeight = containerRect.height - titleHeight - controlsHeight;\n      const availableWidth = containerRect.width;\n      this.editor.style.height = `${availableHeight}px`;\n      this.editor.style.width = `${availableWidth}px`;\n\n      if (this.currentView === 'split') {\n        this.input.style.width = '50%';\n        this.output.style.width = '50%';\n      } else if (this.currentView === 'src') {\n        this.input.style.width = '100%';\n      } else if (this.currentView === 'html') {\n        this.output.style.width = '100%';\n      }\n    }\n\n    setContent(content, contentType = 'md') {\n      this.input.value = content;\n      this.inputContentType = contentType;\n      this.renderOutput();\n    }\n\n    getContent() {\n      return this.input.value;\n    }\n\n    cleanMarkdown(md) {\n      return md.replace(/^```markdown\\s+/, '').replace(/```$/, '');\n    }\n\n    async renderMarkdown() {\n      const html = this.md.render(this.input.value);\n      this.output.innerHTML = \"<div contenteditable='true'>\" + html + \"</div>\";\n\n      // Convert all images to data URLs immediately after rendering\n      const contentDiv = this.output.querySelector('div[contenteditable=\"true\"]');\n      const images = contentDiv.querySelectorAll('img');\n\n      // render images to data urls\n\n      for (const img of images) {\n        try {\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d');\n\n          // Create new image and wait for it to load\n          const tempImg = new Image();\n          tempImg.crossOrigin = 'anonymous';\n\n          await new Promise((resolve, reject) => {\n            tempImg.onload = () => {\n              // Set canvas size to match image\n              canvas.width = tempImg.naturalWidth;\n              canvas.height = tempImg.naturalHeight;\n\n              // Draw image to canvas\n              ctx.drawImage(tempImg, 0, 0);\n\n              // Convert to data URL\n              const dataUrl = canvas.toDataURL('image/png', 1.0);\n\n              // Update original image\n              img.src = dataUrl;\n              resolve();\n            };\n            tempImg.onerror = reject;\n            tempImg.src = img.src;\n          });\n        } catch (error) {\n          console.error('Failed to convert image:', error);\n        }\n\n      }\n\n      // end of images to data urls\n\n      // Initialize mermaid diagrams after all images are processed\n      mermaid.init(undefined, this.output.querySelectorAll('.mermaid'));\n    } // end of renderMarkdown\n\n    // todo rename sourceRemoveAllHR ()  ==> handled markdown or html via replace (---) or (<hr>, <hr/>) respectively\n    markdownRemoveAllHR  () {\n      if (this.inputContentType === 'md') {\n        const markdown = this.getMarkdownSource();\n        const newMarkdown = markdown.replace(/---/g, '');\n        this.setContent(newMarkdown);\n      }\n    }\n\n    setView(view) {\n      this.currentView = view;\n\n      this.controls.querySelectorAll('button[data-view]').forEach(btn => {\n        btn.classList.toggle('active', btn.dataset.view === view);\n      });\n\n      const copyMDButton = this.controls.querySelector('.copy-src-button');\n      const copyHTMLButton = this.controls.querySelector('.copy-html-button');\n\n      if (view === 'src') {\n        this.input.classList.remove('squibview-hidden');\n        this.output.classList.add('squibview-hidden');\n        this.input.style.width = '100%';\n        copyMDButton.classList.remove('squibview-hidden');\n        copyHTMLButton.classList.add('squibview-hidden');\n      } else if (view === 'html') {\n        this.input.classList.add('squibview-hidden');\n        this.output.classList.remove('squibview-hidden');\n        this.output.style.width = '100%';\n        copyMDButton.classList.add('squibview-hidden');\n        copyHTMLButton.classList.remove('squibview-hidden');\n      } else { // view == 'split'\n        this.input.classList.remove('squibview-hidden');\n        this.output.classList.remove('squibview-hidden');\n        this.input.style.width = '50%';\n        this.output.style.width = '50%';\n        copyMDButton.classList.remove('squibview-hidden');\n        copyHTMLButton.classList.remove('squibview-hidden');\n      }\n\n      this.adjustLayout();\n    }\n\n    async copyContent() {\n      const copyButton = this.controls.querySelector('.copy-button');\n      copyButton.textContent = 'Copying...';\n\n      try {\n        const contentDiv = this.output.querySelector('div[contenteditable=\"true\"]');\n        if (!contentDiv) {\n          throw new Error('Content div not found');\n        }\n\n        const clone = contentDiv.cloneNode(true);\n\n        clone.querySelectorAll('pre code').forEach(block => {\n          const formattedCode = block.innerHTML;\n\n          const table = document.createElement('table');\n          table.style.width = '100%';\n          table.style.borderCollapse = 'collapse';\n          table.style.border = 'none';\n\n          const tr = document.createElement('tr');\n          const td = document.createElement('td');\n          td.style.backgroundColor = '#f7f7f7';\n          td.style.padding = '12px';\n          td.style.fontFamily = 'Consolas, Monaco, \"Courier New\", monospace';\n          td.style.whiteSpace = 'pre';\n          td.style.border = 'none';\n\n          td.innerHTML = formattedCode.trim();\n\n          tr.appendChild(td);\n          table.appendChild(tr);\n          block.parentNode.replaceWith(table);\n        });\n\n        const svgElements = clone.querySelectorAll('svg');\n        for (const svg of svgElements) {\n          try {\n            const pngBlob = await this.svgToPng(svg);\n            const dataUrl = await new Promise(resolve => {\n              const reader = new FileReader();\n              reader.onloadend = () => resolve(reader.result);\n              reader.readAsDataURL(pngBlob);\n            });\n\n            const img = document.createElement('img');\n            img.src = dataUrl;\n            img.width = svg.clientWidth || svg.viewBox.baseVal.width || 100;\n            img.height = svg.clientHeight || svg.viewBox.baseVal.height || 100;\n            img.setAttribute('v:shapes', 'image' + Math.random().toString(36).substr(2, 9));\n            img.style.width = img.width + 'px';\n            img.style.height = img.height + 'px';\n            img.alt = \"Converted diagram\";\n            svg.parentNode.replaceChild(img, svg);\n          } catch (error) {\n            console.error('Failed to convert SVG:', error);\n          }\n        }\n\n\n        // Convert all images to data URLs\n        const imgElements = clone.querySelectorAll('img');\n        await Promise.all(imgElements.map(async img => {\n          console.log('Converting image:', img.src);\n\n          // Create canvas\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d');\n\n          // Create new image and wait for it to load completely\n          const tempImg = new Image();\n          tempImg.crossOrigin = 'anonymous';\n\n          try {\n            await new Promise((resolve, reject) => {\n              tempImg.onload = resolve;\n              tempImg.onerror = reject;\n              tempImg.src = img.src;\n            });\n\n            // Set dimensions\n            canvas.width = tempImg.offsetWidth || img.offsetWidth || 200;\n            canvas.height = tempImg.offsetHeight || img.offsetHeight || 200;\n\n            // Draw and convert\n            ctx.drawImage(tempImg, 0, 0);\n            const dataUrl = canvas.toDataURL('image/png', 1.0);\n\n            // Create and wait for new image with data URL\n            const newImg = new Image();\n            await new Promise((resolve, reject) => {\n              newImg.onload = () => {\n                newImg.alt = img.alt || 'Converted image';\n                newImg.width = canvas.width;\n                newImg.height = canvas.height;\n                newImg.style.cssText = img.style.cssText;\n                // Force image to be treated as embedded\n                newImg.setAttribute('data-embedded', 'true');\n                // Replace the old image\n                img.parentNode.replaceChild(newImg, img);\n                console.log('Successfully converted image to data URL');\n                resolve();\n              };\n              newImg.onerror = reject;\n              newImg.src = dataUrl;\n            });\n          } catch (error) {\n            console.error('Error converting image:', error, img.src);\n            // Don't rethrow - we want to continue with other images\n          }\n        }));\n\n\n        const clipData = new ClipboardItem({\n          'text/html': new Blob([`\n            <html xmlns:v=\"urn:schemas-microsoft-com:vml\"\n                  xmlns:o=\"urn:schemas-microsoft-com:office:office\"\n                  xmlns:w=\"urn:schemas-microsoft-com:office:word\">\n              <head>\n                <meta charset=\"utf-8\">\n                <style>\n                  table { border-collapse: collapse; width: 100%; margin-bottom: 1em; }\n                  th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }\n                  th { background-color: #f0f0f0; font-weight: bold; }\n\n                  /* Code block styling */\n                  .hljs { display: block; overflow-x: auto; padding: 1em; }\n                  .hljs-keyword { color: #0033B3; }\n                  .hljs-string { color: #067D17; }\n                  .hljs-comment { color: #8C8C8C; }\n                  .hljs-function { color: #00627A; }\n                  .hljs-number { color: #1750EB; }\n                  .hljs-operator { color: #687687; }\n                  .hljs-punctuation { color: #000000; }\n\n                  /* Word-specific image handling */\n                  img { display: block; max-width: none; }\n                </style>\n              </head>\n              <body>\n                ${clone.innerHTML}\n              </body>\n            </html>\n          `], { type: 'text/html' }),\n          'text/plain': new Blob([clone.innerText], { type: 'text/plain' })\n        });\n\n        await navigator.clipboard.write([clipData]);\n        copyButton.textContent = 'Copied!';\n      } catch (err) {\n        console.error('Copy failed:', err);\n        copyButton.textContent = 'Copy failed';\n      }\n\n      setTimeout(() => {\n        copyButton.textContent = 'Copy';\n      }, 2000);\n    }\n\n    svgToPng(svgElement) {\n      return new Promise((resolve, reject) => {\n        const svgString = new XMLSerializer().serializeToString(svgElement);\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        const img = new Image();\n\n        const scale = 2;\n        const svgWidth = svgElement.clientWidth || svgElement.viewBox.baseVal.width || 100;\n        const svgHeight = svgElement.clientHeight || svgElement.viewBox.baseVal.height || 100;\n\n        canvas.width = svgWidth * scale;\n        canvas.height = svgHeight * scale;\n        ctx.scale(scale, scale);\n\n        img.onload = () => {\n          try {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.drawImage(img, 0, 0, svgWidth, svgHeight);\n            canvas.toBlob(blob => {\n              resolve(blob);\n            }, 'image/png', 1.0);\n          } catch (err) {\n            reject(err);\n          }\n        };\n\n        img.onerror = reject;\n        const svgDataUrl = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svgString)}`;\n        img.src = svgDataUrl;\n      });\n    }\n\n    controlsShow(show) {\n      this.controls.style.display = show ? '' : 'none';\n      this.options.showControls = show;\n      this.adjustLayout();\n    }\n\n    titleShow(show) {\n      this.title.style.display = show ? '' : 'none';\n      this.options.titleShow = show;\n      this.adjustLayout();\n    }\n\n    titleSetContent(content) {\n      this.title.innerHTML = content;\n      this.options.titleContent = content;\n    }\n\n    titleGetContent() {\n      return this.title.innerHTML;\n    }\n\n    getMarkdownSource() {\n      return this.input.value;\n    }\n\n    getHTMLSource() {\n      return this.output.querySelector('div[contenteditable=\"true\"]').innerHTML;\n    }\n\n    // Standalone function to toggle between Markdown preview and split view\n    toggleView() {\n      const editor = window.editor;\n      if (editor.currentView === 'src') {\n        editor.setView('split');\n      } else if (editor.currentView === 'split') {\n        editor.setView('html');\n      } else\n        editor.setView('src')\n\n      console.log(editor.currentView)\n    }\n\n    /**\n     * Creates an iframe that fills the entire parent element and injects provided HTML content.\n     * @param {HTMLElement} parentElement - The parent element to contain the iframe.\n     * @param {string} htmlContent - The HTML content to inject into the iframe.\n     */\n    insertContentInIframe(parentElement, htmlContent) {\n      // Create an iframe element\n      const iframe = document.createElement('iframe');\n\n      // Style the iframe to fill the parent completely\n      iframe.style.width = '100%';\n      iframe.style.height = '100%';\n      iframe.style.border = 'none';\n      iframe.style.display = 'block';\n\n      //iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin');\n      // Append the iframe to the parent element\n      parentElement.innerHTML = '';\n      parentElement.appendChild(iframe);\n\n      // Access the iframe's document and write the HTML content into it\n      const iframeDoc = iframe.contentWindow.document;\n      iframeDoc.open();\n      iframeDoc.write(htmlContent);\n      iframeDoc.close();\n      this.output_iframe = iframe\n      this.output_ifraome_content = htmlContent;\n    }\n    // this function takes input as html and renders it in an iframe in the output div\n    // it write to the outputDiv that is a member of this object\n    renderHTML(src) {\n      const htmlContent = src;\n      const outputDiv = this.output;\n      this.insertContentInIframe(outputDiv, htmlContent);\n    }\n\n    renderOutput() {\n      switch( this.inputContentType) {\n        case 'html':\n          this.renderHTML(this.input.value)\n          break;\n        case 'reveal':\n          this.renderHTML(this.makeRevealJSFullPage(this.input.value))\n          break;\n        case 'md':\n            this.renderMarkdown();\n          break;\n        default:\n            this.renderMarkdown();\n            console.log(\"Unsupported content type: \", this.inputContentType);\n      } \n    }\n    \n    async copySource() {\n      const copyButton = this.controls.querySelector('.copy-src-button');\n      copyButton.textContent = 'Copying...';\n\n      try {\n        const markdownText = this.getMarkdownSource();\n\n        try {\n          await navigator.clipboard.writeText(markdownText);\n        } catch (modernErr) {\n          const textarea = document.createElement('textarea');\n          textarea.value = markdownText;\n          textarea.style.position = 'fixed';\n          textarea.style.opacity = '0';\n          document.body.appendChild(textarea);\n          textarea.select();\n\n          //const successful = document.execCommand('copy');\n          document.body.removeChild(textarea);\n\n          //if (!successful) throw new Error('Fallback copy failed');\n        }\n\n        copyButton.textContent = 'Copied!';\n      } catch (err) {\n        console.error('Copy Markdown failed:', err);\n        copyButton.textContent = 'Copy failed';\n      }\n\n      setTimeout(() => {\n        copyButton.textContent = 'Copy MD';\n      }, 2000);\n    }\n\n    async copyHTML() {\n      const copyButton = this.controls.querySelector('.copy-html-button');\n      copyButton.textContent = 'Copying...';\n\n      try {\n        const contentDiv = this.output.querySelector('div[contenteditable=\"true\"]');\n        if (!contentDiv) {\n          throw new Error('Content div not found');\n        }\n\n        const clone = contentDiv.cloneNode(true);\n\n        // Process code blocks\n        clone.querySelectorAll('pre code').forEach(block => {\n          const formattedCode = block.innerHTML;\n\n          const table = document.createElement('table');\n          table.style.width = '100%';\n          table.style.borderCollapse = 'collapse';\n          table.style.border = 'none';\n\n          const tr = document.createElement('tr');\n          const td = document.createElement('td');\n          td.style.backgroundColor = '#f7f7f7';\n          td.style.padding = '12px';\n          td.style.fontFamily = 'Consolas, Monaco, \"Courier New\", monospace';\n          td.style.whiteSpace = 'pre';\n          td.style.border = 'none';\n\n          td.innerHTML = formattedCode.trim();\n\n          tr.appendChild(td);\n          table.appendChild(tr);\n          block.parentNode.replaceWith(table);\n        });\n\n        // Convert SVG elements to PNG\n        const svgElements = clone.querySelectorAll('svg');\n        for (const svg of svgElements) {\n          try {\n            const pngBlob = await this.svgToPng(svg);\n            const dataUrl = await new Promise(resolve => {\n              const reader = new FileReader();\n              reader.onloadend = () => resolve(reader.result);\n              reader.readAsDataURL(pngBlob);\n            });\n\n            const img = document.createElement('img');\n            img.src = dataUrl;\n            img.width = svg.clientWidth || svg.viewBox.baseVal.width || 100;\n            img.height = svg.clientHeight || svg.viewBox.baseVal.height || 100;\n            img.setAttribute('v:shapes', 'image' + Math.random().toString(36).substr(2, 9));\n            img.style.width = img.width + 'px';\n            img.style.height = img.height + 'px';\n            img.alt = \"Converted diagram\";\n            svg.parentNode.replaceChild(img, svg);\n          } catch (error) {\n            console.error('Failed to convert SVG:', error);\n          }\n        }\n\n        const htmlContent = `\n          <html xmlns:v=\"urn:schemas-microsoft-com:vml\"\n                xmlns:o=\"urn:schemas-microsoft-com:office:office\"\n                xmlns:w=\"urn:schemas-microsoft-com:office:word\">\n            <head>\n              <meta charset=\"utf-8\">\n              <style>\n                table { border-collapse: collapse; width: 100%; margin-bottom: 1em; }\n                th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }\n                th { background-color: #f0f0f0; font-weight: bold; }\n\n                /* Code block styling */\n                .hljs { display: block; overflow-x: auto; padding: 1em; }\n                .hljs-keyword { color: #0033B3; }\n                .hljs-string { color: #067D17; }\n                .hljs-comment { color: #8C8C8C; }\n                .hljs-function { color: #00627A; }\n                .hljs-number { color: #1750EB; }\n                .hljs-operator { color: #687687; }\n                .hljs-punctuation { color: #000000; }\n\n                /* Word-specific image handling */\n                img { display: block; max-width: none; }\n              </style>\n            </head>\n            <body>\n              ${clone.innerHTML}\n            </body>\n          </html>`;\n\n        const platform = this.getPlatform();\n\n        if (platform === 'macos') {\n          // macOS approach (previously working version)\n          try {\n            await navigator.clipboard.write([\n              new ClipboardItem({\n                'text/html': new Blob([htmlContent], { type: 'text/html' }),\n                'text/plain': new Blob([clone.innerText], { type: 'text/plain' })\n              })\n            ]);\n          } catch (modernErr) {\n            // Safari fallback\n            if (!this.copyToClipboard(htmlContent)) {\n              throw new Error('Fallback copy failed');\n            }\n          }\n        } else {\n          // Windows/Linux approach\n          const tempDiv = document.createElement('div');\n          tempDiv.style.position = 'fixed';\n          tempDiv.style.left = '-9999px';\n          tempDiv.style.top = '0';\n          tempDiv.innerHTML = htmlContent;\n          document.body.appendChild(tempDiv);\n\n          try {\n            await navigator.clipboard.write([\n              new ClipboardItem({\n                'text/html': new Blob([htmlContent], { type: 'text/html' }),\n                'text/plain': new Blob([clone.innerText], { type: 'text/plain' })\n              })\n            ]);\n          } catch (modernErr) {\n            const selection = window.getSelection();\n            const range = document.createRange();\n            range.selectNodeContents(tempDiv);\n            selection.removeAllRanges();\n            selection.addRange(range);\n\n            const successful = document.execCommand('copy');\n            if (!successful) {\n              throw new Error('Fallback copy failed');\n            }\n          } finally {\n            if (tempDiv && tempDiv.parentNode) {\n              document.body.removeChild(tempDiv);\n            }\n          }\n        }\n\n        copyButton.textContent = 'Copied!';\n      } catch (err) {\n        console.error('Copy HTML failed:', err);\n        copyButton.textContent = 'Copy failed';\n      }\n\n      setTimeout(() => {\n        copyButton.textContent = 'Copy Formatted';\n      }, 2000);\n    }\n\n    copyToClipboard(string) {\n      let textarea;\n      let result;\n\n      try {\n        textarea = document.createElement('textarea');\n        textarea.setAttribute('readonly', true);\n        textarea.setAttribute('contenteditable', true);\n        textarea.style.position = 'fixed';\n        textarea.style.left = '0';\n        textarea.style.top = '0';\n        textarea.style.opacity = '0';\n        textarea.value = string;\n\n        document.body.appendChild(textarea);\n\n        textarea.focus();\n        textarea.select();\n\n        const range = document.createRange();\n        range.selectNodeContents(textarea);\n\n        const sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(range);\n\n        textarea.setSelectionRange(0, textarea.value.length);\n        result = document.execCommand('copy');\n      } catch (err) {\n        console.error(err);\n        result = null;\n      } finally {\n        if (textarea && textarea.parentNode) {\n          document.body.removeChild(textarea);\n        }\n      }\n\n      // manual copy fallback using prompt\n      if (!result) {\n        const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n        const copyHotkey = isMac ? '⌘C' : 'CTRL+C';\n        result = prompt(`Press ${copyHotkey}`, string);\n        if (!result) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    getPlatform() {\n      const platform = navigator.platform.toLowerCase();\n      const userAgent = navigator.userAgent.toLowerCase();\n\n      if (platform.includes('mac') || userAgent.includes('mac')) {\n        return 'macos';\n      } else if (userAgent.includes('windows')) {\n        return 'windows';\n      } else if (userAgent.includes('linux')) {\n        return 'linux';\n      }\n      return 'unknown';\n    }\n\n    // Make a complete HTML page from a div (or any html snippet) with optional editability\n    makeHTMLPageFromDiv(inputDivHTML, editable = false) {\n      let editableAttr = editable ? 'contenteditable=\"true\"' : '';\n      let s =\n        `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Markdown Viewer with Graphics Support</title>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n  <xscripx src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></xscripx>\n  <xscripx src=\"https://unpkg.com/mermaid/dist/mermaid.min.js\"></xscripx>\n  <style>\n      body {\n          font-family: Arial, sans-serif;\n          /* margin: 20px; */\n          box-sizing: border-box;\n          padding: 20px;\n      }\n      .squibview-output {\n          width: 50%;\n          margin: auto;\n      }\n      pre {\n          background-color: #f4f4f4;\n          padding: 10px;\n          border-radius: 5px;\n          overflow-x: auto;\n      }\n      table {\n          width: 100%;\n          border-collapse: collapse;\n          margin: 20px 0;\n      }\n      table, th, td {\n          border: 1px solid black;\n      }\n      th, td {\n          padding: 8px;\n          text-align: left;\n      }\n  </style>\n</head>\n<body ${editableAttr}>\n  ${inputDivHTML}\n</body>\n</html>`;\n      // now we need to remove the temp-script tag with the script in it.\n      // we do this with a regex search/replace\n      s = s.replaceAll(\"xscripx\", \"script\");\n      console.log(editableAttr);\n      return s;\n    }\n\n    makeRevealJSFullPage(markdown, title = \"Slide Presentation\") {\n      return `<!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>${title}</title>\n      <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/reveal.js/dist/reveal.css\">\n      <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/reveal.js/dist/theme/black.css\">\n      <script src=\"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\"></script>\n  </head>\n  <body>\n      <div class=\"reveal\" contenteditable=\"true\">\n          <div class=\"slides\">\n              ${markdown.split('---').map(slide => `<section data-markdown><script type=\"text/template\">${slide.trim()}</script></section>`).join('\\n')}\n          </div>\n      </div>\n      <script src=\"https://cdn.jsdelivr.net/npm/reveal.js/dist/reveal.js\"></script>\n      <script src=\"https://cdn.jsdelivr.net/npm/reveal.js/plugin/markdown/markdown.js\"></script>\n      <script>\n          Reveal.initialize({\n              plugins: [ RevealMarkdown ]\n          });\n          \n          // Ensure Mermaid diagrams initialize correctly\n          document.addEventListener('DOMContentLoaded', () => {\n              mermaid.initialize({ startOnLoad: true , securityLevel: 'loose', theme: 'dark' });\n              document.querySelectorAll('.mermaid').forEach(el => {\n                  el.innerHTML = el.textContent;\n                  mermaid.init(undefined, el);\n              });\n          });\n      </script>\n  </body>\n  </html>`;\n  }\n  \n\n\n}// end of class SquibView\n\nexport default SquibView;\n"],"names":["SquibView","_createClass","element","options","arguments","length","undefined","_classCallCheck","this","_objectSpread","defaultOptions","container","document","querySelector","Error","initializeLibraries","createStructure","initializeEventHandlers","setContent","initialContent","setView","initialView","initializeResizeObserver","key","value","mermaid","initialize","startOnLoad","securityLevel","theme","errorCallback","error","console","warn","init","md","window","markdownit","html","linkify","typographer","highlight","str","lang","hljs","getLanguage","language","__","defaultFence","renderer","rules","fence","tokens","idx","env","self","renderToken","token","info","trim","content","classList","add","baseClass","innerHTML","concat","titleShow","titleContent","showControls","title","controls","editor","input","output","_this","querySelectorAll","forEach","button","addEventListener","dataset","view","copySource","copyHTML","renderOutput","_this2","ResizeObserver","entries","_step","_iterator","_createForOfIteratorHelper","s","n","done","target","adjustLayout","err","e","f","observe","containerRect","getBoundingClientRect","titleHeight","offsetHeight","controlsHeight","availableHeight","height","availableWidth","width","style","currentView","contentType","inputContentType","replace","_renderMarkdown","_asyncToGenerator","_regeneratorRuntime","mark","_callee","contentDiv","images","_iterator2","_step2","_loop","wrap","_context2","prev","next","render","img","canvas","ctx","tempImg","_context","createElement","getContext","Image","crossOrigin","Promise","resolve","reject","onload","naturalWidth","naturalHeight","drawImage","dataUrl","toDataURL","src","onerror","t0","stop","delegateYield","t1","finish","apply","newMarkdown","getMarkdownSource","btn","toggle","copyMDButton","copyHTMLButton","remove","_copyContent","_callee3","copyButton","clone","svgElements","_iterator3","_step3","_loop2","imgElements","clipData","_this3","_context5","textContent","cloneNode","block","formattedCode","table","borderCollapse","border","tr","td","backgroundColor","padding","fontFamily","whiteSpace","appendChild","parentNode","replaceWith","svg","pngBlob","_context4","svgToPng","sent","reader","FileReader","onloadend","result","readAsDataURL","clientWidth","viewBox","baseVal","clientHeight","setAttribute","Math","random","toString","substr","alt","replaceChild","all","map","_ref","_callee2","newImg","_context3","log","offsetWidth","cssText","_x","ClipboardItem","Blob","type","innerText","navigator","clipboard","write","t2","setTimeout","svgElement","svgString","XMLSerializer","serializeToString","svgWidth","svgHeight","scale","clearRect","toBlob","blob","svgDataUrl","encodeURIComponent","show","display","parentElement","htmlContent","iframe","iframeDoc","contentWindow","open","close","output_iframe","output_ifraome_content","outputDiv","insertContentInIframe","renderHTML","makeRevealJSFullPage","renderMarkdown","_copySource","_callee4","markdownText","textarea","_context6","writeText","position","opacity","body","select","removeChild","_copyHTML","_callee5","_iterator4","_step4","_loop3","tempDiv","selection","range","_this4","_context8","_context7","getPlatform","copyToClipboard","left","top","t3","getSelection","createRange","selectNodeContents","removeAllRanges","addRange","execCommand","t4","string","focus","sel","setSelectionRange","isMac","platform","toUpperCase","indexOf","prompt","toLowerCase","userAgent","includes","inputDivHTML","editableAttr","replaceAll","markdown","split","slide","join","_defineProperty","version","url"],"mappings":"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"}