{"version":3,"file":"squibview.umd.js","sources":["../src/squibview.js"],"sourcesContent":["/* SquibView a live md/html/etc Editor/renderer with copy support\n supports markdown, html, and split view\n supports copying of formatted html and markdown\n supports copying of images as data urls\n supports copying of svg as png\n supports copying of tables as formatted tables\n supports copying of code blocks as formatted tables\n by deftio (c) 2024\n*/\n\nclass SquibView {\n  static defaultOptions = {\n    initialContent: '',\n    inputContentType: 'md', // 'md', 'html', 'reveal', 'csv' or 'tsv'\n    showControls: true,\n    titleShow: false,\n    titleContent: '',\n    initialView: 'split',\n    baseClass: 'squibview'\n  };\n\n  static version = {\n    version: \"0.0.26\",\n    url: \"https://github.com/deftio/squibview\"\n  };\n\n  constructor(element, options = {}) {\n    this.options = { ...SquibView.defaultOptions, ...options };\n    this.container = typeof element === 'string' ? document.querySelector(element) : element;\n\n    if (!this.container) {\n      throw new Error('Container element not found');\n    }\n\n    this.initializeLibraries();\n    this.createStructure();\n    this.initializeEventHandlers();\n    this.setContent(this.options.initialContent, this.options.inputContentType);\n    this.setView(this.options.initialView);\n    this.initializeResizeObserver();\n  }\n\n  initializeLibraries() {\n    mermaid.initialize({\n      startOnLoad: false,\n      securityLevel: 'loose',\n      theme: 'default',\n      errorCallback: function (error) {\n        console.warn(\"Mermaid error:\", error);\n        return \"<div class='mermaid-error'></div>\"; // Replace with custom message\n      }\n    });\n    mermaid.init(undefined, \".mermaid\");\n    this.md = window.markdownit({\n      html: true,\n      linkify: true,\n      typographer: true,\n      highlight: (str, lang) => {\n        if (lang && hljs.getLanguage(lang)) {\n          try {\n            return hljs.highlight(str, { language: lang }).value;\n          } catch (__) { }\n        }\n        return '';\n      }\n    });\n\n    const defaultFence = this.md.renderer.rules.fence ||\n      ((tokens, idx, options, env, self) => self.renderToken(tokens, idx, options));\n\n    this.md.renderer.rules.fence = (tokens, idx, options, env, self) => {\n      const token = tokens[idx];\n      const info = token.info.trim();\n      if (info === 'mermaid') {\n        return '<div class=\"mermaid\">' + token.content + '</div>';\n      }\n      if (info === 'svg') {\n        return token.content;\n      }\n      return defaultFence(tokens, idx, options, env, self);\n    };\n  }\n\n  createStructure() {\n    this.container.classList.add(this.options.baseClass);\n\n    this.container.innerHTML = `\n        <div class=\"${this.options.baseClass}-title\" ${!this.options.titleShow ? 'style=\"display:none\"' : ''}>\n          ${this.options.titleContent}\n        </div>\n        <div class=\"${this.options.baseClass}-controls\" ${!this.options.showControls ? 'style=\"display:none\"' : ''}>\n          <button data-view='src'>Markdown</button>\n          <button data-view=\"html\">Rendered</button>\n          <button data-view=\"split\">Split</button>\n          <button class=\"copy-src-button\">Copy MD</button>\n          <button class=\"copy-html-button\">Copy Formatted</button>\n        </div>\n        <div class=\"${this.options.baseClass}-editor\">\n          <textarea class=\"${this.options.baseClass}-input\"></textarea>\n          <div class=\"${this.options.baseClass}-output\"></div>\n        </div>\n      `;\n\n    this.title = this.container.querySelector(`.${this.options.baseClass}-title`);\n    this.controls = this.container.querySelector(`.${this.options.baseClass}-controls`);\n    this.editor = this.container.querySelector(`.${this.options.baseClass}-editor`);\n    this.input = this.container.querySelector(`.${this.options.baseClass}-input`);\n    this.output = this.container.querySelector(`.${this.options.baseClass}-output`);\n  }\n\n  initializeEventHandlers() {\n    this.controls.querySelectorAll('button[data-view]').forEach(button => {\n      button.addEventListener('click', () => this.setView(button.dataset.view));\n    });\n\n    this.controls.querySelector('.copy-src-button').addEventListener('click', () => this.copySource());\n    this.controls.querySelector('.copy-html-button').addEventListener('click', () => this.copyHTML());\n\n    //onchange() for input source\n    this.input.addEventListener('input', () => { this.renderOutput(); });\n  }\n  initializeResizeObserver() {\n    const resizeObserver = new ResizeObserver(entries => {\n      for (let entry of entries) {\n        if (entry.target === this.container) {\n          this.adjustLayout();\n        }\n      }\n    });\n    resizeObserver.observe(this.container);\n  }\n\n  adjustLayout() {\n    const containerRect = this.container.getBoundingClientRect();\n    const titleHeight = this.title.offsetHeight;\n    const controlsHeight = this.controls.offsetHeight;\n\n    const availableHeight = containerRect.height - titleHeight - controlsHeight;\n    const availableWidth = containerRect.width;\n    this.editor.style.height = `${availableHeight}px`;\n    this.editor.style.width = `${availableWidth}px`;\n\n    if (this.currentView === 'split') {\n      this.input.style.width = '50%';\n      this.output.style.width = '50%';\n    } else if (this.currentView === 'src') {\n      this.input.style.width = '100%';\n    } else if (this.currentView === 'html') {\n      this.output.style.width = '100%';\n    }\n  }\n\n  setContent(content, contentType ) {\n    this.input.value = content;\n    // if the contentType isn't undefined then we'll set it:\n    if (contentType) {\n      this.inputContentType = contentType;\n    }\n    this.renderOutput();\n  }\n\n  getContent() {\n    return this.input.value;\n  }\n\n  cleanMarkdown(md) {\n    return md.replace(/^```markdown\\s+/, '').replace(/```$/, '');\n  }\n\n  async renderMarkdown(md) {\n\n    const markdown = md || this.input.value;\n    const html = this.md.render(markdown); \n    this.output.innerHTML = \"<div contenteditable='true'>\" + html + \"</div>\";\n\n    // Convert all images to data URLs immediately after rendering\n    const contentDiv = this.output.querySelector('div[contenteditable=\"true\"]');\n    const images = contentDiv.querySelectorAll('img');\n\n    // render images to data urls\n\n    for (const img of images) {\n      try {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n\n        // Create new image and wait for it to load\n        const tempImg = new Image();\n        tempImg.crossOrigin = 'anonymous';\n\n        await new Promise((resolve, reject) => {\n          tempImg.onload = () => {\n            // Set canvas size to match image\n            canvas.width = tempImg.naturalWidth;\n            canvas.height = tempImg.naturalHeight;\n\n            // Draw image to canvas\n            ctx.drawImage(tempImg, 0, 0);\n\n            // Convert to data URL\n            const dataUrl = canvas.toDataURL('image/png', 1.0);\n\n            // Update original image\n            img.src = dataUrl;\n            resolve();\n          };\n          tempImg.onerror = reject;\n          tempImg.src = img.src;\n        });\n      } catch (error) {\n        console.error('Failed to convert image:', error);\n      }\n\n    }\n\n    // end of images to data urls\n\n    // Initialize mermaid diagrams after all images are processed\n    mermaid.init(undefined, this.output.querySelectorAll('.mermaid'));\n  } // end of renderMarkdown\n\n  // todo rename sourceRemoveAllHR ()  ==> handled markdown or html via replace (---) or (<hr>, <hr/>) respectively\n  markdownRemoveAllHR() {\n    if (this.inputContentType === 'md') {\n      const markdown = this.getMarkdownSource();\n      const newMarkdown = markdown.replace(/---/g, '');\n      this.setContent(newMarkdown, this.inputContentType);\n    }\n  }\n\n  setView(view) {\n    this.currentView = view;\n\n    this.controls.querySelectorAll('button[data-view]').forEach(btn => {\n      btn.classList.toggle('active', btn.dataset.view === view);\n    });\n\n    const copyMDButton = this.controls.querySelector('.copy-src-button');\n    const copyHTMLButton = this.controls.querySelector('.copy-html-button');\n\n    if (view === 'src') {\n      this.input.classList.remove('squibview-hidden');\n      this.output.classList.add('squibview-hidden');\n      this.input.style.width = '100%';\n      copyMDButton.classList.remove('squibview-hidden');\n      copyHTMLButton.classList.add('squibview-hidden');\n    } else if (view === 'html') {\n      this.input.classList.add('squibview-hidden');\n      this.output.classList.remove('squibview-hidden');\n      this.output.style.width = '100%';\n      copyMDButton.classList.add('squibview-hidden');\n      copyHTMLButton.classList.remove('squibview-hidden');\n    } else { // view == 'split'\n      this.input.classList.remove('squibview-hidden');\n      this.output.classList.remove('squibview-hidden');\n      this.input.style.width = '50%';\n      this.output.style.width = '50%';\n      copyMDButton.classList.remove('squibview-hidden');\n      copyHTMLButton.classList.remove('squibview-hidden');\n    }\n\n    this.adjustLayout();\n  }\n\n  async copyContent() {\n    const copyButton = this.controls.querySelector('.copy-button');\n    copyButton.textContent = 'Copying...';\n\n    try {\n      const contentDiv = this.output.querySelector('div[contenteditable=\"true\"]');\n      if (!contentDiv) {\n        throw new Error('Content div not found');\n      }\n\n      const clone = contentDiv.cloneNode(true);\n\n      clone.querySelectorAll('pre code').forEach(block => {\n        const formattedCode = block.innerHTML;\n\n        const table = document.createElement('table');\n        table.style.width = '100%';\n        table.style.borderCollapse = 'collapse';\n        table.style.border = 'none';\n\n        const tr = document.createElement('tr');\n        const td = document.createElement('td');\n        td.style.backgroundColor = '#f7f7f7';\n        td.style.padding = '12px';\n        td.style.fontFamily = 'Consolas, Monaco, \"Courier New\", monospace';\n        td.style.whiteSpace = 'pre';\n        td.style.border = 'none';\n\n        td.innerHTML = formattedCode.trim();\n\n        tr.appendChild(td);\n        table.appendChild(tr);\n        block.parentNode.replaceWith(table);\n      });\n\n      const svgElements = clone.querySelectorAll('svg');\n      for (const svg of svgElements) {\n        try {\n          const pngBlob = await this.svgToPng(svg);\n          const dataUrl = await new Promise(resolve => {\n            const reader = new FileReader();\n            reader.onloadend = () => resolve(reader.result);\n            reader.readAsDataURL(pngBlob);\n          });\n\n          const img = document.createElement('img');\n          img.src = dataUrl;\n          img.width = svg.clientWidth || svg.viewBox.baseVal.width || 100;\n          img.height = svg.clientHeight || svg.viewBox.baseVal.height || 100;\n          img.setAttribute('v:shapes', 'image' + Math.random().toString(36).substr(2, 9));\n          img.style.width = img.width + 'px';\n          img.style.height = img.height + 'px';\n          img.alt = \"Converted diagram\";\n          svg.parentNode.replaceChild(img, svg);\n        } catch (error) {\n          console.error('Failed to convert SVG:', error);\n        }\n      }\n\n\n      // Convert all images to data URLs\n      const imgElements = clone.querySelectorAll('img');\n      await Promise.all(imgElements.map(async img => {\n        console.log('Converting image:', img.src);\n\n        // Create canvas\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n\n        // Create new image and wait for it to load completely\n        const tempImg = new Image();\n        tempImg.crossOrigin = 'anonymous';\n\n        try {\n          await new Promise((resolve, reject) => {\n            tempImg.onload = resolve;\n            tempImg.onerror = reject;\n            tempImg.src = img.src;\n          });\n\n          // Set dimensions\n          canvas.width = tempImg.offsetWidth || img.offsetWidth || 200;\n          canvas.height = tempImg.offsetHeight || img.offsetHeight || 200;\n\n          // Draw and convert\n          ctx.drawImage(tempImg, 0, 0);\n          const dataUrl = canvas.toDataURL('image/png', 1.0);\n\n          // Create and wait for new image with data URL\n          const newImg = new Image();\n          await new Promise((resolve, reject) => {\n            newImg.onload = () => {\n              newImg.alt = img.alt || 'Converted image';\n              newImg.width = canvas.width;\n              newImg.height = canvas.height;\n              newImg.style.cssText = img.style.cssText;\n              // Force image to be treated as embedded\n              newImg.setAttribute('data-embedded', 'true');\n              // Replace the old image\n              img.parentNode.replaceChild(newImg, img);\n              console.log('Successfully converted image to data URL');\n              resolve();\n            };\n            newImg.onerror = reject;\n            newImg.src = dataUrl;\n          });\n        } catch (error) {\n          console.error('Error converting image:', error, img.src);\n          // Don't rethrow - we want to continue with other images\n        }\n      }));\n\n\n      const clipData = new ClipboardItem({\n        'text/html': new Blob([`\n            <html xmlns:v=\"urn:schemas-microsoft-com:vml\"\n                  xmlns:o=\"urn:schemas-microsoft-com:office:office\"\n                  xmlns:w=\"urn:schemas-microsoft-com:office:word\">\n              <head>\n                <meta charset=\"utf-8\">\n                <style>\n                  table { border-collapse: collapse; width: 100%; margin-bottom: 1em; }\n                  th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }\n                  th { background-color: #f0f0f0; font-weight: bold; }\n\n                  /* Code block styling */\n                  .hljs { display: block; overflow-x: auto; padding: 1em; }\n                  .hljs-keyword { color: #0033B3; }\n                  .hljs-string { color: #067D17; }\n                  .hljs-comment { color: #8C8C8C; }\n                  .hljs-function { color: #00627A; }\n                  .hljs-number { color: #1750EB; }\n                  .hljs-operator { color: #687687; }\n                  .hljs-punctuation { color: #000000; }\n\n                  /* Word-specific image handling */\n                  img { display: block; max-width: none; }\n                </style>\n              </head>\n              <body>\n                ${clone.innerHTML}\n              </body>\n            </html>\n          `], { type: 'text/html' }),\n        'text/plain': new Blob([clone.innerText], { type: 'text/plain' })\n      });\n\n      await navigator.clipboard.write([clipData]);\n      copyButton.textContent = 'Copied!';\n    } catch (err) {\n      console.error('Copy failed:', err);\n      copyButton.textContent = 'Copy failed';\n    }\n\n    setTimeout(() => {\n      copyButton.textContent = 'Copy';\n    }, 2000);\n  }\n\n  svgToPng(svgElement) {\n    return new Promise((resolve, reject) => {\n      const svgString = new XMLSerializer().serializeToString(svgElement);\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n\n      const scale = 2;\n      const svgWidth = svgElement.clientWidth || svgElement.viewBox.baseVal.width || 100;\n      const svgHeight = svgElement.clientHeight || svgElement.viewBox.baseVal.height || 100;\n\n      canvas.width = svgWidth * scale;\n      canvas.height = svgHeight * scale;\n      ctx.scale(scale, scale);\n\n      img.onload = () => {\n        try {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.drawImage(img, 0, 0, svgWidth, svgHeight);\n          canvas.toBlob(blob => {\n            resolve(blob);\n          }, 'image/png', 1.0);\n        } catch (err) {\n          reject(err);\n        }\n      };\n\n      img.onerror = reject;\n      const svgDataUrl = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svgString)}`;\n      img.src = svgDataUrl;\n    });\n  }\n\n  controlsShow(show) {\n    this.controls.style.display = show ? '' : 'none';\n    this.options.showControls = show;\n    this.adjustLayout();\n  }\n\n  titleShow(show) {\n    this.title.style.display = show ? '' : 'none';\n    this.options.titleShow = show;\n    this.adjustLayout();\n  }\n\n  titleSetContent(content) {\n    this.title.innerHTML = content;\n    this.options.titleContent = content;\n  }\n\n  titleGetContent() {\n    return this.title.innerHTML;\n  }\n\n  getMarkdownSource() {\n    return this.input.value;\n  }\n\n  getHTMLSource() {\n    return this.output.querySelector('div[contenteditable=\"true\"]').innerHTML;\n  }\n\n  // Standalone function to toggle between Markdown preview and split view\n  toggleView() {\n    const editor = window.editor;\n    if (editor.currentView === 'src') {\n      editor.setView('split');\n    } else if (editor.currentView === 'split') {\n      editor.setView('html');\n    } else\n      editor.setView('src')\n\n    console.log(editor.currentView)\n  }\n\n  /**\n   * Creates an iframe that fills the entire parent element and injects provided HTML content.\n   * @param {HTMLElement} parentElement - The parent element to contain the iframe.\n   * @param {string} htmlContent - The HTML content to inject into the iframe.\n   */\n  insertContentInIframe(parentElement, htmlContent) {\n    // Create an iframe element\n    const iframe = document.createElement('iframe');\n\n    // Style the iframe to fill the parent completely\n    iframe.style.width = '100%';\n    iframe.style.height = '100%';\n    iframe.style.border = 'none';\n    iframe.style.display = 'block';\n\n    //iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin');\n    // Append the iframe to the parent element\n    parentElement.innerHTML = '';\n    parentElement.appendChild(iframe);\n\n    // Access the iframe's document and write the HTML content into it\n    const iframeDoc = iframe.contentWindow.document;\n    iframeDoc.open();\n    iframeDoc.write(htmlContent);\n    iframeDoc.close();\n    this.output_iframe = iframe\n    this.output_ifraome_content = htmlContent;\n  }\n  // this function takes input as html and renders it in an iframe in the output div\n  // it write to the outputDiv that is a member of this object\n  renderHTML(src) {\n    const htmlContent = src;\n    const outputDiv = this.output;\n    this.insertContentInIframe(outputDiv, htmlContent);\n  }\n\n  renderOutput() {\n    switch (this.inputContentType) {\n      case 'html':\n        this.renderHTML(this.input.value)\n        break;\n      case 'reveal':\n        this.renderHTML(this.makeRevealJSFullPage(this.input.value))\n        break;\n      case 'csv': // comma separated\n      case 'tsv': // tab separated\n      case 'semisv': // semicolon separated\n      case 'ssv' : //space separated\n        // take the input and treat it as csv / tsv and convert it to markdown to render on the fly\n        const data = this.getContent();\n        // delimiter can be commma, tab, space, or semi-colon\n        let delimiter = \",\"; \n        const delims = {\"tsv\":\",\", \"semisv\":\";\",\"ssv\":\" \"};\n        if (this.inputContentType in delims)\n          delimiter = delims[this.inputContentType];\n        const markdownTable = this.csvOrTsvToMarkdownTable(data, delimiter);\n        this.renderMarkdown(markdownTable);\n        break;\n      case 'md':\n        this.renderMarkdown();\n        break;\n      default:\n        this.renderMarkdown();\n        console.log(\"Unsupported content type: \", this.inputContentType);\n    }\n  }\n\n  async copySource() {\n    const copyButton = this.controls.querySelector('.copy-src-button');\n    copyButton.textContent = 'Copying...';\n\n    try {\n      const markdownText = this.getMarkdownSource();\n\n      try {\n        await navigator.clipboard.writeText(markdownText);\n      } catch (modernErr) {\n        const textarea = document.createElement('textarea');\n        textarea.value = markdownText;\n        textarea.style.position = 'fixed';\n        textarea.style.opacity = '0';\n        document.body.appendChild(textarea);\n        textarea.select();\n\n        //const successful = document.execCommand('copy');\n        document.body.removeChild(textarea);\n\n        //if (!successful) throw new Error('Fallback copy failed');\n      }\n\n      copyButton.textContent = 'Copied!';\n    } catch (err) {\n      console.error('Copy Markdown failed:', err);\n      copyButton.textContent = 'Copy failed';\n    }\n\n    setTimeout(() => {\n      copyButton.textContent = 'Copy MD';\n    }, 2000);\n  }\n\n  async copyHTML() {\n    const copyButton = this.controls.querySelector('.copy-html-button');\n    copyButton.textContent = 'Copying...';\n\n    try {\n      const contentDiv = this.output.querySelector('div[contenteditable=\"true\"]');\n      if (!contentDiv) {\n        throw new Error('Content div not found');\n      }\n\n      const clone = contentDiv.cloneNode(true);\n\n      // Process code blocks\n      clone.querySelectorAll('pre code').forEach(block => {\n        const formattedCode = block.innerHTML;\n\n        const table = document.createElement('table');\n        table.style.width = '100%';\n        table.style.borderCollapse = 'collapse';\n        table.style.border = 'none';\n\n        const tr = document.createElement('tr');\n        const td = document.createElement('td');\n        td.style.backgroundColor = '#f7f7f7';\n        td.style.padding = '12px';\n        td.style.fontFamily = 'Consolas, Monaco, \"Courier New\", monospace';\n        td.style.whiteSpace = 'pre';\n        td.style.border = 'none';\n\n        td.innerHTML = formattedCode.trim();\n\n        tr.appendChild(td);\n        table.appendChild(tr);\n        block.parentNode.replaceWith(table);\n      });\n\n      // Convert SVG elements to PNG\n      const svgElements = clone.querySelectorAll('svg');\n      for (const svg of svgElements) {\n        try {\n          const pngBlob = await this.svgToPng(svg);\n          const dataUrl = await new Promise(resolve => {\n            const reader = new FileReader();\n            reader.onloadend = () => resolve(reader.result);\n            reader.readAsDataURL(pngBlob);\n          });\n\n          const img = document.createElement('img');\n          img.src = dataUrl;\n          img.width = svg.clientWidth || svg.viewBox.baseVal.width || 100;\n          img.height = svg.clientHeight || svg.viewBox.baseVal.height || 100;\n          img.setAttribute('v:shapes', 'image' + Math.random().toString(36).substr(2, 9));\n          img.style.width = img.width + 'px';\n          img.style.height = img.height + 'px';\n          img.alt = \"Converted diagram\";\n          svg.parentNode.replaceChild(img, svg);\n        } catch (error) {\n          console.error('Failed to convert SVG:', error);\n        }\n      }\n\n      const htmlContent = `\n          <html xmlns:v=\"urn:schemas-microsoft-com:vml\"\n                xmlns:o=\"urn:schemas-microsoft-com:office:office\"\n                xmlns:w=\"urn:schemas-microsoft-com:office:word\">\n            <head>\n              <meta charset=\"utf-8\">\n              <style>\n                table { border-collapse: collapse; width: 100%; margin-bottom: 1em; }\n                th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }\n                th { background-color: #f0f0f0; font-weight: bold; }\n\n                /* Code block styling */\n                .hljs { display: block; overflow-x: auto; padding: 1em; }\n                .hljs-keyword { color: #0033B3; }\n                .hljs-string { color: #067D17; }\n                .hljs-comment { color: #8C8C8C; }\n                .hljs-function { color: #00627A; }\n                .hljs-number { color: #1750EB; }\n                .hljs-operator { color: #687687; }\n                .hljs-punctuation { color: #000000; }\n\n                /* Word-specific image handling */\n                img { display: block; max-width: none; }\n              </style>\n            </head>\n            <body>\n              ${clone.innerHTML}\n            </body>\n          </html>`;\n\n      const platform = this.getPlatform();\n\n      if (platform === 'macos') {\n        // macOS approach (previously working version)\n        try {\n          await navigator.clipboard.write([\n            new ClipboardItem({\n              'text/html': new Blob([htmlContent], { type: 'text/html' }),\n              'text/plain': new Blob([clone.innerText], { type: 'text/plain' })\n            })\n          ]);\n        } catch (modernErr) {\n          // Safari fallback\n          if (!this.copyToClipboard(htmlContent)) {\n            throw new Error('Fallback copy failed');\n          }\n        }\n      } else {\n        // Windows/Linux approach\n        const tempDiv = document.createElement('div');\n        tempDiv.style.position = 'fixed';\n        tempDiv.style.left = '-9999px';\n        tempDiv.style.top = '0';\n        tempDiv.innerHTML = htmlContent;\n        document.body.appendChild(tempDiv);\n\n        try {\n          await navigator.clipboard.write([\n            new ClipboardItem({\n              'text/html': new Blob([htmlContent], { type: 'text/html' }),\n              'text/plain': new Blob([clone.innerText], { type: 'text/plain' })\n            })\n          ]);\n        } catch (modernErr) {\n          const selection = window.getSelection();\n          const range = document.createRange();\n          range.selectNodeContents(tempDiv);\n          selection.removeAllRanges();\n          selection.addRange(range);\n\n          const successful = document.execCommand('copy');\n          if (!successful) {\n            throw new Error('Fallback copy failed');\n          }\n        } finally {\n          if (tempDiv && tempDiv.parentNode) {\n            document.body.removeChild(tempDiv);\n          }\n        }\n      }\n\n      copyButton.textContent = 'Copied!';\n    } catch (err) {\n      console.error('Copy HTML failed:', err);\n      copyButton.textContent = 'Copy failed';\n    }\n\n    setTimeout(() => {\n      copyButton.textContent = 'Copy Formatted';\n    }, 2000);\n  }\n\n  copyToClipboard(string) {\n    let textarea;\n    let result;\n\n    try {\n      textarea = document.createElement('textarea');\n      textarea.setAttribute('readonly', true);\n      textarea.setAttribute('contenteditable', true);\n      textarea.style.position = 'fixed';\n      textarea.style.left = '0';\n      textarea.style.top = '0';\n      textarea.style.opacity = '0';\n      textarea.value = string;\n\n      document.body.appendChild(textarea);\n\n      textarea.focus();\n      textarea.select();\n\n      const range = document.createRange();\n      range.selectNodeContents(textarea);\n\n      const sel = window.getSelection();\n      sel.removeAllRanges();\n      sel.addRange(range);\n\n      textarea.setSelectionRange(0, textarea.value.length);\n      result = document.execCommand('copy');\n    } catch (err) {\n      console.error(err);\n      result = null;\n    } finally {\n      if (textarea && textarea.parentNode) {\n        document.body.removeChild(textarea);\n      }\n    }\n\n    // manual copy fallback using prompt\n    if (!result) {\n      const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n      const copyHotkey = isMac ? '⌘C' : 'CTRL+C';\n      result = prompt(`Press ${copyHotkey}`, string);\n      if (!result) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  getPlatform() {\n    const platform = navigator.platform.toLowerCase();\n    const userAgent = navigator.userAgent.toLowerCase();\n\n    if (platform.includes('mac') || userAgent.includes('mac')) {\n      return 'macos';\n    } else if (userAgent.includes('windows')) {\n      return 'windows';\n    } else if (userAgent.includes('linux')) {\n      return 'linux';\n    }\n    return 'unknown';\n  }\n\n  // Make a complete HTML page from a div (or any html snippet) with optional editability\n  makeHTMLPageFromDiv(inputDivHTML, editable = false) {\n    let editableAttr = editable ? 'contenteditable=\"true\"' : '';\n    let s =\n      `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Markdown Viewer with Graphics Support</title>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n  <xscripx src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></xscripx>\n  <xscripx src=\"https://unpkg.com/mermaid/dist/mermaid.min.js\"></xscripx>\n  <style>\n      body {\n          font-family: Arial, sans-serif;\n          box-sizing: border-box;\n          padding: 20px;\n      }\n      .squibview-output {\n          width: 50%;\n          margin: auto;\n      }\n      pre {\n          background-color: #f4f4f4;\n          padding: 10px;\n          border-radius: 5px;\n          overflow-x: auto;\n      }\n      table {\n          width: 100%;\n          border-collapse: collapse;\n          margin: 20px 0;\n      }\n      table, th, td {\n          border: 1px solid black;\n      }\n      th, td {\n          padding: 8px;\n          text-align: left;\n      }\n  </style>\n</head>\n<body ${editableAttr}>\n  ${inputDivHTML}\n</body>\n</html>`;\n    // now we need to remove the temp-script tag with the script in it.\n    // we do this with a regex search/replace\n    s = s.replaceAll(\"xscripx\", \"script\");\n    console.log(editableAttr);\n    return s;\n  }\n\n  makeRevealJSFullPage(markdown, title = \"Slide Presentation\") {\n    return `<!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>${title}</title>\n      <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/reveal.js/dist/reveal.css\">\n      <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/reveal.js/dist/theme/black.css\">\n      <script src=\"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\"></script>\n  </head>\n  <body>\n      <div class=\"reveal\" contenteditable=\"true\">\n          <div class=\"slides\">\n              ${markdown.split('---').map(slide => `<section data-markdown><script type=\"text/template\">${slide.trim()}</script></section>`).join('\\n')}\n          </div>\n      </div>\n      <script src=\"https://cdn.jsdelivr.net/npm/reveal.js/dist/reveal.js\"></script>\n      <script src=\"https://cdn.jsdelivr.net/npm/reveal.js/plugin/markdown/markdown.js\"></script>\n      <script>\n          Reveal.initialize({\n              plugins: [ RevealMarkdown ]\n          });\n          \n          // Ensure Mermaid diagrams initialize correctly\n          document.addEventListener('DOMContentLoaded', () => {\n              mermaid.initialize({ startOnLoad: true , securityLevel: 'loose', theme: 'dark' });\n              document.querySelectorAll('.mermaid').forEach(el => {\n                  el.innerHTML = el.textContent;\n                  mermaid.init(undefined, el);\n              });\n          });\n      </script>\n  </body>\n  </html>`;\n  }\n\n  csvOrTsvToMarkdownTable(input, delimiter = ',') {\n    // Parse CSV/TSV content\n    const parsedData = Papa.parse(input, {\n      delimiter,\n      skipEmptyLines: true\n    });\n\n    const rows = parsedData.data;\n\n    if (rows.length === 0) return 'No data found.';\n\n    // Markdown table header\n    const header = `| ${rows[0].join(' | ')} |`;\n    const separator = `| ${rows[0].map(() => '---').join(' | ')} |`;\n    const tableRows = rows.slice(1).map(row => `| ${row.join(' | ')} |`).join('\\n');\n\n    return `${header}\\n${separator}\\n${tableRows}`;\n  }\n\n\n}// end of class SquibView\n\nexport default SquibView;\n"],"names":["SquibView","element","options","arguments","length","undefined","_classCallCheck","_objectSpread","defaultOptions","container","document","querySelector","Error","initializeLibraries","createStructure","initializeEventHandlers","setContent","initialContent","inputContentType","setView","initialView","initializeResizeObserver","_createClass","key","value","mermaid","initialize","startOnLoad","securityLevel","theme","errorCallback","error","console","warn","init","md","window","markdownit","html","linkify","typographer","highlight","str","lang","hljs","getLanguage","language","__","defaultFence","renderer","rules","fence","tokens","idx","env","self","renderToken","token","info","trim","content","classList","add","baseClass","innerHTML","concat","titleShow","titleContent","showControls","title","controls","editor","input","output","_this","querySelectorAll","forEach","button","addEventListener","dataset","view","copySource","copyHTML","renderOutput","_this2","resizeObserver","ResizeObserver","entries","_iterator","_createForOfIteratorHelper","_step","s","n","done","entry","target","adjustLayout","err","e","f","observe","containerRect","getBoundingClientRect","titleHeight","offsetHeight","controlsHeight","availableHeight","height","availableWidth","width","style","currentView","contentType","getContent","cleanMarkdown","replace","_renderMarkdown","_asyncToGenerator","_regeneratorRuntime","mark","_callee","markdown","contentDiv","images","_iterator2","_step2","_loop","wrap","_callee$","_context2","prev","next","render","img","canvas","ctx","tempImg","_loop$","_context","createElement","getContext","Image","crossOrigin","Promise","resolve","reject","onload","naturalWidth","naturalHeight","drawImage","dataUrl","toDataURL","src","onerror","t0","stop","delegateYield","t1","finish","renderMarkdown","_x","apply","markdownRemoveAllHR","getMarkdownSource","newMarkdown","btn","toggle","copyMDButton","copyHTMLButton","remove","_copyContent","_callee3","_this3","copyButton","clone","svgElements","_iterator3","_step3","_loop2","imgElements","clipData","_callee3$","_context5","textContent","cloneNode","block","formattedCode","table","borderCollapse","border","tr","td","backgroundColor","padding","fontFamily","whiteSpace","appendChild","parentNode","replaceWith","svg","pngBlob","_loop2$","_context4","svgToPng","sent","reader","FileReader","onloadend","result","readAsDataURL","clientWidth","viewBox","baseVal","clientHeight","setAttribute","Math","random","toString","substr","alt","replaceChild","all","map","_ref","_callee2","newImg","_callee2$","_context3","log","offsetWidth","cssText","_x2","ClipboardItem","Blob","type","innerText","navigator","clipboard","write","t2","setTimeout","copyContent","svgElement","svgString","XMLSerializer","serializeToString","scale","svgWidth","svgHeight","clearRect","toBlob","blob","svgDataUrl","encodeURIComponent","controlsShow","show","display","titleSetContent","titleGetContent","getHTMLSource","toggleView","insertContentInIframe","parentElement","htmlContent","iframe","iframeDoc","contentWindow","open","close","output_iframe","output_ifraome_content","renderHTML","outputDiv","makeRevealJSFullPage","data","delimiter","delims","markdownTable","csvOrTsvToMarkdownTable","_copySource","_callee4","markdownText","textarea","_callee4$","_context6","writeText","position","opacity","body","select","removeChild","_copyHTML","_callee5","_this4","_iterator4","_step4","_loop3","platform","tempDiv","selection","range","successful","_callee5$","_context8","_loop3$","_context7","getPlatform","copyToClipboard","left","top","t3","getSelection","createRange","selectNodeContents","removeAllRanges","addRange","execCommand","t4","string","focus","sel","setSelectionRange","isMac","toUpperCase","indexOf","copyHotkey","prompt","toLowerCase","userAgent","includes","makeHTMLPageFromDiv","inputDivHTML","editable","editableAttr","replaceAll","split","slide","join","parsedData","Papa","parse","skipEmptyLines","rows","header","separator","tableRows","slice","row","_defineProperty","version","url"],"mappings":"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"}