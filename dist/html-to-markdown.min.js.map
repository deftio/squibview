{"version":3,"file":"html-to-markdown.min.js","sources":["../src/HtmlToMarkdown.js"],"sourcesContent":["import TurndownService from 'turndown';\n\n/**\n * Converts HTML content to Markdown format using the Turndown library with \n * customizations specific to SquibView's needs.\n */\nexport default class HtmlToMarkdown {\n  constructor(options = {}) {\n    console.warn('[HtmlToMarkdown] CONSTRUCTOR CALLED');\n    this.turndownService = new TurndownService({\n      headingStyle: 'atx',       // Use # style headings\n      codeBlockStyle: 'fenced',  // Use ``` style code blocks\n      emDelimiter: '*',          // Use * for emphasis\n      bulletListMarker: '-',     // Use - for bullet lists\n      ...options\n    });\n    \n    // Add a simple cache for converted content to improve performance\n    this.cache = new Map();\n    this.cacheSize = options.cacheSize || 10;\n    \n    // Store special blocks for preservation\n    this._specialBlocks = new Map();\n    \n    this.configureTurndownRules();\n  }\n  \n  /**\n   * Configure custom Turndown rules\n   */\n  configureTurndownRules() {\n    // Preserve HTML image tags by returning their outerHTML\n    this.turndownService.addRule('keepImageTags', {\n      filter: 'img',\n      replacement: function (content, node) {\n        return node.outerHTML;\n      }\n    });\n\n    // Preserve standalone <svg> tags NOT inside a data-source-type div\n    this.turndownService.addRule('keepStandaloneSvgTags', {\n      filter: ['svg'],\n      replacement: function (content, node) {\n        // console.warn('[HtmlToMarkdown] standalone SVG rule processing:', node.outerHTML);\n        return node.outerHTML;\n      }\n    });\n\n    // Rule for our data-source-type wrapper divs - should be high priority\n    this.turndownService.addRule('squibviewFencedBlock', {\n      filter: (node) => {\n        if (node.nodeName === 'DIV') {\n          console.warn(`[HtmlToMarkdown] squibviewFencedBlock filter DIAGNOSTIC: Encountered DIV. Attributes: data-source-type=\"${node.getAttribute('data-source-type')}\", class=\"${node.className}\", id=\"${node.id}\". OuterHTML (first 150 chars):`, node.outerHTML.substring(0, 150));\n        }\n\n        const hasAttr = node.nodeName === 'DIV' && node.hasAttribute('data-source-type');\n        if (hasAttr) {\n          const lang = node.getAttribute('data-source-type') || 'code';\n          // Keep the original specific log for actual matches\n          console.warn(`[HtmlToMarkdown] squibviewFencedBlock filter: Matched div with data-source-type=\"${lang}\". Node outerHTML (first 150 chars):`, node.outerHTML.substring(0,150));\n        }\n        return hasAttr;\n      },\n      replacement: (content, node, options) => {\n        const lang = node.getAttribute('data-source-type') || 'code';\n        let innerContent = '';\n\n        switch (lang) {\n          case 'mermaid':\n          case 'math':\n            let contentFromHtml = node.innerHTML;\n            // Convert <br> tags to newlines first\n            contentFromHtml = contentFromHtml.replace(/<br\\s*\\/?>/gi, '\\n');\n            // For Mermaid and Math, the content is expected to be text-like after <br> replacement.\n            // Avoid stripping other tags if they are part of the intended content (e.g. MathML in MathJax)\n            // Instead, rely on a robust way to get text content, then trim.\n            const tempDiv = document.createElement('div');\n            tempDiv.innerHTML = contentFromHtml; // Let browser parse it\n            innerContent = tempDiv.textContent || tempDiv.innerText || ''; // Get text content\n            innerContent = innerContent.trim(); // Trim whitespace\n            break;\n          case 'svg':\n            // The 'node' is the div with data-source-type=\"svg\".\n            // Its innerHTML is expected to be the raw SVG markup.\n            innerContent = node.innerHTML;\n            // It's good to log what's captured for debugging during development if necessary.\n            // console.warn('[HtmlToMarkdown] squibviewFencedBlock SVG: Captured innerHTML:', innerContent.substring(0, 200));\n            break;\n          case 'csv':\n          case 'tsv':\n          case 'psv':\n            const tableElement = node.querySelector('table');\n            if (tableElement) {\n              innerContent = this._htmlTableToDelimitedText(tableElement, lang);\n            } else {\n              innerContent = 'Error: Table not found for ' + lang;\n              console.warn('Could not find table inside div[data-source-type=\"' + lang + '\"]');\n            }\n            break;\n          default: // Handles 'javascript', 'python', 'code', etc.\n            const preElement = node.querySelector('pre');\n            if (preElement) {\n              const codeElement = preElement.querySelector('code');\n              // textContent of <code> or <pre> contains the code.\n              innerContent = (codeElement || preElement).textContent.trimEnd(); // trimEnd to preserve leading newlines if any, but remove trailing ones from block.\n            } else {\n              // Fallback if <pre> not found (e.g. if it was just a div with code)\n              innerContent = node.textContent.trimEnd();\n               console.warn('Could not find <pre> inside div[data-source-type=\"' + lang + '\"]');\n            }\n            break;\n        }\n\n        const langTag = (lang === 'code') ? '' : lang;\n        // Ensure there's a newline before the closing fence if content doesn't end with one.\n        // And ensure content starts with a newline if it doesn't already, for consistency.\n        if (innerContent && !innerContent.startsWith('\\n') && lang !== 'svg') { // SVG content might be on one line\n            innerContent = '\\n' + innerContent;\n        }\n        if (innerContent && !innerContent.endsWith('\\n')) {\n          innerContent += '\\n';\n        }\n        // For empty blocks, ensure a newline for valid fence structure\n        if (!innerContent.trim() && !innerContent.includes('\\n')) {\n            innerContent = '\\n';\n        }\n\n        return '\\n```' + langTag + innerContent + '```\\n';\n      }\n    });\n    \n    // Preserve Mermaid diagram blocks with special identifiers\n    this.turndownService.addRule('mermaid', {\n      filter: node => {\n        return node.nodeName === 'DIV' && \n               node.classList.contains('mermaid');\n      },\n      replacement: (content, node) => {\n        // Generate a unique ID for this mermaid block to help with matching later\n        const blockId = 'mermaid_' + Math.random().toString(36).substring(2, 10);\n        \n        // Store the raw content for later use\n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'mermaid',\n            content: node.textContent\n          });\n        }\n        \n        // Return with special marker that can be identified later\n        return `\\n<div data-special-block=\"${blockId}\" class=\"mermaid\">\\n` +\n               node.textContent + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    /*\n    // Preserve SVG elements with special identifiers\n    this.turndownService.addRule('svg', {\n      filter: node => {\n        // Only apply this rule if the SVG is NOT inside one of our data-source-type divs\n        // and has one of our specific identifiers (e.g., an id starting with \"squib-svg-\")\n        // or if it does not have a data-source-type attribute itself.\n        const isInsideSquibDiv = node.closest('div[data-source-type]');\n        const hasSquibIdentifier = node.id && node.id.startsWith('squib-svg-'); // Example identifier\n        const isSpecialSquibSvg = node.hasAttribute('data-source-type') && node.getAttribute('data-source-type') === 'svg';\n\n        if (isInsideSquibDiv || isSpecialSquibSvg) {\n          // console.warn('[HtmlToMarkdown] SVG rule: Skipping SVG inside data-source-type div or special SVG.');\n          return false; // Don't process if it's already handled or should be handled by squibviewFencedBlock\n        }\n        // console.warn('[HtmlToMarkdown] SVG rule: Processing standalone SVG:', node.outerHTML.substring(0,100));\n        return node.nodeName === 'SVG' && hasSquibIdentifier; // Or other conditions for standalone SVGs\n      },\n      replacement: function (content, node) {\n        // console.warn('[HtmlToMarkdown] SVG rule: Replacing with outerHTML for node:', node.outerHTML.substring(0,100));\n        return node.outerHTML; // Preserve the whole SVG tag\n      }\n    });\n    */\n\n    // Preserve GeoJSON map blocks\n    this.turndownService.addRule('geojson', {\n      filter: node => {\n        return node.nodeName === 'DIV' && \n               node.classList.contains('geojson-map');\n      },\n      replacement: (content, node) => {\n        // Generate a unique ID for this GeoJSON block\n        const blockId = 'geojson_' + Math.random().toString(36).substring(2, 10);\n        \n        // Try to extract the GeoJSON data from the script element\n        let geojsonContent = '';\n        try {\n          // The actual GeoJSON would be in a script tag or in a data attribute\n          // Here we'll use a placeholder since the actual data is hard to extract\n          geojsonContent = node.dataset.geojson || '{\"type\":\"FeatureCollection\",\"features\":[]}';\n        } catch(e) {\n          console.error('Error extracting GeoJSON data:', e);\n        }\n        \n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'geojson',\n            content: geojsonContent\n          });\n        }\n        \n        return `\\n<div data-special-block=\"${blockId}\" class=\"geojson-container\">\\n` +\n               geojsonContent + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    // Preserve Math blocks\n    this.turndownService.addRule('math', {\n      filter: node => {\n        return node.nodeName === 'DIV' && \n               node.classList.contains('math-display');\n      },\n      replacement: (content, node) => {\n        // Generate a unique ID for this math block\n        const blockId = 'math_' + Math.random().toString(36).substring(2, 10);\n        \n        // Get the raw math content (might be wrapped in $$...$$ in the original)\n        let mathContent = node.textContent;\n        \n        // Remove $$ delimiters if present\n        mathContent = mathContent.replace(/^\\$\\$([\\s\\S]*)\\$\\$$/, '$1');\n        \n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'math',\n            content: mathContent\n          });\n        }\n        \n        return `\\n<div data-special-block=\"${blockId}\" class=\"math-container\">\\n` +\n               mathContent + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    // Special handling for code blocks\n    this.turndownService.addRule('codeBlock', {\n      filter: node => {\n        return node.nodeName === 'PRE' && \n               node.firstChild && \n               node.firstChild.nodeName === 'CODE';\n      },\n      replacement: (content, node) => {\n        const code = node.firstChild.textContent;\n        let language = '';\n        \n        // Try to detect language from class\n        if (node.firstChild.className) {\n          const match = node.firstChild.className.match(/language-(\\w+)/);\n          if (match) {\n            language = match[1];\n          }\n        }\n        \n        return '\\n```' + language + '\\n' + code.trim() + '\\n```\\n';\n      }\n    });\n    \n    // Improve table handling\n    this.turndownService.addRule('tableCell', {\n      filter: ['th', 'td'],\n      replacement: (content, node) => {\n        return ' ' + content.trim() + ' |';\n      }\n    });\n    \n    this.turndownService.addRule('tableRow', {\n      filter: 'tr',\n      replacement: (content, node) => {\n        let prefix = '|';\n        \n        // Handle header rows\n        if (node.parentNode.nodeName === 'THEAD') {\n          const cells = node.querySelectorAll('th, td').length;\n          const separatorRow = '\\n|' + ' --- |'.repeat(cells);\n          return prefix + content + separatorRow;\n        }\n        \n        return prefix + content + '\\n';\n      }\n    });\n    \n    this.turndownService.addRule('table', {\n      filter: 'table',\n      replacement: (content, node) => {\n        // If this table is inside our data-source-type div, it's already handled.\n        if (node.parentElement && node.parentElement.hasAttribute('data-source-type')) {\n          const type = node.parentElement.getAttribute('data-source-type');\n          if (type === 'csv' || type === 'tsv' || type === 'psv') {\n            return content; // Turndown will process children, but our main rule handles the fence.\n          }\n        }\n        // Default table processing otherwise\n        // (Existing complex table rule logic from Turndown or custom might be here)\n        // For simplicity, using a basic version of Turndown's own table handling as a placeholder\n        // if not already handled by a more specific rule like the one above for data-source-type.\n        let markdown = '';\n        const headerRow = node.querySelector('thead tr');\n        if (headerRow) {\n          markdown += '|';\n          headerRow.querySelectorAll('th').forEach(th => {\n            markdown += ` ${this.turndownService.turndown(th.innerHTML).trim()} |`;\n          });\n          markdown += '\\n|';\n          headerRow.querySelectorAll('th').forEach(() => {\n            markdown += ' --- |';\n          });\n          markdown += '\\n';\n        }\n\n        const bodyRows = node.querySelectorAll('tbody tr');\n        bodyRows.forEach(row => {\n          markdown += '|';\n          row.querySelectorAll('td').forEach(td => {\n            markdown += ` ${this.turndownService.turndown(td.innerHTML).trim()} |`;\n          });\n          markdown += '\\n';\n        });\n        return '\\n' + markdown + '\\n';\n      }\n    });\n\n    // Ensure this class is aware of custom GFM task list items if not default in Turndown version\n    this.turndownService.keep(['li']); // Keep <li> to allow custom rule for task list items\n    this.turndownService.addRule('taskListItems', {\n      filter: function (node) {\n        return node.nodeName === 'LI' && node.firstChild && node.firstChild.nodeName === 'INPUT' && node.firstChild.type === 'checkbox';\n      },\n      replacement: function (content, node) {\n        const checkbox = node.firstChild;\n        const checked = checkbox.checked;\n        // Need to remove the input from the content that turndown processes for the <li>\n        // The first child (input) is already handled, process the rest of the <li> content.\n        // Create a temporary div to hold the rest of the li children\n        let restOfLiContent = '';\n        let current = checkbox.nextSibling;\n        while(current) {\n            restOfLiContent += current.outerHTML || current.textContent;\n            current = current.nextSibling;\n        }\n        // Turndown the rest of the LI content\n        const markdownContent = this.turndownService.turndown(restOfLiContent).trim(); \n        return (checked ? '[x] ' : '[ ] ') + markdownContent;\n      }\n    });\n  }\n  \n  /**\n   * Get a simplified hash code of a string for caching\n   * \n   * @private\n   * @param {string} str - The string to hash\n   * @returns {string} A hash representation of the string\n   */\n  _getStringHash(str) {\n    // Simple and fast hash function for strings\n    // This is not a cryptographic hash, just for caching purposes\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash.toString(36); // Convert to base36 for shorter string\n  }\n  \n  /**\n   * Convert HTML to Markdown with caching for performance\n   * \n   * @param {string} html - The HTML content to convert\n   * @param {Object} options - Additional options\n   * @param {string} options.originalSource - The original source if available\n   * @returns {string} The converted Markdown content\n   */\n  convert(html, options = {}) {\n    console.warn('[HtmlToMarkdown] CONVERT METHOD CALLED. HTML input (first 100 chars):', html.substring(0, 100));\n    // Clear special blocks map for this conversion\n    this._specialBlocks.clear();\n    \n    // Use a hash of the HTML as the cache key\n    const cacheKey = this._getStringHash(html);\n    \n    // Check if we have a cached version\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey);\n    }\n    \n    // Convert the HTML to Markdown\n    let markdown = this.turndownService.turndown(html);\n    \n    // Post-process the markdown to restore special blocks\n    markdown = this._postProcessMarkdown(markdown, options.originalSource);\n    \n    // Cache the result\n    this.cache.set(cacheKey, markdown);\n    \n    // Keep the cache size under control\n    if (this.cache.size > this.cacheSize) {\n      // Remove the oldest entry\n      const firstKey = this.cache.keys().next().value;\n      this.cache.delete(firstKey);\n    }\n    \n    return markdown;\n  }\n  \n  /**\n   * Post-process markdown to restore special blocks and apply additional formatting\n   * \n   * @private\n   * @param {string} markdown - The converted markdown \n   * @param {string} originalSource - The original markdown source if available\n   * @returns {string} - The processed markdown\n   */\n  _postProcessMarkdown(markdown, originalSource) {\n    // First pass: Convert the special blocks markers back to proper markdown\n    \n    // Convert mermaid blocks\n    const mermaidBlockRegex = /<div data-special-block=\"mermaid_[^\"]*\" class=\"mermaid\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(mermaidBlockRegex, (match, content) => {\n      return `\\n\\`\\`\\`mermaid\\n${content.trim()}\\n\\`\\`\\`\\n`;\n    });\n    \n    // Convert SVG blocks\n    const svgBlockRegex = /<div data-special-block=\"svg_[^\"]*\" class=\"svg-container\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(svgBlockRegex, (match, content) => {\n      // Try to find a closing SVG tag\n      const svgMatch = content.match(/<svg[\\s\\S]*?<\\/svg>/);\n      if (svgMatch) {\n        return `\\n\\`\\`\\`svg\\n${svgMatch[0]}\\n\\`\\`\\`\\n`;\n      }\n      return match;\n    });\n    \n    // Convert GeoJSON blocks\n    const geojsonBlockRegex = /<div data-special-block=\"geojson_[^\"]*\" class=\"geojson-container\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(geojsonBlockRegex, (match, content) => {\n      try {\n        // Ensure content is valid JSON before creating the code block\n        JSON.parse(content);\n        return `\\n\\`\\`\\`geojson\\n${content.trim()}\\n\\`\\`\\`\\n`;\n      } catch (e) {\n        console.error('Invalid GeoJSON data:', e);\n        return `\\n\\`\\`\\`geojson\\n{\"type\":\"FeatureCollection\",\"features\":[]}\\n\\`\\`\\`\\n`;\n      }\n    });\n    \n    // Convert Math blocks\n    const mathBlockRegex = /<div data-special-block=\"math_[^\"]*\" class=\"math-container\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(mathBlockRegex, (match, content) => {\n      return `\\n\\`\\`\\`math\\n${content.trim()}\\n\\`\\`\\`\\n`;\n    });\n    \n    // Second pass: Restore blocks from original source if possible\n    if (originalSource) {\n      // Extract code blocks from original source\n      const codeBlockRegex = /```(\\w+)\\s*([\\s\\S]*?)```/g;\n      let match;\n      let blockIndex = 0;\n      const originalBlocks = [];\n      \n      while ((match = codeBlockRegex.exec(originalSource)) !== null) {\n        const type = match[1];\n        const content = match[2];\n        \n        if (type === 'mermaid' || type === 'svg' || type === 'geojson' || type === 'math') {\n          originalBlocks.push({\n            type,\n            content: match[0],\n            index: blockIndex++\n          });\n        }\n      }\n      \n      // Try to match original blocks with current blocks\n      // This is a simplistic approach that assumes blocks are in the same order\n      \n      let mermaidIndex = 0;\n      let svgIndex = 0;\n      let geojsonIndex = 0;\n      let mathIndex = 0;\n      \n      // Replace mermaid blocks\n      markdown = markdown.replace(/```mermaid\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const mermaidBlocks = originalBlocks.filter(b => b.type === 'mermaid');\n        if (mermaidIndex < mermaidBlocks.length) {\n          return mermaidBlocks[mermaidIndex++].content;\n        }\n        return match;\n      });\n      \n      // Replace SVG blocks\n      markdown = markdown.replace(/```svg\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const svgBlocks = originalBlocks.filter(b => b.type === 'svg');\n        if (svgIndex < svgBlocks.length) {\n          return svgBlocks[svgIndex++].content;\n        }\n        return match;\n      });\n      \n      // Replace GeoJSON blocks\n      markdown = markdown.replace(/```geojson\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const geojsonBlocks = originalBlocks.filter(b => b.type === 'geojson');\n        if (geojsonIndex < geojsonBlocks.length) {\n          return geojsonBlocks[geojsonIndex++].content;\n        }\n        return match;\n      });\n      \n      // Replace Math blocks\n      markdown = markdown.replace(/```math\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const mathBlocks = originalBlocks.filter(b => b.type === 'math');\n        if (mathIndex < mathBlocks.length) {\n          return mathBlocks[mathIndex++].content;\n        }\n        return match;\n      });\n    }\n    \n    return markdown;\n  }\n\n  /**\n   * Converts an HTML table element to a delimited string (CSV, TSV, etc.).\n   * @param {HTMLTableElement} tableElement The HTML table element.\n   * @param {string} type The type of delimited format ('csv', 'tsv', 'psv').\n   * @returns {string} The delimited text representation of the table.\n   * @private\n   */\n  _htmlTableToDelimitedText(tableElement, type) {\n    let delimiter;\n    switch (type) {\n      case 'csv': delimiter = ','; break;\n      case 'tsv': delimiter = '\\t'; break;\n      case 'psv': delimiter = '|'; break;\n      default:    delimiter = ','; // Default to CSV\n    }\n\n    const data = [];\n    const rows = tableElement.querySelectorAll('tr');\n\n    rows.forEach(row => {\n      const rowData = [];\n      const cells = row.querySelectorAll('th, td');\n      cells.forEach(cell => {\n        // Basic text content extraction. For complex cell content, might need refinement.\n        // Replace newlines within a cell with a space, trim content.\n        let cellText = cell.textContent || '';\n        cellText = cellText.replace(/\\r?\\n|\\r/g, ' ').trim();\n        // If delimiter is comma, and cellText contains comma, quote it.\n        if (delimiter === ',' && cellText.includes(',')) {\n          cellText = `\"${cellText.replace(/\"/g, '\"\"')}\"`;\n        }\n        // If delimiter is tab, and cellText contains tab, it might be an issue depending on consumer.\n        // For PSV, if cellText contains pipe, it's an issue unless handled by quoting (not standard for PSV).\n        rowData.push(cellText);\n      });\n      data.push(rowData.join(delimiter));\n    });\n\n    return data.join('\\n');\n  }\n}"],"names":["HtmlToMarkdown","_createClass","options","arguments","length","undefined","_classCallCheck","console","warn","this","turndownService","TurndownService","_objectSpread","headingStyle","codeBlockStyle","emDelimiter","bulletListMarker","cache","Map","cacheSize","_specialBlocks","configureTurndownRules","key","value","_this","addRule","filter","replacement","content","node","outerHTML","nodeName","concat","getAttribute","className","id","substring","hasAttr","hasAttribute","lang","innerContent","contentFromHtml","innerHTML","replace","tempDiv","document","createElement","textContent","innerText","trim","tableElement","querySelector","_htmlTableToDelimitedText","preElement","trimEnd","langTag","startsWith","endsWith","includes","classList","contains","blockId","Math","random","toString","set","type","geojsonContent","dataset","geojson","e","error","mathContent","firstChild","code","language","match","parentNode","cells","querySelectorAll","repeat","parentElement","markdown","headerRow","forEach","th","turndown","row","td","keep","checkbox","checked","restOfLiContent","current","nextSibling","str","hash","i","charCodeAt","html","clear","cacheKey","_getStringHash","has","get","_postProcessMarkdown","originalSource","size","firstKey","keys","next","svgMatch","JSON","parse","codeBlockRegex","blockIndex","originalBlocks","exec","push","index","mermaidIndex","svgIndex","geojsonIndex","mathIndex","mermaidBlocks","b","svgBlocks","geojsonBlocks","mathBlocks","delimiter","data","rowData","cell","cellText","join"],"mappings":"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"}