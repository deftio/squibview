{"version":3,"file":"html-to-markdown.min.js","sources":["../src/HtmlToMarkdown.js"],"sourcesContent":["import TurndownService from 'turndown';\n\n/**\n * Converts HTML content to Markdown format using the Turndown library with \n * customizations specific to SquibView's needs.\n */\nexport default class HtmlToMarkdown {\n  constructor(options = {}) {\n    console.warn('[HtmlToMarkdown] CONSTRUCTOR CALLED');\n    this.turndownService = new TurndownService({\n      headingStyle: 'atx',       // Use # style headings\n      codeBlockStyle: 'fenced',  // Use ``` style code blocks\n      emDelimiter: '*',          // Use * for emphasis\n      bulletListMarker: '-',     // Use - for bullet lists\n      ...options\n    });\n    \n    // Add a simple cache for converted content to improve performance\n    this.cache = new Map();\n    this.cacheSize = options.cacheSize || 10;\n    \n    // Store special blocks for preservation\n    this._specialBlocks = new Map();\n    \n    this.configureTurndownRules();\n  }\n  \n  /**\n   * Configure custom Turndown rules\n   */\n  configureTurndownRules() {\n    // Preserve HTML image tags by returning their outerHTML\n    this.turndownService.addRule('keepImageTags', {\n      filter: 'img',\n      replacement: function (content, node) {\n        return node.outerHTML;\n      }\n    });\n\n    // Rule for our data-source-type wrapper divs - should be high priority\n    this.turndownService.addRule('squibviewFencedBlock', {\n      filter: (node) => {\n        const hasAttr = node.nodeName === 'DIV' && node.hasAttribute('data-source-type');\n        if (hasAttr) {\n          const lang = node.getAttribute('data-source-type') || 'code';\n          console.warn(`[HtmlToMarkdown] squibviewFencedBlock filter: Matched div with data-source-type=\"${lang}\". Node outerHTML:`, node.outerHTML);\n        }\n        return hasAttr;\n      },\n      replacement: (content, node, options) => {\n        const lang = node.getAttribute('data-source-type') || 'code';\n        let innerContent = '';\n\n        switch (lang) {\n          case 'mermaid':\n          case 'math':\n            let contentFromHtml = node.innerHTML;\n            // Convert <br> tags to newlines first\n            contentFromHtml = contentFromHtml.replace(/<br\\s*\\/?>/gi, '\\n');\n            // Strip any other HTML tags (simple regex, not for complex/nested HTML)\n            contentFromHtml = contentFromHtml.replace(/<[^>]+>/g, '');\n            // Use a textarea to unescape HTML entities & normalize\n            const tempTextArea = document.createElement('textarea');\n            tempTextArea.innerHTML = contentFromHtml;\n            innerContent = tempTextArea.value.trim();\n            break;\n          case 'svg':\n            // This console.warn is inside the replacement. If not reached, filter or lang extraction is the issue.\n            console.warn('[HtmlToMarkdown] squibviewFencedBlock REPLACEMENT for SVG. Node outerHTML:', node.outerHTML, 'Node innerHTML:', node.innerHTML);\n            innerContent = node.innerHTML.trim();\n            break;\n          case 'csv':\n          case 'tsv':\n          case 'psv':\n            const tableElement = node.querySelector('table');\n            if (tableElement) {\n              innerContent = this._htmlTableToDelimitedText(tableElement, lang);\n            } else {\n              innerContent = 'Error: Table not found for ' + lang;\n              console.warn('Could not find table inside div[data-source-type=\"' + lang + '\"]');\n            }\n            break;\n          default: // Handles 'javascript', 'python', 'code', etc.\n            const preElement = node.querySelector('pre');\n            if (preElement) {\n              const codeElement = preElement.querySelector('code');\n              // textContent of <code> or <pre> contains the code.\n              innerContent = (codeElement || preElement).textContent.trimEnd(); // trimEnd to preserve leading newlines if any, but remove trailing ones from block.\n            } else {\n              // Fallback if <pre> not found (e.g. if it was just a div with code)\n              innerContent = node.textContent.trimEnd();\n               console.warn('Could not find <pre> inside div[data-source-type=\"' + lang + '\"]');\n            }\n            break;\n        }\n\n        const langTag = (lang === 'code') ? '' : lang;\n        // Ensure there's a newline before the closing fence if content doesn't end with one.\n        if (innerContent && !innerContent.endsWith('\\n')) {\n          innerContent += '\\n';\n        }\n        return '\\n```' + langTag + '\\n' + innerContent + '```\\n';\n      }\n    });\n    \n    // Preserve Mermaid diagram blocks with special identifiers\n    this.turndownService.addRule('mermaid', {\n      filter: node => {\n        return node.nodeName === 'DIV' && \n               node.classList.contains('mermaid');\n      },\n      replacement: (content, node) => {\n        // Generate a unique ID for this mermaid block to help with matching later\n        const blockId = 'mermaid_' + Math.random().toString(36).substring(2, 10);\n        \n        // Store the raw content for later use\n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'mermaid',\n            content: node.textContent\n          });\n        }\n        \n        // Return with special marker that can be identified later\n        return `\\n<div data-special-block=\"${blockId}\" class=\"mermaid\">\\n` +\n               node.textContent + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    // Preserve SVG elements with special identifiers\n    this.turndownService.addRule('svg', {\n      filter: node => {\n        const isSvg = node.nodeName === 'SVG';\n        const isChildOfSquibViewSvgDiv = !!(node.parentElement && node.parentElement.nodeName === 'DIV' && node.parentElement.getAttribute('data-source-type') === 'svg');\n        if (isSvg) {\n          console.warn(`[HtmlToMarkdown] standalone 'svg' rule filter: Matched <svg>. Is child of SquibView SVG div? ${isChildOfSquibViewSvgDiv}. Node outerHTML:`, node.outerHTML);\n        }\n        return isSvg && !isChildOfSquibViewSvgDiv;\n      },\n      replacement: (content, node) => {\n        // Generate a unique ID for this SVG block\n        const blockId = 'svg_' + Math.random().toString(36).substring(2, 10);\n        \n        // Store the raw SVG for later use\n        const serializer = new XMLSerializer();\n        const svgString = serializer.serializeToString(node);\n        \n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'svg',\n            content: svgString\n          });\n        }\n        \n        // Return with special marker\n        return `\\n<div data-special-block=\"${blockId}\" class=\"svg-container\">\\n` +\n               svgString + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    // Preserve GeoJSON map blocks\n    this.turndownService.addRule('geojson', {\n      filter: node => {\n        return node.nodeName === 'DIV' && \n               node.classList.contains('geojson-map');\n      },\n      replacement: (content, node) => {\n        // Generate a unique ID for this GeoJSON block\n        const blockId = 'geojson_' + Math.random().toString(36).substring(2, 10);\n        \n        // Try to extract the GeoJSON data from the script element\n        let geojsonContent = '';\n        try {\n          // The actual GeoJSON would be in a script tag or in a data attribute\n          // Here we'll use a placeholder since the actual data is hard to extract\n          geojsonContent = node.dataset.geojson || '{\"type\":\"FeatureCollection\",\"features\":[]}';\n        } catch(e) {\n          console.error('Error extracting GeoJSON data:', e);\n        }\n        \n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'geojson',\n            content: geojsonContent\n          });\n        }\n        \n        return `\\n<div data-special-block=\"${blockId}\" class=\"geojson-container\">\\n` +\n               geojsonContent + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    // Preserve Math blocks\n    this.turndownService.addRule('math', {\n      filter: node => {\n        return node.nodeName === 'DIV' && \n               node.classList.contains('math-display');\n      },\n      replacement: (content, node) => {\n        // Generate a unique ID for this math block\n        const blockId = 'math_' + Math.random().toString(36).substring(2, 10);\n        \n        // Get the raw math content (might be wrapped in $$...$$ in the original)\n        let mathContent = node.textContent;\n        \n        // Remove $$ delimiters if present\n        mathContent = mathContent.replace(/^\\$\\$([\\s\\S]*)\\$\\$$/, '$1');\n        \n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'math',\n            content: mathContent\n          });\n        }\n        \n        return `\\n<div data-special-block=\"${blockId}\" class=\"math-container\">\\n` +\n               mathContent + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    // Special handling for code blocks\n    this.turndownService.addRule('codeBlock', {\n      filter: node => {\n        return node.nodeName === 'PRE' && \n               node.firstChild && \n               node.firstChild.nodeName === 'CODE';\n      },\n      replacement: (content, node) => {\n        const code = node.firstChild.textContent;\n        let language = '';\n        \n        // Try to detect language from class\n        if (node.firstChild.className) {\n          const match = node.firstChild.className.match(/language-(\\w+)/);\n          if (match) {\n            language = match[1];\n          }\n        }\n        \n        return '\\n```' + language + '\\n' + code.trim() + '\\n```\\n';\n      }\n    });\n    \n    // Improve table handling\n    this.turndownService.addRule('tableCell', {\n      filter: ['th', 'td'],\n      replacement: (content, node) => {\n        return ' ' + content.trim() + ' |';\n      }\n    });\n    \n    this.turndownService.addRule('tableRow', {\n      filter: 'tr',\n      replacement: (content, node) => {\n        let prefix = '|';\n        \n        // Handle header rows\n        if (node.parentNode.nodeName === 'THEAD') {\n          const cells = node.querySelectorAll('th, td').length;\n          const separatorRow = '\\n|' + ' --- |'.repeat(cells);\n          return prefix + content + separatorRow;\n        }\n        \n        return prefix + content + '\\n';\n      }\n    });\n    \n    this.turndownService.addRule('table', {\n      filter: 'table',\n      replacement: (content, node) => {\n        // If this table is inside our data-source-type div, it's already handled.\n        if (node.parentElement && node.parentElement.hasAttribute('data-source-type')) {\n          const type = node.parentElement.getAttribute('data-source-type');\n          if (type === 'csv' || type === 'tsv' || type === 'psv') {\n            return content; // Turndown will process children, but our main rule handles the fence.\n          }\n        }\n        // Default table processing otherwise\n        // (Existing complex table rule logic from Turndown or custom might be here)\n        // For simplicity, using a basic version of Turndown's own table handling as a placeholder\n        // if not already handled by a more specific rule like the one above for data-source-type.\n        let markdown = '';\n        const headerRow = node.querySelector('thead tr');\n        if (headerRow) {\n          markdown += '|';\n          headerRow.querySelectorAll('th').forEach(th => {\n            markdown += ` ${this.turndownService.turndown(th.innerHTML).trim()} |`;\n          });\n          markdown += '\\n|';\n          headerRow.querySelectorAll('th').forEach(() => {\n            markdown += ' --- |';\n          });\n          markdown += '\\n';\n        }\n\n        const bodyRows = node.querySelectorAll('tbody tr');\n        bodyRows.forEach(row => {\n          markdown += '|';\n          row.querySelectorAll('td').forEach(td => {\n            markdown += ` ${this.turndownService.turndown(td.innerHTML).trim()} |`;\n          });\n          markdown += '\\n';\n        });\n        return '\\n' + markdown + '\\n';\n      }\n    });\n\n    // Ensure this class is aware of custom GFM task list items if not default in Turndown version\n    this.turndownService.keep(['li']); // Keep <li> to allow custom rule for task list items\n    this.turndownService.addRule('taskListItems', {\n      filter: function (node) {\n        return node.nodeName === 'LI' && node.firstChild && node.firstChild.nodeName === 'INPUT' && node.firstChild.type === 'checkbox';\n      },\n      replacement: function (content, node) {\n        const checkbox = node.firstChild;\n        const checked = checkbox.checked;\n        // Need to remove the input from the content that turndown processes for the <li>\n        // The first child (input) is already handled, process the rest of the <li> content.\n        // Create a temporary div to hold the rest of the li children\n        let restOfLiContent = '';\n        let current = checkbox.nextSibling;\n        while(current) {\n            restOfLiContent += current.outerHTML || current.textContent;\n            current = current.nextSibling;\n        }\n        // Turndown the rest of the LI content\n        const markdownContent = this.turndownService.turndown(restOfLiContent).trim(); \n        return (checked ? '[x] ' : '[ ] ') + markdownContent;\n      }\n    });\n  }\n  \n  /**\n   * Get a simplified hash code of a string for caching\n   * \n   * @private\n   * @param {string} str - The string to hash\n   * @returns {string} A hash representation of the string\n   */\n  _getStringHash(str) {\n    // Simple and fast hash function for strings\n    // This is not a cryptographic hash, just for caching purposes\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash.toString(36); // Convert to base36 for shorter string\n  }\n  \n  /**\n   * Convert HTML to Markdown with caching for performance\n   * \n   * @param {string} html - The HTML content to convert\n   * @param {Object} options - Additional options\n   * @param {string} options.originalSource - The original source if available\n   * @returns {string} The converted Markdown content\n   */\n  convert(html, options = {}) {\n    console.warn('[HtmlToMarkdown] CONVERT METHOD CALLED. HTML input (first 100 chars):', html.substring(0, 100));\n    // Clear special blocks map for this conversion\n    this._specialBlocks.clear();\n    \n    // Use a hash of the HTML as the cache key\n    const cacheKey = this._getStringHash(html);\n    \n    // Check if we have a cached version\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey);\n    }\n    \n    // Convert the HTML to Markdown\n    let markdown = this.turndownService.turndown(html);\n    \n    // Post-process the markdown to restore special blocks\n    markdown = this._postProcessMarkdown(markdown, options.originalSource);\n    \n    // Cache the result\n    this.cache.set(cacheKey, markdown);\n    \n    // Keep the cache size under control\n    if (this.cache.size > this.cacheSize) {\n      // Remove the oldest entry\n      const firstKey = this.cache.keys().next().value;\n      this.cache.delete(firstKey);\n    }\n    \n    return markdown;\n  }\n  \n  /**\n   * Post-process markdown to restore special blocks and apply additional formatting\n   * \n   * @private\n   * @param {string} markdown - The converted markdown \n   * @param {string} originalSource - The original markdown source if available\n   * @returns {string} - The processed markdown\n   */\n  _postProcessMarkdown(markdown, originalSource) {\n    // First pass: Convert the special blocks markers back to proper markdown\n    \n    // Convert mermaid blocks\n    const mermaidBlockRegex = /<div data-special-block=\"mermaid_[^\"]*\" class=\"mermaid\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(mermaidBlockRegex, (match, content) => {\n      return `\\n\\`\\`\\`mermaid\\n${content.trim()}\\n\\`\\`\\`\\n`;\n    });\n    \n    // Convert SVG blocks\n    const svgBlockRegex = /<div data-special-block=\"svg_[^\"]*\" class=\"svg-container\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(svgBlockRegex, (match, content) => {\n      // Try to find a closing SVG tag\n      const svgMatch = content.match(/<svg[\\s\\S]*?<\\/svg>/);\n      if (svgMatch) {\n        return `\\n\\`\\`\\`svg\\n${svgMatch[0]}\\n\\`\\`\\`\\n`;\n      }\n      return match;\n    });\n    \n    // Convert GeoJSON blocks\n    const geojsonBlockRegex = /<div data-special-block=\"geojson_[^\"]*\" class=\"geojson-container\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(geojsonBlockRegex, (match, content) => {\n      try {\n        // Ensure content is valid JSON before creating the code block\n        JSON.parse(content);\n        return `\\n\\`\\`\\`geojson\\n${content.trim()}\\n\\`\\`\\`\\n`;\n      } catch (e) {\n        console.error('Invalid GeoJSON data:', e);\n        return `\\n\\`\\`\\`geojson\\n{\"type\":\"FeatureCollection\",\"features\":[]}\\n\\`\\`\\`\\n`;\n      }\n    });\n    \n    // Convert Math blocks\n    const mathBlockRegex = /<div data-special-block=\"math_[^\"]*\" class=\"math-container\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(mathBlockRegex, (match, content) => {\n      return `\\n\\`\\`\\`math\\n${content.trim()}\\n\\`\\`\\`\\n`;\n    });\n    \n    // Second pass: Restore blocks from original source if possible\n    if (originalSource) {\n      // Extract code blocks from original source\n      const codeBlockRegex = /```(\\w+)\\s*([\\s\\S]*?)```/g;\n      let match;\n      let blockIndex = 0;\n      const originalBlocks = [];\n      \n      while ((match = codeBlockRegex.exec(originalSource)) !== null) {\n        const type = match[1];\n        const content = match[2];\n        \n        if (type === 'mermaid' || type === 'svg' || type === 'geojson' || type === 'math') {\n          originalBlocks.push({\n            type,\n            content: match[0],\n            index: blockIndex++\n          });\n        }\n      }\n      \n      // Try to match original blocks with current blocks\n      // This is a simplistic approach that assumes blocks are in the same order\n      \n      let mermaidIndex = 0;\n      let svgIndex = 0;\n      let geojsonIndex = 0;\n      let mathIndex = 0;\n      \n      // Replace mermaid blocks\n      markdown = markdown.replace(/```mermaid\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const mermaidBlocks = originalBlocks.filter(b => b.type === 'mermaid');\n        if (mermaidIndex < mermaidBlocks.length) {\n          return mermaidBlocks[mermaidIndex++].content;\n        }\n        return match;\n      });\n      \n      // Replace SVG blocks\n      markdown = markdown.replace(/```svg\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const svgBlocks = originalBlocks.filter(b => b.type === 'svg');\n        if (svgIndex < svgBlocks.length) {\n          return svgBlocks[svgIndex++].content;\n        }\n        return match;\n      });\n      \n      // Replace GeoJSON blocks\n      markdown = markdown.replace(/```geojson\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const geojsonBlocks = originalBlocks.filter(b => b.type === 'geojson');\n        if (geojsonIndex < geojsonBlocks.length) {\n          return geojsonBlocks[geojsonIndex++].content;\n        }\n        return match;\n      });\n      \n      // Replace Math blocks\n      markdown = markdown.replace(/```math\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const mathBlocks = originalBlocks.filter(b => b.type === 'math');\n        if (mathIndex < mathBlocks.length) {\n          return mathBlocks[mathIndex++].content;\n        }\n        return match;\n      });\n    }\n    \n    return markdown;\n  }\n\n  /**\n   * Converts an HTML table element to a delimited string (CSV, TSV, etc.).\n   * @param {HTMLTableElement} tableElement The HTML table element.\n   * @param {string} type The type of delimited format ('csv', 'tsv', 'psv').\n   * @returns {string} The delimited text representation of the table.\n   * @private\n   */\n  _htmlTableToDelimitedText(tableElement, type) {\n    let delimiter;\n    switch (type) {\n      case 'csv': delimiter = ','; break;\n      case 'tsv': delimiter = '\\t'; break;\n      case 'psv': delimiter = '|'; break;\n      default:    delimiter = ','; // Default to CSV\n    }\n\n    const data = [];\n    const rows = tableElement.querySelectorAll('tr');\n\n    rows.forEach(row => {\n      const rowData = [];\n      const cells = row.querySelectorAll('th, td');\n      cells.forEach(cell => {\n        // Basic text content extraction. For complex cell content, might need refinement.\n        // Replace newlines within a cell with a space, trim content.\n        let cellText = cell.textContent || '';\n        cellText = cellText.replace(/\\r?\\n|\\r/g, ' ').trim();\n        // If delimiter is comma, and cellText contains comma, quote it.\n        if (delimiter === ',' && cellText.includes(',')) {\n          cellText = `\"${cellText.replace(/\"/g, '\"\"')}\"`;\n        }\n        // If delimiter is tab, and cellText contains tab, it might be an issue depending on consumer.\n        // For PSV, if cellText contains pipe, it's an issue unless handled by quoting (not standard for PSV).\n        rowData.push(cellText);\n      });\n      data.push(rowData.join(delimiter));\n    });\n\n    return data.join('\\n');\n  }\n}"],"names":["HtmlToMarkdown","_createClass","options","arguments","length","undefined","_classCallCheck","console","warn","this","turndownService","TurndownService","_objectSpread","headingStyle","codeBlockStyle","emDelimiter","bulletListMarker","cache","Map","cacheSize","_specialBlocks","configureTurndownRules","key","value","_this","addRule","filter","replacement","content","node","outerHTML","hasAttr","nodeName","hasAttribute","lang","getAttribute","concat","innerContent","contentFromHtml","innerHTML","replace","tempTextArea","document","createElement","trim","tableElement","querySelector","_htmlTableToDelimitedText","preElement","textContent","trimEnd","langTag","endsWith","classList","contains","blockId","Math","random","toString","substring","set","type","isSvg","isChildOfSquibViewSvgDiv","parentElement","svgString","XMLSerializer","serializeToString","geojsonContent","dataset","geojson","e","error","mathContent","firstChild","code","language","className","match","parentNode","cells","querySelectorAll","repeat","markdown","headerRow","forEach","th","turndown","row","td","keep","checkbox","checked","restOfLiContent","current","nextSibling","str","hash","i","charCodeAt","html","clear","cacheKey","_getStringHash","has","get","_postProcessMarkdown","originalSource","size","firstKey","keys","next","svgMatch","JSON","parse","codeBlockRegex","blockIndex","originalBlocks","exec","push","index","mermaidIndex","svgIndex","geojsonIndex","mathIndex","mermaidBlocks","b","svgBlocks","geojsonBlocks","mathBlocks","delimiter","data","rowData","cell","cellText","includes","join"],"mappings":"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"}