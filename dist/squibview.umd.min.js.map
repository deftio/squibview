{"version":3,"file":"squibview.umd.min.js","sources":["../node_modules/tiny-emitter/index.js","../node_modules/diff-match-patch/index.js","../src/squibview.js","../node_modules/turndown/lib/turndown.es.js","../src/HtmlToMarkdown.js"],"sourcesContent":["function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n","/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n};\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Class representing one diff tuple.\n * ~Attempts to look like a two-element array (which is what this used to be).~\n * Constructor returns an actual two-element array, to allow destructing @JackuB\n * See https://github.com/JackuB/diff-match-patch/issues/14 for details\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\ndiff_match_patch.Diff = function(op, text) {\n  return [op, text];\n};\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number=} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n  }\n  if (commonsuffix) {\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n             new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n             new diff_match_patch.Diff(DIFF_INSERT,\n                 longtext.substring(i + shorttext.length))];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n            new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n                          diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var subDiff =\n              this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = subDiff.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, subDiff[j]);\n          }\n          pointer = pointer + subDiff.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n          new diff_match_patch.Diff(DIFF_INSERT, text2)];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  // Allocate 2/3rds of the space for text1, the rest for text2.\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var i = 0; i < diffs.length; i++) {\n    var chars = diffs[i][1];\n    var text = [];\n    for (var j = 0; j < chars.length; j++) {\n      text[j] = lineArray[chars.charCodeAt(j)];\n    }\n    diffs[i][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastEquality && (lastEquality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastEquality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              insertion.substring(0, overlap_length1)));\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              deletion.substring(0, overlap_length2)));\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastEquality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastEquality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastEquality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastEquality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                    text_insert.substring(0, commonlength)));\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n          if (text_delete.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_DELETE, text_delete));\n            pointer++;\n          }\n          if (text_insert.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_INSERT, text_insert));\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] =\n              new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n        } else {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  if (patch.start2 === null) {\n    throw Error('patch not initialized');\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // https://github.com/google/diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] =\n          new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indices are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// The following export code was added by @ForbesLindesay\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;","/* SquibView a live md/html/etc Editor/renderer with copy support\n supports markdown, html, and split view\n supports copying of formatted html and markdown\n supports copying of images as data urls\n supports copying of svg as png\n supports copying of tables as formatted tables\n supports copying of code blocks as formatted tables\n by deftio (c) 2024\n*/\n\n// Import required libraries\nimport TinyEmitter from 'tiny-emitter';\nimport DiffMatchPatch from 'diff-match-patch';\n\n/**\n * RevisionManager class handles content revisions with memory-efficient diff storage\n */\nclass RevisionManager {\n  /**\n   * Creates a new RevisionManager instance\n   */\n  constructor() {\n    this.initialContent = '';\n    this.contentType = '';\n    this.diffs = [];\n    this.currentIndex = -1;\n    this.diffEngine = new DiffMatchPatch();\n  }\n  \n  /**\n   * Initializes the revision manager with initial content\n   * \n   * @param {string} content - The initial content\n   * @param {string} contentType - The content type\n   */\n  initialize(content, contentType) {\n    this.initialContent = content;\n    this.contentType = contentType;\n    this.diffs = [];\n    this.currentIndex = -1;\n  }\n  \n  /**\n   * Adds a new revision\n   * \n   * @param {string} newContent - The new content to add as a revision\n   * @param {string} contentType - The content type of the revision\n   */\n  addRevision(newContent, contentType) {\n    // Calculate diff between current state and new state\n    const currentContent = this.getCurrentContent();\n    const diff = this.diffEngine.diff_main(currentContent, newContent);\n    this.diffEngine.diff_cleanupSemantic(diff);\n    const patchText = this.diffEngine.patch_toText(\n      this.diffEngine.patch_make(currentContent, diff)\n    );\n    \n    // Remove any forward history if we're branching\n    if (this.currentIndex < this.diffs.length - 1) {\n      this.diffs = this.diffs.slice(0, this.currentIndex + 1);\n    }\n    \n    // Add new diff and update content type if it changed\n    this.diffs.push({\n      diff: patchText,\n      contentType: contentType !== this.contentType ? contentType : undefined\n    });\n    \n    // Update the content type if it changed\n    if (contentType !== this.contentType) {\n      this.contentType = contentType;\n    }\n    \n    this.currentIndex = this.diffs.length - 1;\n  }\n  \n  /**\n   * Moves backward in the revision history\n   * \n   * @returns {Object|null} The previous revision state or null if at the beginning\n   */\n  undo() {\n    if (this.currentIndex >= 0) {\n      this.currentIndex--;\n      return {\n        content: this.getCurrentContent(),\n        contentType: this.getCurrentContentType()\n      };\n    }\n    return null;\n  }\n  \n  /**\n   * Moves forward in the revision history\n   * \n   * @returns {Object|null} The next revision state or null if at the end\n   */\n  redo() {\n    if (this.currentIndex < this.diffs.length - 1) {\n      this.currentIndex++;\n      return {\n        content: this.getCurrentContent(),\n        contentType: this.getCurrentContentType()\n      };\n    }\n    return null;\n  }\n  \n  /**\n   * Gets the content at the current revision point\n   * \n   * @returns {string} The current content\n   */\n  getCurrentContent() {\n    if (this.currentIndex < 0) return this.initialContent;\n    \n    // Apply all diffs up to currentIndex\n    let content = this.initialContent;\n    for (let i = 0; i <= this.currentIndex; i++) {\n      const patches = this.diffEngine.patch_fromText(this.diffs[i].diff);\n      const [patchedText] = this.diffEngine.patch_apply(patches, content);\n      content = patchedText;\n    }\n    return content;\n  }\n  \n  /**\n   * Gets the content type at the current revision point\n   * \n   * @returns {string} The current content type\n   */\n  getCurrentContentType() {\n    if (this.currentIndex < 0) return this.contentType;\n    \n    // Find the last content type change up to the current index\n    let currentType = this.contentType;\n    for (let i = 0; i <= this.currentIndex; i++) {\n      if (this.diffs[i].contentType !== undefined) {\n        currentType = this.diffs[i].contentType;\n      }\n    }\n    return currentType;\n  }\n  \n  /**\n   * Sets the revision to a specific index\n   * \n   * @param {number} index - The revision index to set\n   * @returns {Object|null} The revision state at the index or null if invalid\n   */\n  setRevision(index) {\n    if (index >= -1 && index < this.diffs.length) {\n      this.currentIndex = index;\n      return {\n        content: this.getCurrentContent(),\n        contentType: this.getCurrentContentType()\n      };\n    }\n    return null;\n  }\n  \n  /**\n   * Returns the total number of revisions\n   * \n   * @returns {number} The number of revisions\n   */\n  getRevisionCount() {\n    return this.diffs.length;\n  }\n  \n  /**\n   * Returns the current index in the revision history\n   * \n   * @returns {number} The current revision index\n   */\n  getCurrentIndex() {\n    return this.currentIndex;\n  }\n}\n\n/**\n * SquibView is a lightweight editor that live-renders different content types\n */\nclass SquibView {\n  static defaultOptions = {\n    initialContent: '',\n    inputContentType: 'md', // 'md', 'html', 'reveal', 'csv' or 'tsv'\n    showControls: true,\n    titleShow: false,\n    titleContent: '',\n    initialView: 'split',\n    baseClass: 'squibview'\n  };\n\n  static version = {\n    version: \"0.0.29a\",\n    url: \"https://github.com/deftio/squibview\"\n  };\n\n  /**\n   * Creates a new SquibView instance.\n   * \n   * @param {HTMLElement|string} element - The DOM element or selector where the editor will be mounted\n   * @param {Object} options - Configuration options for the editor\n   * @param {string} [options.initialContent=''] - Initial content to load\n   * @param {string} [options.inputContentType='md'] - Type of the initial content ('md', 'html', 'reveal', 'csv', 'tsv')\n   * @param {boolean} [options.showControls=true] - Whether to show the control buttons\n   * @param {boolean} [options.titleShow=false] - Whether to show the title section\n   * @param {string} [options.titleContent=''] - Content for the title section\n   * @param {string} [options.initialView='split'] - Initial view mode ('src', 'html', 'split')\n   * @param {string} [options.baseClass='squibview'] - Base CSS class for styling\n   * @throws {Error} Throws if the container element is not found\n   */\n  constructor(element, options = {}) {\n    this.options = { ...SquibView.defaultOptions, ...options };\n    \n    this.container = typeof element === 'string' ? document.querySelector(element) : element;\n\n    if (!this.container) {\n      throw new Error('Container element not found');\n    }\n\n    // Initialize event emitter for plugin communication\n    this.events = new TinyEmitter();\n    \n    // Initialize revision manager\n    this.revisionManager = new RevisionManager();\n    \n    // Initialize renderer registry\n    this.renderers = {};\n    \n    // Initialize HTML to Markdown converter\n    this._initializeHtmlToMarkdown();\n    \n    // Initialize libraries and register default renderers\n    this.initializeLibraries();\n    this.registerDefaultRenderers();\n    \n    // Create DOM structure\n    this.createStructure();\n    this.initializeEventHandlers();\n    this.initializeResizeObserver();\n    \n    // Set initial content\n    if (this.options.initialContent) {\n      this.revisionManager.initialize(this.options.initialContent, this.options.inputContentType);\n      this.setContent(this.options.initialContent, this.options.inputContentType, false);\n    } else {\n      this.revisionManager.initialize('', this.options.inputContentType);\n    }\n    \n    // Set initial view\n    this.setView(this.options.initialView);\n    \n    // Update UI elements based on current content type\n    this.updateTypeButtons();\n  }\n  \n  /**\n   * Initialize the HTML to Markdown converter\n   * \n   * @private\n   */\n  async _initializeHtmlToMarkdown() {\n    try {\n      // Try to load synchronously first for better performance\n      if (typeof HtmlToMarkdown !== 'undefined') {\n        // If HtmlToMarkdown is already available globally (e.g., in UMD build)\n        this._htmlToMarkdownConverter = new HtmlToMarkdown({\n          cacheSize: 20 // Cache up to 20 recent conversions for better performance\n        });\n      } else {\n        // Fall back to dynamic import if needed\n        const module = await import('./HtmlToMarkdown.js');\n        const HtmlToMarkdownClass = module.default;\n        this._htmlToMarkdownConverter = new HtmlToMarkdownClass({\n          cacheSize: 20\n        });\n      }\n    } catch (err) {\n      console.error('Failed to load HtmlToMarkdown module:', err);\n      // Provide a minimal fallback implementation\n      this._htmlToMarkdownConverter = {\n        convert: (html) => {\n          const div = document.createElement('div');\n          div.innerHTML = html;\n          return div.textContent;\n        }\n      };\n    }\n  }\n\n  /**\n   * Initializes the required libraries for rendering content.\n   * Sets up Mermaid for diagrams and markdown-it for Markdown processing.\n   * \n   * @private\n   */\n  initializeLibraries() {\n    // Initialize Mermaid for diagram rendering\n    mermaid.initialize({\n      startOnLoad: false,\n      securityLevel: 'loose',\n      theme: 'default',\n      errorCallback: function (error) {\n        console.warn(\"Mermaid error:\", error);\n        return \"<div class='mermaid-error'></div>\";\n      }\n    });\n    mermaid.init(undefined, \".mermaid\");\n    \n    // Initialize markdown-it with options and syntax highlighting\n    this.md = window.markdownit({\n      html: true,\n      linkify: true,\n      typographer: true,\n      highlight: (str, lang) => {\n        if (lang && hljs.getLanguage(lang)) {\n          try {\n            return hljs.highlight(str, { language: lang }).value;\n          } catch (__) { }\n        }\n        return '';\n      }\n    });\n\n    // Configure custom fence rendering for markdown-it\n    const defaultFence = this.md.renderer.rules.fence ||\n      ((tokens, idx, options, env, self) => self.renderToken(tokens, idx, options));\n\n    this.md.renderer.rules.fence = (tokens, idx, options, env, self) => {\n      const token = tokens[idx];\n      const info = token.info.trim();\n      \n      // Handle Mermaid diagrams\n      if (info === 'mermaid') {\n        return '<div class=\"mermaid\">' + token.content + '</div>';\n      }\n      \n      // Handle SVG directly\n      if (info === 'svg') {\n        return token.content;\n      }\n      \n      // Handle GeoJSON maps\n      if (info === 'geojson') {\n        const geojsonId = 'geojson-' + Math.random().toString(36).substring(2, 15);\n        return `<div id=\"${geojsonId}\" class=\"geojson-map\" style=\"width: 100%; height: 300px;\"></div>\n                <script>\n                  (function() {\n                    const initMap = function() {\n                      if (typeof L !== 'undefined') {\n                        const mapContainer = document.getElementById('${geojsonId}');\n                        if (mapContainer && !mapContainer.dataset.initialized) {\n                          const map = L.map('${geojsonId}').setView([0, 0], 2);\n                          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                          }).addTo(map);\n                          \n                          try {\n                            const geojsonData = ${token.content};\n                            const geojsonLayer = L.geoJSON(geojsonData).addTo(map);\n                            map.fitBounds(geojsonLayer.getBounds(), { padding: [20, 20] });\n                            mapContainer.dataset.initialized = 'true';\n                          } catch (e) {\n                            console.error('Error parsing GeoJSON:', e);\n                            mapContainer.innerHTML = '<div class=\"error\">Error parsing GeoJSON: ' + e.message + '</div>';\n                          }\n                        }\n                      } else {\n                        // Leaflet not loaded yet, load it\n                        const link = document.createElement('link');\n                        link.rel = 'stylesheet';\n                        link.href = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css';\n                        document.head.appendChild(link);\n                        \n                        const script = document.createElement('script');\n                        script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';\n                        script.onload = initMap;\n                        document.head.appendChild(script);\n                      }\n                    };\n                    \n                    // Try to initialize immediately, or wait for document to load\n                    if (document.readyState === 'complete') {\n                      initMap();\n                    } else {\n                      window.addEventListener('load', initMap);\n                    }\n                  })();\n                </script>`;\n      }\n      \n      // Handle mathematical expressions\n      if (info === 'math') {\n        // Create unique ID for this math block\n        const mathId = 'math-' + Math.random().toString(36).substring(2, 15);\n        \n        return `<div id=\"${mathId}\" class=\"math-display\">$$${token.content}$$</div>\n                <script>\n                  (function() {\n                    function initMathJax() {\n                      if (typeof MathJax === 'undefined') {\n                        // Load MathJax script\n                        var script = document.createElement('script');\n                        script.src = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js';\n                        script.async = true;\n                        \n                        script.onload = function() {\n                          // Configure MathJax\n                          window.MathJax = {\n                            tex: {\n                              inlineMath: [['$', '$']],\n                              displayMath: [['$$', '$$']]\n                            },\n                            svg: { fontCache: 'global' }\n                          };\n                          // Render math\n                          MathJax.typeset();\n                        };\n                        \n                        document.head.appendChild(script);\n                      } else {\n                        // MathJax already loaded\n                        MathJax.typeset();\n                      }\n                    }\n                    \n                    // Initialize either now or when page loads\n                    if (document.readyState === 'complete') {\n                      initMathJax();\n                    } else {\n                      window.addEventListener('load', initMathJax);\n                    }\n                  })();\n                </script>`;\n      }\n      \n      // Default rendering for other code blocks\n      return defaultFence(tokens, idx, options, env, self);\n    };\n  }\n\n  /**\n   * Registers a content type renderer with specified configuration\n   * \n   * @param {string} type - The content type identifier ('md', 'html', etc.)\n   * @param {Object} config - Renderer configuration\n   * @param {Function} config.render - Function to render the content type\n   * @param {Function} [config.sourceToOutput] - Function to transform source to output\n   * @param {Function} [config.outputToSource] - Function to transform output back to source\n   * @param {Object} [config.operations] - Map of operations that can be performed on this content type\n   * @param {Array} [config.buttons] - Buttons to display when this content type is active\n   */\n  registerRenderer(type, config) {\n    this.renderers[type] = config;\n    \n    // Trigger event for plugins to react\n    this.events.emit('renderer:registered', type, config);\n    \n    // Update buttons if this is the current content type\n    if (this.inputContentType === type) {\n      this.updateTypeButtons();\n    }\n  }\n  \n  /**\n   * Registers the default renderers for standard content types\n   * \n   * @private\n   */\n  registerDefaultRenderers() {\n    // Markdown renderer\n    this.registerRenderer('md', {\n      render: (source) => this.renderMarkdown(source),\n      sourceToOutput: (source) => this.md.render(source),\n      outputToSource: (output, options = {}) => this.htmlToMarkdown(output, options),\n      operations: {\n        increaseHeadings: (src) => this.markdownAdjustHeadings(src, 1),\n        decreaseHeadings: (src) => this.markdownAdjustHeadings(src, -1),\n        removeHR: (src) => src.replace(/---/g, '')\n      },\n      buttons: [\n        { label: 'H-', action: 'decreaseHeadings', title: 'Decrease heading levels' },\n        { label: 'H+', action: 'increaseHeadings', title: 'Increase heading levels' },\n        { label: 'Remove HR', action: 'removeHR', title: 'Remove horizontal rules' }\n      ]\n    });\n    \n    // HTML renderer\n    this.registerRenderer('html', {\n      render: (source) => this.renderHTML(source),\n      sourceToOutput: (source) => source,\n      outputToSource: (output) => output,\n      operations: {},\n      buttons: []\n    });\n    \n    // RevealJS renderer\n    this.registerRenderer('reveal', {\n      render: (source) => this.renderHTML(this.makeRevealJSFullPage(source)),\n      sourceToOutput: (source) => this.makeRevealJSFullPage(source),\n      outputToSource: (output) => output,\n      operations: {},\n      buttons: []\n    });\n    \n    // CSV renderer\n    this.registerRenderer('csv', {\n      render: (source) => {\n        const markdownTable = this.csvOrTsvToMarkdownTable(source, ',');\n        this.renderMarkdown(markdownTable);\n      },\n      sourceToOutput: (source) => this.csvOrTsvToMarkdownTable(source, ','),\n      outputToSource: (output) => this.tableToCSV(output),\n      operations: {},\n      buttons: []\n    });\n    \n    // TSV renderer\n    this.registerRenderer('tsv', {\n      render: (source) => {\n        const markdownTable = this.csvOrTsvToMarkdownTable(source, '\\t');\n        this.renderMarkdown(markdownTable);\n      },\n      sourceToOutput: (source) => this.csvOrTsvToMarkdownTable(source, '\\t'),\n      outputToSource: (output) => this.tableToCSV(output, '\\t'),\n      operations: {},\n      buttons: []\n    });\n    \n    // Semicolon separated values renderer\n    this.registerRenderer('semisv', {\n      render: (source) => {\n        const markdownTable = this.csvOrTsvToMarkdownTable(source, ';');\n        this.renderMarkdown(markdownTable);\n      },\n      sourceToOutput: (source) => this.csvOrTsvToMarkdownTable(source, ';'),\n      outputToSource: (output) => this.tableToCSV(output, ';'),\n      operations: {},\n      buttons: []\n    });\n    \n    // Space separated values renderer\n    this.registerRenderer('ssv', {\n      render: (source) => {\n        const markdownTable = this.csvOrTsvToMarkdownTable(source, ' ');\n        this.renderMarkdown(markdownTable);\n      },\n      sourceToOutput: (source) => this.csvOrTsvToMarkdownTable(source, ' '),\n      outputToSource: (output) => this.tableToCSV(output, ' '),\n      operations: {},\n      buttons: []\n    });\n  }\n\n  /**\n   * Creates the DOM structure for the editor.\n   * Sets up the title bar, controls, and editor areas.\n   * \n   * @private\n   */\n  createStructure() {\n    this.container.classList.add(this.options.baseClass);\n\n    this.container.innerHTML = `\n      <div class=\"${this.options.baseClass}-title\" ${!this.options.titleShow ? 'style=\"display:none\"' : ''}>\n        ${this.options.titleContent}\n      </div>\n      <div class=\"${this.options.baseClass}-controls\" ${!this.options.showControls ? 'style=\"display:none\"' : ''}>\n        <button data-view='src'>Source</button>\n        <button data-view=\"html\">Rendered</button>\n        <button data-view=\"split\">Split</button>\n        <button class=\"copy-src-button\">Copy Source</button>\n        <button class=\"copy-html-button\">Copy Rendered</button>\n        <button class=\"revision-undo\" title=\"Undo\">&#x21A9;</button>\n        <button class=\"revision-redo\" title=\"Redo\">&#x21AA;</button>\n        <span class=\"${this.options.baseClass}-type-buttons\"></span>\n      </div>\n      <div class=\"${this.options.baseClass}-editor\">\n        <textarea class=\"${this.options.baseClass}-input\"></textarea>\n        <div class=\"${this.options.baseClass}-output\"></div>\n      </div>\n    `;\n\n    this.title = this.container.querySelector(`.${this.options.baseClass}-title`);\n    this.controls = this.container.querySelector(`.${this.options.baseClass}-controls`);\n    this.editor = this.container.querySelector(`.${this.options.baseClass}-editor`);\n    this.input = this.container.querySelector(`.${this.options.baseClass}-input`);\n    this.output = this.container.querySelector(`.${this.options.baseClass}-output`);\n    this.typeButtonsContainer = this.container.querySelector(`.${this.options.baseClass}-type-buttons`);\n    this.universalButtonsContainer = this.container.querySelector(`.${this.options.baseClass}-universal-buttons`);\n  }\n\n  /**\n   * Updates the type-specific buttons based on the current content type\n   * \n   * @private\n   */\n  updateTypeButtons() {\n    // Clear current buttons\n    this.typeButtonsContainer.innerHTML = '';\n    \n    // Get buttons for current content type\n    const renderer = this.renderers[this.inputContentType];\n    if (renderer && renderer.buttons && renderer.buttons.length > 0) {\n      renderer.buttons.forEach(button => {\n        const btn = document.createElement('button');\n        btn.textContent = button.label;\n        if (button.title) {\n          btn.title = button.title;\n        }\n        btn.addEventListener('click', () => {\n          if (renderer.operations && renderer.operations[button.action]) {\n            const newContent = renderer.operations[button.action](this.getContent());\n            this.setContent(newContent, this.inputContentType);\n          }\n        });\n        this.typeButtonsContainer.appendChild(btn);\n      });\n    }\n  }\n\n  /**\n   * Sets up event listeners for user interactions.\n   * Handles view changes, copy functionality, and input changes.\n   * \n   * @private\n   */\n  initializeEventHandlers() {\n    // View buttons\n    this.controls.querySelectorAll('button[data-view]').forEach(button => {\n      button.addEventListener('click', () => this.setView(button.dataset.view));\n    });\n\n    // Copy buttons\n    this.controls.querySelector('.copy-src-button').addEventListener('click', () => this.copySource());\n    this.controls.querySelector('.copy-html-button').addEventListener('click', () => this.copyHTML());\n    \n    // Undo/redo buttons\n    this.controls.querySelector('.revision-undo').addEventListener('click', () => this.revisionUndo());\n    this.controls.querySelector('.revision-redo').addEventListener('click', () => this.revisionRedo());\n\n    // Input source change event\n    this.input.addEventListener('input', () => { \n      this.setContent(); \n    });\n    \n    // Listen for changes in rendered content to support bidirectional editing\n    // Use a debounce pattern to prevent processing every keystroke\n    let editDebounceTimer = null;\n    \n    // Create a map to store special content blocks\n    this.specialContentBlocks = new Map();\n    \n    this.output.addEventListener('input', () => {\n      if (this.currentView === 'html' || this.currentView === 'split') {\n        const editableContent = this.output.querySelector('[contenteditable=\"true\"]');\n        if (editableContent) {\n          // Clear any existing timer\n          if (editDebounceTimer) {\n            clearTimeout(editDebounceTimer);\n          }\n          \n          // Set a new timer to process the edit after a short delay (300ms)\n          editDebounceTimer = setTimeout(() => {\n            const renderedContent = editableContent.innerHTML;\n            const renderer = this.renderers[this.inputContentType];\n            \n            if (renderer && renderer.outputToSource) {\n              // Get the original source markdown\n              const originalSource = this.input.value;\n              \n              // Process the HTML back to markdown, passing original source for context\n              let newSource = renderer.outputToSource(renderedContent, {\n                originalSource: originalSource\n              });\n              \n              // Update source without triggering render cycle\n              this.input.value = newSource;\n              \n              // Only save revision after editing stops for a moment\n              this.revisionManager.addRevision(newSource, this.inputContentType);\n              \n              // Emit content change event\n              this.events.emit('content:change', newSource, this.inputContentType);\n            }\n            \n            // Clear the timer reference\n            editDebounceTimer = null;\n          }, 300);\n        }\n      }\n    });\n  }\n  \n  /**\n   * Preserves special content blocks like Mermaid diagrams, SVG, GeoJSON and math from original source\n   * @param {string} originalSource - The original markdown source\n   * @param {string} newSource - The new source after HTML-to-Markdown conversion\n   * @returns {string} - Source with special blocks preserved\n   * @private\n   */\n  preserveSpecialBlocks(originalSource, newSource) {\n    // If no original source, just return the new source\n    if (!originalSource) return newSource;\n    \n    // Extract special blocks from original source\n    const specialBlocks = [];\n    \n    // Extract Mermaid blocks: ```mermaid ... ```\n    const mermaidRegex = /```mermaid\\s*([\\s\\S]*?)```/g;\n    let mermaidMatch;\n    while ((mermaidMatch = mermaidRegex.exec(originalSource)) !== null) {\n      specialBlocks.push({\n        type: 'mermaid',\n        content: mermaidMatch[0],\n        startIndex: mermaidMatch.index,\n        endIndex: mermaidMatch.index + mermaidMatch[0].length\n      });\n    }\n    \n    // Extract SVG blocks: ```svg ... ```\n    const svgRegex = /```svg\\s*([\\s\\S]*?)```/g;\n    let svgMatch;\n    while ((svgMatch = svgRegex.exec(originalSource)) !== null) {\n      specialBlocks.push({\n        type: 'svg',\n        content: svgMatch[0],\n        startIndex: svgMatch.index,\n        endIndex: svgMatch.index + svgMatch[0].length\n      });\n    }\n    \n    // Extract GeoJSON blocks: ```geojson ... ```\n    const geojsonRegex = /```geojson\\s*([\\s\\S]*?)```/g;\n    let geojsonMatch;\n    while ((geojsonMatch = geojsonRegex.exec(originalSource)) !== null) {\n      specialBlocks.push({\n        type: 'geojson',\n        content: geojsonMatch[0],\n        startIndex: geojsonMatch.index,\n        endIndex: geojsonMatch.index + geojsonMatch[0].length\n      });\n    }\n    \n    // Extract Math blocks: ```math ... ```\n    const mathRegex = /```math\\s*([\\s\\S]*?)```/g;\n    let mathMatch;\n    while ((mathMatch = mathRegex.exec(originalSource)) !== null) {\n      specialBlocks.push({\n        type: 'math',\n        content: mathMatch[0],\n        startIndex: mathMatch.index,\n        endIndex: mathMatch.index + mathMatch[0].length\n      });\n    }\n    \n    // Find corresponding locations in new source and preserve the special blocks\n    // This is a heuristic approach - we look for markers that might indicate where\n    // the special content was converted to something else\n    \n    let modifiedSource = newSource;\n    \n    // Look for elements in the newSource which likely represent our special blocks\n    const mermaidDivRegex = /<div[^>]*class=['\"]?mermaid['\"]?[^>]*>([\\s\\S]*?)<\\/div>/g;\n    const svgTagRegex = /<svg[^>]*>[\\s\\S]*?<\\/svg>/g;\n    const geojsonDivRegex = /<div[^>]*class=['\"]?geojson-map['\"]?[^>]*>[\\s\\S]*?<\\/div>/g;\n    const mathDivRegex = /<div[^>]*class=['\"]?math-display['\"]?[^>]*>[\\s\\S]*?<\\/div>/g;\n    \n    // Replace mermaid divs with original mermaid code blocks\n    let mermaidDivMatch;\n    let mermaidIndex = 0;\n    while ((mermaidDivMatch = mermaidDivRegex.exec(modifiedSource)) !== null) {\n      // Find the next available mermaid block\n      const mermaidBlocks = specialBlocks.filter(block => block.type === 'mermaid');\n      if (mermaidIndex < mermaidBlocks.length) {\n        // Replace the div with the original mermaid code block\n        modifiedSource = \n          modifiedSource.substring(0, mermaidDivMatch.index) + \n          mermaidBlocks[mermaidIndex].content + \n          modifiedSource.substring(mermaidDivMatch.index + mermaidDivMatch[0].length);\n        \n        mermaidIndex++;\n      }\n    }\n    \n    // Replace SVG tags with original SVG code blocks\n    let svgTagMatch;\n    let svgIndex = 0;\n    while ((svgTagMatch = svgTagRegex.exec(modifiedSource)) !== null) {\n      // Find the next available SVG block\n      const svgBlocks = specialBlocks.filter(block => block.type === 'svg');\n      if (svgIndex < svgBlocks.length) {\n        // Replace the SVG tag with the original SVG code block\n        modifiedSource = \n          modifiedSource.substring(0, svgTagMatch.index) + \n          svgBlocks[svgIndex].content + \n          modifiedSource.substring(svgTagMatch.index + svgTagMatch[0].length);\n        \n        svgIndex++;\n      }\n    }\n    \n    // Replace GeoJSON divs with original GeoJSON code blocks\n    let geojsonDivMatch;\n    let geojsonIndex = 0;\n    while ((geojsonDivMatch = geojsonDivRegex.exec(modifiedSource)) !== null) {\n      // Find the next available GeoJSON block\n      const geojsonBlocks = specialBlocks.filter(block => block.type === 'geojson');\n      if (geojsonIndex < geojsonBlocks.length) {\n        // Replace the div with the original GeoJSON code block\n        modifiedSource = \n          modifiedSource.substring(0, geojsonDivMatch.index) + \n          geojsonBlocks[geojsonIndex].content + \n          modifiedSource.substring(geojsonDivMatch.index + geojsonDivMatch[0].length);\n        \n        geojsonIndex++;\n      }\n    }\n    \n    // Replace Math divs with original Math code blocks\n    let mathDivMatch;\n    let mathIndex = 0;\n    while ((mathDivMatch = mathDivRegex.exec(modifiedSource)) !== null) {\n      // Find the next available math block\n      const mathBlocks = specialBlocks.filter(block => block.type === 'math');\n      if (mathIndex < mathBlocks.length) {\n        // Replace the div with the original math code block\n        modifiedSource = \n          modifiedSource.substring(0, mathDivMatch.index) + \n          mathBlocks[mathIndex].content + \n          modifiedSource.substring(mathDivMatch.index + mathDivMatch[0].length);\n        \n        mathIndex++;\n      }\n    }\n    \n    return modifiedSource;\n  }\n  \n  /**\n   * Sets up a resize observer to adjust the layout when the container size changes.\n   * \n   * @private\n   */\n  initializeResizeObserver() {\n    const resizeObserver = new ResizeObserver(entries => {\n      for (let entry of entries) {\n        if (entry.target === this.container) {\n          this.adjustLayout();\n        }\n      }\n    });\n    resizeObserver.observe(this.container);\n  }\n\n  /**\n   * Adjusts the layout of the editor components based on the current view and container size.\n   * \n   * @private\n   */\n  adjustLayout() {\n    const containerRect = this.container.getBoundingClientRect();\n    const titleHeight = this.title.offsetHeight;\n    const controlsHeight = this.controls.offsetHeight;\n\n    const availableHeight = containerRect.height - titleHeight - controlsHeight;\n    const availableWidth = containerRect.width;\n    this.editor.style.height = `${availableHeight}px`;\n    this.editor.style.width = `${availableWidth}px`;\n\n    if (this.currentView === 'split') {\n      this.input.style.width = '50%';\n      this.output.style.width = '50%';\n    } else if (this.currentView === 'src') {\n      this.input.style.width = '100%';\n    } else if (this.currentView === 'html') {\n      this.output.style.width = '100%';\n    }\n    \n    // Emit layout change event for plugins\n    this.events.emit('layout:change', this.currentView, {\n      containerWidth: availableWidth,\n      containerHeight: availableHeight\n    });\n  }\n\n  /**\n   * Sets the content of the editor and renders it.\n   * \n   * @param {string} [content=this.input.value] - The content to set\n   * @param {string} [contentType=this.inputContentType] - The type of content ('md', 'html', 'reveal', 'csv', 'tsv')\n   * @param {boolean} [saveRevision=true] - Whether to save this change to the revision history\n   */\n  setContent(content = this.input.value, contentType = this.inputContentType, saveRevision = true) {\n    // Check if content type has changed\n    const typeChanged = contentType !== this.inputContentType;\n    if (typeChanged) {\n      this.inputContentType = contentType;\n      this.updateTypeButtons();\n    }\n    \n    this.input.value = content;\n    \n    // Add to revision history if required\n    if (saveRevision) {\n      this.revisionManager.addRevision(content, contentType);\n    }\n    \n    // Render the content\n    this.renderOutput();\n    \n    // Emit content change event\n    this.events.emit('content:change', content, contentType);\n  }\n\n  /**\n   * Undoes the last change if possible.\n   * Decrements the revision index and restores the content from that revision.\n   */\n  revisionUndo() {\n    const prevState = this.revisionManager.undo();\n    if (prevState) {\n      this.input.value = prevState.content;\n      this.inputContentType = prevState.contentType;\n      \n      // Update buttons if content type changed\n      this.updateTypeButtons();\n      \n      // Render the content\n      this.renderOutput();\n      \n      // Emit undo event\n      this.events.emit('revision:undo', prevState.content, prevState.contentType);\n    }\n  }\n  \n  /**\n   * Redoes a previously undone change if possible.\n   * Increments the revision index and restores the content from that revision.\n   */\n  revisionRedo() {\n    const nextState = this.revisionManager.redo();\n    if (nextState) {\n      this.input.value = nextState.content;\n      this.inputContentType = nextState.contentType;\n      \n      // Update buttons if content type changed\n      this.updateTypeButtons();\n      \n      // Render the content\n      this.renderOutput();\n      \n      // Emit redo event\n      this.events.emit('revision:redo', nextState.content, nextState.contentType);\n    }\n  }\n  \n  /**\n   * Sets the revision to a specific index in the history.\n   * \n   * @param {number} index - The revision index to set\n   */\n  revisionSet(index) {\n    const state = this.revisionManager.setRevision(index);\n    if (state) {\n      this.input.value = state.content;\n      this.inputContentType = state.contentType;\n      \n      // Update buttons if content type changed\n      this.updateTypeButtons();\n      \n      // Render the content\n      this.renderOutput();\n      \n      // Emit revision:set event\n      this.events.emit('revision:set', index, state.content, state.contentType);\n    }\n  }\n  \n  /**\n   * Returns the total number of revisions in the history.\n   * \n   * @returns {number} The number of revisions\n   */\n  revisionNumRevsions() {\n    return this.revisionManager.getRevisionCount();\n  }\n  \n  /**\n   * Returns the current index in the revision history.\n   * \n   * @returns {number} The current revision index\n   */\n  revisionGetCurrentIndex() {\n    return this.revisionManager.getCurrentIndex();\n  }\n\n  /**\n   * Gets the current content from the input textarea.\n   * \n   * @returns {string} The current content\n   */\n  getContent() {\n    return this.input.value;\n  }\n\n  /**\n   * Cleans markdown content by removing markdown code fence markers.\n   * \n   * @param {string} md - The markdown content to clean\n   * @returns {string} The cleaned markdown content\n   */\n  cleanMarkdown(md) {\n    return md.replace(/^```markdown\\s+/, '').replace(/```$/, '');\n  }\n\n  /**\n   * Renders Markdown content to HTML and processes the result.\n   * Converts images to data URLs and initializes Mermaid diagrams.\n   * \n   * @param {string} [md] - The Markdown content to render, defaults to current input value\n   * @returns {Promise<void>} A promise that resolves when rendering is complete\n   */\n  async renderMarkdown(md) {\n    const markdown = md || this.input.value;\n    const html = this.md.render(markdown);\n    this.output.innerHTML = \"<div contenteditable='true'>\" + html + \"</div>\";\n\n    // Convert all images to data URLs immediately after rendering\n    const contentDiv = this.output.querySelector('div[contenteditable=\"true\"]');\n    const images = contentDiv.querySelectorAll('img');\n\n    // render images to data urls\n    for (const img of images) {\n      try {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n\n        // Create new image and wait for it to load\n        const tempImg = new Image();\n        tempImg.crossOrigin = 'anonymous';\n\n        await new Promise((resolve, reject) => {\n          tempImg.onload = () => {\n            // Set canvas size to match image\n            canvas.width = tempImg.naturalWidth;\n            canvas.height = tempImg.naturalHeight;\n\n            // Draw image to canvas\n            ctx.drawImage(tempImg, 0, 0);\n\n            // Convert to data URL\n            const dataUrl = canvas.toDataURL('image/png', 1.0);\n\n            // Update original image\n            img.src = dataUrl;\n            resolve();\n          };\n          tempImg.onerror = reject;\n          tempImg.src = img.src;\n        });\n      } catch (error) {\n        console.error('Failed to convert image:', error);\n      }\n    }\n    // end of images to data urls\n\n    // Initialize mermaid diagrams after all images are processed\n    mermaid.init(undefined, this.output.querySelectorAll('.mermaid'));\n    \n    // Emit markdown:rendered event\n    this.events.emit('markdown:rendered', markdown, html);\n  }\n\n  /**\n   * Converts HTML content to Markdown format using our HtmlToMarkdown converter.\n   * \n   * @param {string} html - The HTML content to convert to Markdown\n   * @param {Object} options - Additional options for conversion\n   * @returns {string} The converted Markdown content\n   */\n  htmlToMarkdown(html, options = {}) {\n    // Use our HtmlToMarkdown converter which uses Turndown internally\n    // with SquibView-specific customizations\n    if (!this._htmlToMarkdownConverter) {\n      // Return simple conversion if converter isn't loaded yet\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = html;\n      return tempDiv.textContent;\n    }\n    \n    // Use the converter with the original source as context to preserve special blocks\n    return this._htmlToMarkdownConverter.convert(html, {\n      originalSource: options.originalSource || this.input.value\n    });\n  }\n\n  /**\n   * Converts a table in the DOM to CSV format\n   * \n   * @param {string} html - The HTML content containing a table\n   * @param {string} [delimiter=','] - The delimiter to use\n   * @returns {string} The CSV content\n   */\n  tableToCSV(html, delimiter = ',') {\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = html;\n    \n    const table = tempDiv.querySelector('table');\n    if (!table) {\n      return '';\n    }\n    \n    const rows = Array.from(table.querySelectorAll('tr'));\n    const csvRows = rows.map(row => {\n      const cells = Array.from(row.querySelectorAll('th, td'));\n      return cells.map(cell => {\n        // Escape quotes and wrap in quotes if needed\n        const text = cell.textContent.trim();\n        if (text.includes(delimiter) || text.includes('\"') || text.includes('\\n')) {\n          return `\"${text.replace(/\"/g, '\"\"')}\"`;\n        }\n        return text;\n      }).join(delimiter);\n    });\n    \n    return csvRows.join('\\n');\n  }\n\n  /**\n   * Removes all horizontal rules (---) from the Markdown content.\n   * Only works when the current content type is Markdown.\n   */\n  markdownRemoveAllHR() {\n    if (this.inputContentType === 'md') {\n      const markdown = this.getMarkdownSource();\n      const newMarkdown = markdown.replace(/---/g, '');\n      this.setContent(newMarkdown, this.inputContentType);\n    }\n  }\n  \n  /**\n   * Adjusts the heading levels in Markdown text by a specified offset.\n   * \n   * @param {string} markdown - The Markdown text to process\n   * @param {number} offset - The amount to adjust heading levels by (positive to increase, negative to decrease)\n   * @returns {string} - The Markdown text with adjusted heading levels\n   */\n  markdownAdjustHeadings(markdown, offset) {\n    // Early exit if offset is 0 or invalid input\n    if (offset === 0 || typeof markdown !== 'string') {\n      return markdown;\n    }\n\n    // Split the input into lines\n    const lines = markdown.split('\\n');\n\n    // Process each line\n    const modifiedLines = lines.map(line => {\n      // Regex to match heading lines: starts with 1-6 hash symbols followed by a space\n      const headingMatch = line.match(/^(#{1,6})\\s/);\n\n      if (!headingMatch) {\n        // Not a heading, return unchanged\n        return line;\n      }\n\n      const currentHeadingLevel = headingMatch[1].length;\n      // Calculate new heading level with bounds checking (min 1, max 6)\n      const newHeadingLevel = Math.min(Math.max(currentHeadingLevel + offset, 1), 6);\n\n      // Replace the heading prefix with the new level\n      return '#'.repeat(newHeadingLevel) + line.substring(currentHeadingLevel);\n    });\n\n    // Join the lines back together\n    return modifiedLines.join('\\n');\n  }\n  \n  /**\n   * Adjusts heading levels in the current Markdown content.\n   * \n   * @param {number} offset - The amount to adjust heading levels by (positive to increase, negative to decrease)\n   */\n  markdownEditorAdjustHeadings(offset) {\n    const markdown = this.getMarkdownSource();\n    const newMarkdown = this.markdownAdjustHeadings(markdown, offset);\n    this.setContent(newMarkdown, this.inputContentType);\n  }\n\n  /**\n   * Sets the current view mode of the editor.\n   * \n   * @param {string} view - The view mode to set: 'src' (source only), 'html' (rendered only), or 'split' (both)\n   */\n  setView(view) {\n    this.currentView = view;\n\n    this.controls.querySelectorAll('button[data-view]').forEach(btn => {\n      btn.classList.toggle('active', btn.dataset.view === view);\n    });\n\n    const copyMDButton = this.controls.querySelector('.copy-src-button');\n    const copyHTMLButton = this.controls.querySelector('.copy-html-button');\n\n    if (view === 'src') {\n      this.input.classList.remove('squibview-hidden');\n      this.output.classList.add('squibview-hidden');\n      this.input.style.width = '100%';\n      copyMDButton.classList.remove('squibview-hidden');\n      copyHTMLButton.classList.add('squibview-hidden');\n    } else if (view === 'html') {\n      this.input.classList.add('squibview-hidden');\n      this.output.classList.remove('squibview-hidden');\n      this.output.style.width = '100%';\n      copyMDButton.classList.add('squibview-hidden');\n      copyHTMLButton.classList.remove('squibview-hidden');\n    } else { // view == 'split'\n      this.input.classList.remove('squibview-hidden');\n      this.output.classList.remove('squibview-hidden');\n      this.input.style.width = '50%';\n      this.output.style.width = '50%';\n      copyMDButton.classList.remove('squibview-hidden');\n      copyHTMLButton.classList.remove('squibview-hidden');\n    }\n\n    this.adjustLayout();\n    \n    // Emit view:change event\n    this.events.emit('view:change', view);\n  }\n\n  /**\n   * Renders HTML content in an iframe within the output div.\n   * \n   * @param {string} src - The HTML source content to render\n   */\n  renderHTML(src) {\n    const htmlContent = src;\n    const outputDiv = this.output;\n    this.insertContentInIframe(outputDiv, htmlContent);\n    \n    // Emit html:rendered event\n    this.events.emit('html:rendered', htmlContent);\n  }\n\n  /**\n   * Creates an iframe that fills the entire parent element and injects provided HTML content.\n   * @param {HTMLElement} parentElement - The parent element to contain the iframe.\n   * @param {string} htmlContent - The HTML content to inject into the iframe.\n   */\n  insertContentInIframe(parentElement, htmlContent) {\n    // Create an iframe element\n    const iframe = document.createElement('iframe');\n\n    // Style the iframe to fill the parent completely\n    iframe.style.width = '100%';\n    iframe.style.height = '100%';\n    iframe.style.border = 'none';\n    iframe.style.display = 'block';\n\n    // Append the iframe to the parent element\n    parentElement.innerHTML = '';\n    parentElement.appendChild(iframe);\n\n    // Access the iframe's document and write the HTML content into it\n    const iframeDoc = iframe.contentWindow.document;\n    iframeDoc.open();\n    iframeDoc.write(htmlContent);\n    iframeDoc.close();\n    this.output_iframe = iframe;\n    this.output_ifraome_content = htmlContent;\n  }\n\n  /**\n   * Renders the current content based on its type using the registered renderer.\n   */\n  renderOutput() {\n    const renderer = this.renderers[this.inputContentType];\n    if (renderer && renderer.render) {\n      renderer.render(this.getContent());\n      this.events.emit('content:rendered', this.inputContentType);\n    } else {\n      console.warn(`No renderer for content type: ${this.inputContentType}`);\n      // Fall back to Markdown rendering\n      this.renderMarkdown();\n    }\n  }\n\n  /**\n   * Copies the source content to the clipboard.\n   * Attempts to use the modern Clipboard API with fallbacks for older browsers.\n   * \n   * @returns {Promise<void>} A promise that resolves when copying is complete\n   */\n  async copySource() {\n    const copyButton = this.controls.querySelector('.copy-src-button');\n    copyButton.textContent = 'Copying...';\n\n    try {\n      const markdownText = this.getMarkdownSource();\n\n      try {\n        await navigator.clipboard.writeText(markdownText);\n      } catch (modernErr) {\n        const textarea = document.createElement('textarea');\n        textarea.value = markdownText;\n        textarea.style.position = 'fixed';\n        textarea.style.opacity = '0';\n        document.body.appendChild(textarea);\n        textarea.select();\n        document.body.removeChild(textarea);\n      }\n\n      copyButton.textContent = 'Copied!';\n    } catch (err) {\n      console.error('Copy Markdown failed:', err);\n      copyButton.textContent = 'Copy failed';\n    }\n\n    setTimeout(() => {\n      copyButton.textContent = 'Copy Source';\n    }, 2000);\n  }\n\n  /**\n   * Gets the current markdown source from the input textarea.\n   * \n   * @returns {string} The markdown source\n   */\n  getMarkdownSource() {\n    return this.input.value;\n  }\n\n  /**\n   * Gets the HTML source from the rendered output.\n   * \n   * @returns {string} The HTML content\n   */\n  getHTMLSource() {\n    const contentEditable = this.output.querySelector('div[contenteditable=\"true\"]');\n    if (contentEditable) {\n      return contentEditable.innerHTML;\n    }\n    \n    // If we have an iframe (HTML view)\n    if (this.output_iframe) {\n      return this.output_ifraome_content;\n    }\n    \n    return '';\n  }\n\n  /**\n   * Copies the rendered content to the clipboard with formatting.\n   * Processes code blocks, SVG elements, and images to ensure they copy correctly.\n   */\n  async copyHTML() {\n    const copyButton = this.controls.querySelector('.copy-html-button');\n    copyButton.textContent = 'Copying...';\n\n    try {\n      const contentDiv = this.output.querySelector('div[contenteditable=\"true\"]');\n      if (!contentDiv) {\n        throw new Error('Content div not found');\n      }\n\n      const clone = contentDiv.cloneNode(true);\n\n      // Process code blocks\n      clone.querySelectorAll('pre code').forEach(block => {\n        const formattedCode = block.innerHTML;\n\n        const table = document.createElement('table');\n        table.style.width = '100%';\n        table.style.borderCollapse = 'collapse';\n        table.style.border = 'none';\n\n        const tr = document.createElement('tr');\n        const td = document.createElement('td');\n        td.style.backgroundColor = '#f7f7f7';\n        td.style.padding = '12px';\n        td.style.fontFamily = 'Consolas, Monaco, \"Courier New\", monospace';\n        td.style.whiteSpace = 'pre';\n        td.style.border = 'none';\n\n        td.innerHTML = formattedCode.trim();\n\n        tr.appendChild(td);\n        table.appendChild(tr);\n        block.parentNode.replaceWith(table);\n      });\n\n      // Convert SVG elements to PNG\n      const svgElements = clone.querySelectorAll('svg');\n      for (const svg of svgElements) {\n        try {\n          const pngBlob = await this.svgToPng(svg);\n          const dataUrl = await new Promise(resolve => {\n            const reader = new FileReader();\n            reader.onloadend = () => resolve(reader.result);\n            reader.readAsDataURL(pngBlob);\n          });\n\n          const img = document.createElement('img');\n          img.src = dataUrl;\n          img.width = svg.clientWidth || svg.viewBox.baseVal.width || 100;\n          img.height = svg.clientHeight || svg.viewBox.baseVal.height || 100;\n          img.setAttribute('v:shapes', 'image' + Math.random().toString(36).substr(2, 9));\n          img.style.width = img.width + 'px';\n          img.style.height = img.height + 'px';\n          img.alt = \"Converted diagram\";\n          svg.parentNode.replaceChild(img, svg);\n        } catch (error) {\n          console.error('Failed to convert SVG:', error);\n        }\n      }\n\n      const htmlContent = `\n          <html xmlns:v=\"urn:schemas-microsoft-com:vml\"\n                xmlns:o=\"urn:schemas-microsoft-com:office:office\"\n                xmlns:w=\"urn:schemas-microsoft-com:office:word\">\n            <head>\n              <meta charset=\"utf-8\">\n              <style>\n                table { border-collapse: collapse; width: 100%; margin-bottom: 1em; }\n                th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }\n                th { background-color: #f0f0f0; font-weight: bold; }\n\n                /* Code block styling */\n                .hljs { display: block; overflow-x: auto; padding: 1em; }\n                .hljs-keyword { color: #0033B3; }\n                .hljs-string { color: #067D17; }\n                .hljs-comment { color: #8C8C8C; }\n                .hljs-function { color: #00627A; }\n                .hljs-number { color: #1750EB; }\n                .hljs-operator { color: #687687; }\n                .hljs-punctuation { color: #000000; }\n\n                /* Word-specific image handling */\n                img { display: block; max-width: none; }\n              </style>\n            </head>\n            <body>\n              ${clone.innerHTML}\n            </body>\n          </html>`;\n\n      const platform = this.getPlatform();\n\n      if (platform === 'macos') {\n        // macOS approach (previously working version)\n        try {\n          await navigator.clipboard.write([\n            new ClipboardItem({\n              'text/html': new Blob([htmlContent], { type: 'text/html' }),\n              'text/plain': new Blob([clone.innerText], { type: 'text/plain' })\n            })\n          ]);\n        } catch (modernErr) {\n          // Safari fallback\n          if (!this.copyToClipboard(htmlContent)) {\n            throw new Error('Fallback copy failed');\n          }\n        }\n      } else {\n        // Windows/Linux approach\n        const tempDiv = document.createElement('div');\n        tempDiv.style.position = 'fixed';\n        tempDiv.style.left = '-9999px';\n        tempDiv.style.top = '0';\n        tempDiv.innerHTML = htmlContent;\n        document.body.appendChild(tempDiv);\n\n        try {\n          await navigator.clipboard.write([\n            new ClipboardItem({\n              'text/html': new Blob([htmlContent], { type: 'text/html' }),\n              'text/plain': new Blob([clone.innerText], { type: 'text/plain' })\n            })\n          ]);\n        } catch (modernErr) {\n          const selection = window.getSelection();\n          const range = document.createRange();\n          range.selectNodeContents(tempDiv);\n          selection.removeAllRanges();\n          selection.addRange(range);\n\n          const successful = document.execCommand('copy');\n          if (!successful) {\n            throw new Error('Fallback copy failed');\n          }\n        } finally {\n          if (tempDiv && tempDiv.parentNode) {\n            document.body.removeChild(tempDiv);\n          }\n        }\n      }\n\n      copyButton.textContent = 'Copied!';\n    } catch (err) {\n      console.error('Copy HTML failed:', err);\n      copyButton.textContent = 'Copy failed';\n    }\n\n    setTimeout(() => {\n      copyButton.textContent = 'Copy Rendered';\n    }, 2000);\n  }\n\n  /**\n   * Converts an SVG element to a PNG blob.\n   * \n   * @param {SVGElement} svgElement - The SVG element to convert\n   * @returns {Promise<Blob>} A promise that resolves with the PNG blob\n   */\n  svgToPng(svgElement) {\n    return new Promise((resolve, reject) => {\n      const svgString = new XMLSerializer().serializeToString(svgElement);\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n\n      const scale = 2;\n      const svgWidth = svgElement.clientWidth || svgElement.viewBox.baseVal.width || 100;\n      const svgHeight = svgElement.clientHeight || svgElement.viewBox.baseVal.height || 100;\n\n      canvas.width = svgWidth * scale;\n      canvas.height = svgHeight * scale;\n      ctx.scale(scale, scale);\n\n      img.onload = () => {\n        try {\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.drawImage(img, 0, 0, svgWidth, svgHeight);\n          canvas.toBlob(blob => {\n            resolve(blob);\n          }, 'image/png', 1.0);\n        } catch (err) {\n          reject(err);\n        }\n      };\n\n      img.onerror = reject;\n      const svgDataUrl = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svgString)}`;\n      img.src = svgDataUrl;\n    });\n  }\n\n  /**\n   * Shows or hides the control buttons.\n   * \n   * @param {boolean} show - Whether to show the controls\n   */\n  controlsShow(show) {\n    this.controls.style.display = show ? '' : 'none';\n    this.options.showControls = show;\n    this.adjustLayout();\n    \n    // Emit controls visibility change event\n    this.events.emit('controls:visibility', show);\n  }\n\n  /**\n   * Shows or hides the title section.\n   * \n   * @param {boolean} show - Whether to show the title\n   */\n  titleShow(show) {\n    this.title.style.display = show ? '' : 'none';\n    this.options.titleShow = show;\n    this.adjustLayout();\n    \n    // Emit title visibility change event\n    this.events.emit('title:visibility', show);\n  }\n\n  /**\n   * Sets the content of the title section.\n   * \n   * @param {string} content - The HTML content for the title\n   */\n  titleSetContent(content) {\n    this.title.innerHTML = content;\n    this.options.titleContent = content;\n    \n    // Emit title content change event\n    this.events.emit('title:content', content);\n  }\n\n  /**\n   * Gets the content of the title section.\n   * \n   * @returns {string} The HTML content of the title\n   */\n  titleGetContent() {\n    return this.title.innerHTML;\n  }\n\n  /**\n   * Toggles between the different view modes (source, rendered, split).\n   * Cycles through: source -> split -> rendered -> source.\n   */\n  toggleView() {\n    if (this.currentView === 'src') {\n      this.setView('split');\n    } else if (this.currentView === 'split') {\n      this.setView('html');\n    } else {\n      this.setView('src');\n    }\n  }\n\n  /**\n   * Copies text to clipboard using various fallback methods.\n   * \n   * @param {string} string - The text to copy to the clipboard\n   * @returns {boolean} Whether the copy operation was successful\n   */\n  copyToClipboard(string) {\n    let textarea;\n    let result;\n\n    try {\n      textarea = document.createElement('textarea');\n      textarea.setAttribute('readonly', true);\n      textarea.setAttribute('contenteditable', true);\n      textarea.style.position = 'fixed';\n      textarea.style.left = '0';\n      textarea.style.top = '0';\n      textarea.style.opacity = '0';\n      textarea.value = string;\n\n      document.body.appendChild(textarea);\n\n      textarea.focus();\n      textarea.select();\n\n      const range = document.createRange();\n      range.selectNodeContents(textarea);\n\n      const sel = window.getSelection();\n      sel.removeAllRanges();\n      sel.addRange(range);\n\n      textarea.setSelectionRange(0, textarea.value.length);\n      result = document.execCommand('copy');\n    } catch (err) {\n      console.error(err);\n      result = null;\n    } finally {\n      if (textarea && textarea.parentNode) {\n        document.body.removeChild(textarea);\n      }\n    }\n\n    // manual copy fallback using prompt\n    if (!result) {\n      const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n      const copyHotkey = isMac ? '⌘C' : 'CTRL+C';\n      result = prompt(`Press ${copyHotkey}`, string);\n      if (!result) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Detects the user's operating system platform.\n   * \n   * @returns {string} The detected platform: 'macos', 'windows', 'linux', or 'unknown'\n   */\n  getPlatform() {\n    const platform = navigator.platform.toLowerCase();\n    const userAgent = navigator.userAgent.toLowerCase();\n\n    if (platform.includes('mac') || userAgent.includes('mac')) {\n      return 'macos';\n    } else if (userAgent.includes('windows')) {\n      return 'windows';\n    } else if (userAgent.includes('linux')) {\n      return 'linux';\n    }\n    return 'unknown';\n  }\n\n  /**\n   * Creates a complete HTML page from a HTML snippet/div content.\n   * \n   * @param {string} inputDivHTML - The HTML content to include in the page\n   * @param {boolean} [editable=false] - Whether the content should be editable\n   * @returns {string} A complete HTML page as a string\n   */\n  makeHTMLPageFromDiv(inputDivHTML, editable = false) {\n    let editableAttr = editable ? 'contenteditable=\"true\"' : '';\n    let s =\n      `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Markdown Viewer with Graphics Support</title>\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css\">\n  <xscripx src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js\"></xscripx>\n  <xscripx src=\"https://unpkg.com/mermaid/dist/mermaid.min.js\"></xscripx>\n  <style>\n      body {\n          font-family: Arial, sans-serif;\n          box-sizing: border-box;\n          padding: 20px;\n      }\n      .squibview-output {\n          width: 50%;\n          margin: auto;\n      }\n      pre {\n          background-color: #f4f4f4;\n          padding: 10px;\n          border-radius: 5px;\n          overflow-x: auto;\n      }\n      table {\n          width: 100%;\n          border-collapse: collapse;\n          margin: 20px 0;\n      }\n      table, th, td {\n          border: 1px solid black;\n      }\n      th, td {\n          padding: 8px;\n          text-align: left;\n      }\n  </style>\n</head>\n<body ${editableAttr}>\n  ${inputDivHTML}\n</body>\n</html>`;\n    // Replace the xscript placeholders with real script tags\n    s = s.replaceAll(\"xscripx\", \"script\");\n    return s;\n  }\n\n  /**\n   * Creates a RevealJS presentation page from markdown content.\n   * Splits the markdown on '---' delimiters to create slides.\n   * \n   * @param {string} markdown - The markdown content to convert to slides\n   * @param {string} [title=\"Slide Presentation\"] - The title for the presentation\n   * @returns {string} A complete HTML page with RevealJS for presenting slides\n   */\n  makeRevealJSFullPage(markdown, title = \"Slide Presentation\") {\n    return `<!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>${title}</title>\n      <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/reveal.js/dist/reveal.css\">\n      <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/reveal.js/dist/theme/black.css\">\n      <script src=\"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\"></script>\n  </head>\n  <body>\n      <div class=\"reveal\" contenteditable=\"true\">\n          <div class=\"slides\">\n              ${markdown.split('---').map(slide => `<section data-markdown><script type=\"text/template\">${slide.trim()}</script></section>`).join('\\n')}\n          </div>\n      </div>\n      <script src=\"https://cdn.jsdelivr.net/npm/reveal.js/dist/reveal.js\"></script>\n      <script src=\"https://cdn.jsdelivr.net/npm/reveal.js/plugin/markdown/markdown.js\"></script>\n      <script>\n          Reveal.initialize({\n              plugins: [ RevealMarkdown ]\n          });\n          \n          // Ensure Mermaid diagrams initialize correctly\n          document.addEventListener('DOMContentLoaded', () => {\n              mermaid.initialize({ startOnLoad: true , securityLevel: 'loose', theme: 'dark' });\n              document.querySelectorAll('.mermaid').forEach(el => {\n                  el.innerHTML = el.textContent;\n                  mermaid.init(undefined, el);\n              });\n          });\n      </script>\n  </body>\n  </html>`;\n  }\n\n  /**\n   * Converts CSV/TSV content to a markdown table.\n   * \n   * @param {string} input - The CSV/TSV string to convert\n   * @param {string} [delimiter=','] - The delimiter used in the input (comma, tab, etc.)\n   * @returns {string} A markdown formatted table\n   */\n  csvOrTsvToMarkdownTable(input, delimiter = ',') {\n    // Parse CSV/TSV content\n    const parsedData = Papa.parse(input, {\n      delimiter,\n      skipEmptyLines: true\n    });\n\n    const rows = parsedData.data;\n\n    if (rows.length === 0) return 'No data found.';\n\n    // Markdown table header\n    const header = `| ${rows[0].join(' | ')} |`;\n    const separator = `| ${rows[0].map(() => '---').join(' | ')} |`;\n    const tableRows = rows.slice(1).map(row => `| ${row.join(' | ')} |`).join('\\n');\n\n    return `${header}\\n${separator}\\n${tableRows}`;\n  }\n}\n\n// The React component wrapper has been moved to a separate file\n// to avoid dependency issues when React is not available\n\n// Export the main class and RevisionManager\nexport default SquibView;\nexport { RevisionManager };","function extend (destination) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (source.hasOwnProperty(key)) destination[key] = source[key];\n    }\n  }\n  return destination\n}\n\nfunction repeat (character, count) {\n  return Array(count + 1).join(character)\n}\n\nfunction trimLeadingNewlines (string) {\n  return string.replace(/^\\n*/, '')\n}\n\nfunction trimTrailingNewlines (string) {\n  // avoid match-at-end regexp bottleneck, see #370\n  var indexEnd = string.length;\n  while (indexEnd > 0 && string[indexEnd - 1] === '\\n') indexEnd--;\n  return string.substring(0, indexEnd)\n}\n\nvar blockElements = [\n  'ADDRESS', 'ARTICLE', 'ASIDE', 'AUDIO', 'BLOCKQUOTE', 'BODY', 'CANVAS',\n  'CENTER', 'DD', 'DIR', 'DIV', 'DL', 'DT', 'FIELDSET', 'FIGCAPTION', 'FIGURE',\n  'FOOTER', 'FORM', 'FRAMESET', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'HEADER',\n  'HGROUP', 'HR', 'HTML', 'ISINDEX', 'LI', 'MAIN', 'MENU', 'NAV', 'NOFRAMES',\n  'NOSCRIPT', 'OL', 'OUTPUT', 'P', 'PRE', 'SECTION', 'TABLE', 'TBODY', 'TD',\n  'TFOOT', 'TH', 'THEAD', 'TR', 'UL'\n];\n\nfunction isBlock (node) {\n  return is(node, blockElements)\n}\n\nvar voidElements = [\n  'AREA', 'BASE', 'BR', 'COL', 'COMMAND', 'EMBED', 'HR', 'IMG', 'INPUT',\n  'KEYGEN', 'LINK', 'META', 'PARAM', 'SOURCE', 'TRACK', 'WBR'\n];\n\nfunction isVoid (node) {\n  return is(node, voidElements)\n}\n\nfunction hasVoid (node) {\n  return has(node, voidElements)\n}\n\nvar meaningfulWhenBlankElements = [\n  'A', 'TABLE', 'THEAD', 'TBODY', 'TFOOT', 'TH', 'TD', 'IFRAME', 'SCRIPT',\n  'AUDIO', 'VIDEO'\n];\n\nfunction isMeaningfulWhenBlank (node) {\n  return is(node, meaningfulWhenBlankElements)\n}\n\nfunction hasMeaningfulWhenBlank (node) {\n  return has(node, meaningfulWhenBlankElements)\n}\n\nfunction is (node, tagNames) {\n  return tagNames.indexOf(node.nodeName) >= 0\n}\n\nfunction has (node, tagNames) {\n  return (\n    node.getElementsByTagName &&\n    tagNames.some(function (tagName) {\n      return node.getElementsByTagName(tagName).length\n    })\n  )\n}\n\nvar rules = {};\n\nrules.paragraph = {\n  filter: 'p',\n\n  replacement: function (content) {\n    return '\\n\\n' + content + '\\n\\n'\n  }\n};\n\nrules.lineBreak = {\n  filter: 'br',\n\n  replacement: function (content, node, options) {\n    return options.br + '\\n'\n  }\n};\n\nrules.heading = {\n  filter: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n\n  replacement: function (content, node, options) {\n    var hLevel = Number(node.nodeName.charAt(1));\n\n    if (options.headingStyle === 'setext' && hLevel < 3) {\n      var underline = repeat((hLevel === 1 ? '=' : '-'), content.length);\n      return (\n        '\\n\\n' + content + '\\n' + underline + '\\n\\n'\n      )\n    } else {\n      return '\\n\\n' + repeat('#', hLevel) + ' ' + content + '\\n\\n'\n    }\n  }\n};\n\nrules.blockquote = {\n  filter: 'blockquote',\n\n  replacement: function (content) {\n    content = content.replace(/^\\n+|\\n+$/g, '');\n    content = content.replace(/^/gm, '> ');\n    return '\\n\\n' + content + '\\n\\n'\n  }\n};\n\nrules.list = {\n  filter: ['ul', 'ol'],\n\n  replacement: function (content, node) {\n    var parent = node.parentNode;\n    if (parent.nodeName === 'LI' && parent.lastElementChild === node) {\n      return '\\n' + content\n    } else {\n      return '\\n\\n' + content + '\\n\\n'\n    }\n  }\n};\n\nrules.listItem = {\n  filter: 'li',\n\n  replacement: function (content, node, options) {\n    content = content\n      .replace(/^\\n+/, '') // remove leading newlines\n      .replace(/\\n+$/, '\\n') // replace trailing newlines with just a single one\n      .replace(/\\n/gm, '\\n    '); // indent\n    var prefix = options.bulletListMarker + '   ';\n    var parent = node.parentNode;\n    if (parent.nodeName === 'OL') {\n      var start = parent.getAttribute('start');\n      var index = Array.prototype.indexOf.call(parent.children, node);\n      prefix = (start ? Number(start) + index : index + 1) + '.  ';\n    }\n    return (\n      prefix + content + (node.nextSibling && !/\\n$/.test(content) ? '\\n' : '')\n    )\n  }\n};\n\nrules.indentedCodeBlock = {\n  filter: function (node, options) {\n    return (\n      options.codeBlockStyle === 'indented' &&\n      node.nodeName === 'PRE' &&\n      node.firstChild &&\n      node.firstChild.nodeName === 'CODE'\n    )\n  },\n\n  replacement: function (content, node, options) {\n    return (\n      '\\n\\n    ' +\n      node.firstChild.textContent.replace(/\\n/g, '\\n    ') +\n      '\\n\\n'\n    )\n  }\n};\n\nrules.fencedCodeBlock = {\n  filter: function (node, options) {\n    return (\n      options.codeBlockStyle === 'fenced' &&\n      node.nodeName === 'PRE' &&\n      node.firstChild &&\n      node.firstChild.nodeName === 'CODE'\n    )\n  },\n\n  replacement: function (content, node, options) {\n    var className = node.firstChild.getAttribute('class') || '';\n    var language = (className.match(/language-(\\S+)/) || [null, ''])[1];\n    var code = node.firstChild.textContent;\n\n    var fenceChar = options.fence.charAt(0);\n    var fenceSize = 3;\n    var fenceInCodeRegex = new RegExp('^' + fenceChar + '{3,}', 'gm');\n\n    var match;\n    while ((match = fenceInCodeRegex.exec(code))) {\n      if (match[0].length >= fenceSize) {\n        fenceSize = match[0].length + 1;\n      }\n    }\n\n    var fence = repeat(fenceChar, fenceSize);\n\n    return (\n      '\\n\\n' + fence + language + '\\n' +\n      code.replace(/\\n$/, '') +\n      '\\n' + fence + '\\n\\n'\n    )\n  }\n};\n\nrules.horizontalRule = {\n  filter: 'hr',\n\n  replacement: function (content, node, options) {\n    return '\\n\\n' + options.hr + '\\n\\n'\n  }\n};\n\nrules.inlineLink = {\n  filter: function (node, options) {\n    return (\n      options.linkStyle === 'inlined' &&\n      node.nodeName === 'A' &&\n      node.getAttribute('href')\n    )\n  },\n\n  replacement: function (content, node) {\n    var href = node.getAttribute('href');\n    if (href) href = href.replace(/([()])/g, '\\\\$1');\n    var title = cleanAttribute(node.getAttribute('title'));\n    if (title) title = ' \"' + title.replace(/\"/g, '\\\\\"') + '\"';\n    return '[' + content + '](' + href + title + ')'\n  }\n};\n\nrules.referenceLink = {\n  filter: function (node, options) {\n    return (\n      options.linkStyle === 'referenced' &&\n      node.nodeName === 'A' &&\n      node.getAttribute('href')\n    )\n  },\n\n  replacement: function (content, node, options) {\n    var href = node.getAttribute('href');\n    var title = cleanAttribute(node.getAttribute('title'));\n    if (title) title = ' \"' + title + '\"';\n    var replacement;\n    var reference;\n\n    switch (options.linkReferenceStyle) {\n      case 'collapsed':\n        replacement = '[' + content + '][]';\n        reference = '[' + content + ']: ' + href + title;\n        break\n      case 'shortcut':\n        replacement = '[' + content + ']';\n        reference = '[' + content + ']: ' + href + title;\n        break\n      default:\n        var id = this.references.length + 1;\n        replacement = '[' + content + '][' + id + ']';\n        reference = '[' + id + ']: ' + href + title;\n    }\n\n    this.references.push(reference);\n    return replacement\n  },\n\n  references: [],\n\n  append: function (options) {\n    var references = '';\n    if (this.references.length) {\n      references = '\\n\\n' + this.references.join('\\n') + '\\n\\n';\n      this.references = []; // Reset references\n    }\n    return references\n  }\n};\n\nrules.emphasis = {\n  filter: ['em', 'i'],\n\n  replacement: function (content, node, options) {\n    if (!content.trim()) return ''\n    return options.emDelimiter + content + options.emDelimiter\n  }\n};\n\nrules.strong = {\n  filter: ['strong', 'b'],\n\n  replacement: function (content, node, options) {\n    if (!content.trim()) return ''\n    return options.strongDelimiter + content + options.strongDelimiter\n  }\n};\n\nrules.code = {\n  filter: function (node) {\n    var hasSiblings = node.previousSibling || node.nextSibling;\n    var isCodeBlock = node.parentNode.nodeName === 'PRE' && !hasSiblings;\n\n    return node.nodeName === 'CODE' && !isCodeBlock\n  },\n\n  replacement: function (content) {\n    if (!content) return ''\n    content = content.replace(/\\r?\\n|\\r/g, ' ');\n\n    var extraSpace = /^`|^ .*?[^ ].* $|`$/.test(content) ? ' ' : '';\n    var delimiter = '`';\n    var matches = content.match(/`+/gm) || [];\n    while (matches.indexOf(delimiter) !== -1) delimiter = delimiter + '`';\n\n    return delimiter + extraSpace + content + extraSpace + delimiter\n  }\n};\n\nrules.image = {\n  filter: 'img',\n\n  replacement: function (content, node) {\n    var alt = cleanAttribute(node.getAttribute('alt'));\n    var src = node.getAttribute('src') || '';\n    var title = cleanAttribute(node.getAttribute('title'));\n    var titlePart = title ? ' \"' + title + '\"' : '';\n    return src ? '![' + alt + ']' + '(' + src + titlePart + ')' : ''\n  }\n};\n\nfunction cleanAttribute (attribute) {\n  return attribute ? attribute.replace(/(\\n+\\s*)+/g, '\\n') : ''\n}\n\n/**\n * Manages a collection of rules used to convert HTML to Markdown\n */\n\nfunction Rules (options) {\n  this.options = options;\n  this._keep = [];\n  this._remove = [];\n\n  this.blankRule = {\n    replacement: options.blankReplacement\n  };\n\n  this.keepReplacement = options.keepReplacement;\n\n  this.defaultRule = {\n    replacement: options.defaultReplacement\n  };\n\n  this.array = [];\n  for (var key in options.rules) this.array.push(options.rules[key]);\n}\n\nRules.prototype = {\n  add: function (key, rule) {\n    this.array.unshift(rule);\n  },\n\n  keep: function (filter) {\n    this._keep.unshift({\n      filter: filter,\n      replacement: this.keepReplacement\n    });\n  },\n\n  remove: function (filter) {\n    this._remove.unshift({\n      filter: filter,\n      replacement: function () {\n        return ''\n      }\n    });\n  },\n\n  forNode: function (node) {\n    if (node.isBlank) return this.blankRule\n    var rule;\n\n    if ((rule = findRule(this.array, node, this.options))) return rule\n    if ((rule = findRule(this._keep, node, this.options))) return rule\n    if ((rule = findRule(this._remove, node, this.options))) return rule\n\n    return this.defaultRule\n  },\n\n  forEach: function (fn) {\n    for (var i = 0; i < this.array.length; i++) fn(this.array[i], i);\n  }\n};\n\nfunction findRule (rules, node, options) {\n  for (var i = 0; i < rules.length; i++) {\n    var rule = rules[i];\n    if (filterValue(rule, node, options)) return rule\n  }\n  return void 0\n}\n\nfunction filterValue (rule, node, options) {\n  var filter = rule.filter;\n  if (typeof filter === 'string') {\n    if (filter === node.nodeName.toLowerCase()) return true\n  } else if (Array.isArray(filter)) {\n    if (filter.indexOf(node.nodeName.toLowerCase()) > -1) return true\n  } else if (typeof filter === 'function') {\n    if (filter.call(rule, node, options)) return true\n  } else {\n    throw new TypeError('`filter` needs to be a string, array, or function')\n  }\n}\n\n/**\n * The collapseWhitespace function is adapted from collapse-whitespace\n * by Luc Thevenard.\n *\n * The MIT License (MIT)\n *\n * Copyright (c) 2014 Luc Thevenard <lucthevenard@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * collapseWhitespace(options) removes extraneous whitespace from an the given element.\n *\n * @param {Object} options\n */\nfunction collapseWhitespace (options) {\n  var element = options.element;\n  var isBlock = options.isBlock;\n  var isVoid = options.isVoid;\n  var isPre = options.isPre || function (node) {\n    return node.nodeName === 'PRE'\n  };\n\n  if (!element.firstChild || isPre(element)) return\n\n  var prevText = null;\n  var keepLeadingWs = false;\n\n  var prev = null;\n  var node = next(prev, element, isPre);\n\n  while (node !== element) {\n    if (node.nodeType === 3 || node.nodeType === 4) { // Node.TEXT_NODE or Node.CDATA_SECTION_NODE\n      var text = node.data.replace(/[ \\r\\n\\t]+/g, ' ');\n\n      if ((!prevText || / $/.test(prevText.data)) &&\n          !keepLeadingWs && text[0] === ' ') {\n        text = text.substr(1);\n      }\n\n      // `text` might be empty at this point.\n      if (!text) {\n        node = remove(node);\n        continue\n      }\n\n      node.data = text;\n\n      prevText = node;\n    } else if (node.nodeType === 1) { // Node.ELEMENT_NODE\n      if (isBlock(node) || node.nodeName === 'BR') {\n        if (prevText) {\n          prevText.data = prevText.data.replace(/ $/, '');\n        }\n\n        prevText = null;\n        keepLeadingWs = false;\n      } else if (isVoid(node) || isPre(node)) {\n        // Avoid trimming space around non-block, non-BR void elements and inline PRE.\n        prevText = null;\n        keepLeadingWs = true;\n      } else if (prevText) {\n        // Drop protection if set previously.\n        keepLeadingWs = false;\n      }\n    } else {\n      node = remove(node);\n      continue\n    }\n\n    var nextNode = next(prev, node, isPre);\n    prev = node;\n    node = nextNode;\n  }\n\n  if (prevText) {\n    prevText.data = prevText.data.replace(/ $/, '');\n    if (!prevText.data) {\n      remove(prevText);\n    }\n  }\n}\n\n/**\n * remove(node) removes the given node from the DOM and returns the\n * next node in the sequence.\n *\n * @param {Node} node\n * @return {Node} node\n */\nfunction remove (node) {\n  var next = node.nextSibling || node.parentNode;\n\n  node.parentNode.removeChild(node);\n\n  return next\n}\n\n/**\n * next(prev, current, isPre) returns the next node in the sequence, given the\n * current and previous nodes.\n *\n * @param {Node} prev\n * @param {Node} current\n * @param {Function} isPre\n * @return {Node}\n */\nfunction next (prev, current, isPre) {\n  if ((prev && prev.parentNode === current) || isPre(current)) {\n    return current.nextSibling || current.parentNode\n  }\n\n  return current.firstChild || current.nextSibling || current.parentNode\n}\n\n/*\n * Set up window for Node.js\n */\n\nvar root = (typeof window !== 'undefined' ? window : {});\n\n/*\n * Parsing HTML strings\n */\n\nfunction canParseHTMLNatively () {\n  var Parser = root.DOMParser;\n  var canParse = false;\n\n  // Adapted from https://gist.github.com/1129031\n  // Firefox/Opera/IE throw errors on unsupported types\n  try {\n    // WebKit returns null on unsupported types\n    if (new Parser().parseFromString('', 'text/html')) {\n      canParse = true;\n    }\n  } catch (e) {}\n\n  return canParse\n}\n\nfunction createHTMLParser () {\n  var Parser = function () {};\n\n  {\n    var domino = require('@mixmark-io/domino');\n    Parser.prototype.parseFromString = function (string) {\n      return domino.createDocument(string)\n    };\n  }\n  return Parser\n}\n\nvar HTMLParser = canParseHTMLNatively() ? root.DOMParser : createHTMLParser();\n\nfunction RootNode (input, options) {\n  var root;\n  if (typeof input === 'string') {\n    var doc = htmlParser().parseFromString(\n      // DOM parsers arrange elements in the <head> and <body>.\n      // Wrapping in a custom element ensures elements are reliably arranged in\n      // a single element.\n      '<x-turndown id=\"turndown-root\">' + input + '</x-turndown>',\n      'text/html'\n    );\n    root = doc.getElementById('turndown-root');\n  } else {\n    root = input.cloneNode(true);\n  }\n  collapseWhitespace({\n    element: root,\n    isBlock: isBlock,\n    isVoid: isVoid,\n    isPre: options.preformattedCode ? isPreOrCode : null\n  });\n\n  return root\n}\n\nvar _htmlParser;\nfunction htmlParser () {\n  _htmlParser = _htmlParser || new HTMLParser();\n  return _htmlParser\n}\n\nfunction isPreOrCode (node) {\n  return node.nodeName === 'PRE' || node.nodeName === 'CODE'\n}\n\nfunction Node (node, options) {\n  node.isBlock = isBlock(node);\n  node.isCode = node.nodeName === 'CODE' || node.parentNode.isCode;\n  node.isBlank = isBlank(node);\n  node.flankingWhitespace = flankingWhitespace(node, options);\n  return node\n}\n\nfunction isBlank (node) {\n  return (\n    !isVoid(node) &&\n    !isMeaningfulWhenBlank(node) &&\n    /^\\s*$/i.test(node.textContent) &&\n    !hasVoid(node) &&\n    !hasMeaningfulWhenBlank(node)\n  )\n}\n\nfunction flankingWhitespace (node, options) {\n  if (node.isBlock || (options.preformattedCode && node.isCode)) {\n    return { leading: '', trailing: '' }\n  }\n\n  var edges = edgeWhitespace(node.textContent);\n\n  // abandon leading ASCII WS if left-flanked by ASCII WS\n  if (edges.leadingAscii && isFlankedByWhitespace('left', node, options)) {\n    edges.leading = edges.leadingNonAscii;\n  }\n\n  // abandon trailing ASCII WS if right-flanked by ASCII WS\n  if (edges.trailingAscii && isFlankedByWhitespace('right', node, options)) {\n    edges.trailing = edges.trailingNonAscii;\n  }\n\n  return { leading: edges.leading, trailing: edges.trailing }\n}\n\nfunction edgeWhitespace (string) {\n  var m = string.match(/^(([ \\t\\r\\n]*)(\\s*))(?:(?=\\S)[\\s\\S]*\\S)?((\\s*?)([ \\t\\r\\n]*))$/);\n  return {\n    leading: m[1], // whole string for whitespace-only strings\n    leadingAscii: m[2],\n    leadingNonAscii: m[3],\n    trailing: m[4], // empty for whitespace-only strings\n    trailingNonAscii: m[5],\n    trailingAscii: m[6]\n  }\n}\n\nfunction isFlankedByWhitespace (side, node, options) {\n  var sibling;\n  var regExp;\n  var isFlanked;\n\n  if (side === 'left') {\n    sibling = node.previousSibling;\n    regExp = / $/;\n  } else {\n    sibling = node.nextSibling;\n    regExp = /^ /;\n  }\n\n  if (sibling) {\n    if (sibling.nodeType === 3) {\n      isFlanked = regExp.test(sibling.nodeValue);\n    } else if (options.preformattedCode && sibling.nodeName === 'CODE') {\n      isFlanked = false;\n    } else if (sibling.nodeType === 1 && !isBlock(sibling)) {\n      isFlanked = regExp.test(sibling.textContent);\n    }\n  }\n  return isFlanked\n}\n\nvar reduce = Array.prototype.reduce;\nvar escapes = [\n  [/\\\\/g, '\\\\\\\\'],\n  [/\\*/g, '\\\\*'],\n  [/^-/g, '\\\\-'],\n  [/^\\+ /g, '\\\\+ '],\n  [/^(=+)/g, '\\\\$1'],\n  [/^(#{1,6}) /g, '\\\\$1 '],\n  [/`/g, '\\\\`'],\n  [/^~~~/g, '\\\\~~~'],\n  [/\\[/g, '\\\\['],\n  [/\\]/g, '\\\\]'],\n  [/^>/g, '\\\\>'],\n  [/_/g, '\\\\_'],\n  [/^(\\d+)\\. /g, '$1\\\\. ']\n];\n\nfunction TurndownService (options) {\n  if (!(this instanceof TurndownService)) return new TurndownService(options)\n\n  var defaults = {\n    rules: rules,\n    headingStyle: 'setext',\n    hr: '* * *',\n    bulletListMarker: '*',\n    codeBlockStyle: 'indented',\n    fence: '```',\n    emDelimiter: '_',\n    strongDelimiter: '**',\n    linkStyle: 'inlined',\n    linkReferenceStyle: 'full',\n    br: '  ',\n    preformattedCode: false,\n    blankReplacement: function (content, node) {\n      return node.isBlock ? '\\n\\n' : ''\n    },\n    keepReplacement: function (content, node) {\n      return node.isBlock ? '\\n\\n' + node.outerHTML + '\\n\\n' : node.outerHTML\n    },\n    defaultReplacement: function (content, node) {\n      return node.isBlock ? '\\n\\n' + content + '\\n\\n' : content\n    }\n  };\n  this.options = extend({}, defaults, options);\n  this.rules = new Rules(this.options);\n}\n\nTurndownService.prototype = {\n  /**\n   * The entry point for converting a string or DOM node to Markdown\n   * @public\n   * @param {String|HTMLElement} input The string or DOM node to convert\n   * @returns A Markdown representation of the input\n   * @type String\n   */\n\n  turndown: function (input) {\n    if (!canConvert(input)) {\n      throw new TypeError(\n        input + ' is not a string, or an element/document/fragment node.'\n      )\n    }\n\n    if (input === '') return ''\n\n    var output = process.call(this, new RootNode(input, this.options));\n    return postProcess.call(this, output)\n  },\n\n  /**\n   * Add one or more plugins\n   * @public\n   * @param {Function|Array} plugin The plugin or array of plugins to add\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  use: function (plugin) {\n    if (Array.isArray(plugin)) {\n      for (var i = 0; i < plugin.length; i++) this.use(plugin[i]);\n    } else if (typeof plugin === 'function') {\n      plugin(this);\n    } else {\n      throw new TypeError('plugin must be a Function or an Array of Functions')\n    }\n    return this\n  },\n\n  /**\n   * Adds a rule\n   * @public\n   * @param {String} key The unique key of the rule\n   * @param {Object} rule The rule\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  addRule: function (key, rule) {\n    this.rules.add(key, rule);\n    return this\n  },\n\n  /**\n   * Keep a node (as HTML) that matches the filter\n   * @public\n   * @param {String|Array|Function} filter The unique key of the rule\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  keep: function (filter) {\n    this.rules.keep(filter);\n    return this\n  },\n\n  /**\n   * Remove a node that matches the filter\n   * @public\n   * @param {String|Array|Function} filter The unique key of the rule\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  remove: function (filter) {\n    this.rules.remove(filter);\n    return this\n  },\n\n  /**\n   * Escapes Markdown syntax\n   * @public\n   * @param {String} string The string to escape\n   * @returns A string with Markdown syntax escaped\n   * @type String\n   */\n\n  escape: function (string) {\n    return escapes.reduce(function (accumulator, escape) {\n      return accumulator.replace(escape[0], escape[1])\n    }, string)\n  }\n};\n\n/**\n * Reduces a DOM node down to its Markdown string equivalent\n * @private\n * @param {HTMLElement} parentNode The node to convert\n * @returns A Markdown representation of the node\n * @type String\n */\n\nfunction process (parentNode) {\n  var self = this;\n  return reduce.call(parentNode.childNodes, function (output, node) {\n    node = new Node(node, self.options);\n\n    var replacement = '';\n    if (node.nodeType === 3) {\n      replacement = node.isCode ? node.nodeValue : self.escape(node.nodeValue);\n    } else if (node.nodeType === 1) {\n      replacement = replacementForNode.call(self, node);\n    }\n\n    return join(output, replacement)\n  }, '')\n}\n\n/**\n * Appends strings as each rule requires and trims the output\n * @private\n * @param {String} output The conversion output\n * @returns A trimmed version of the ouput\n * @type String\n */\n\nfunction postProcess (output) {\n  var self = this;\n  this.rules.forEach(function (rule) {\n    if (typeof rule.append === 'function') {\n      output = join(output, rule.append(self.options));\n    }\n  });\n\n  return output.replace(/^[\\t\\r\\n]+/, '').replace(/[\\t\\r\\n\\s]+$/, '')\n}\n\n/**\n * Converts an element node to its Markdown equivalent\n * @private\n * @param {HTMLElement} node The node to convert\n * @returns A Markdown representation of the node\n * @type String\n */\n\nfunction replacementForNode (node) {\n  var rule = this.rules.forNode(node);\n  var content = process.call(this, node);\n  var whitespace = node.flankingWhitespace;\n  if (whitespace.leading || whitespace.trailing) content = content.trim();\n  return (\n    whitespace.leading +\n    rule.replacement(content, node, this.options) +\n    whitespace.trailing\n  )\n}\n\n/**\n * Joins replacement to the current output with appropriate number of new lines\n * @private\n * @param {String} output The current conversion output\n * @param {String} replacement The string to append to the output\n * @returns Joined output\n * @type String\n */\n\nfunction join (output, replacement) {\n  var s1 = trimTrailingNewlines(output);\n  var s2 = trimLeadingNewlines(replacement);\n  var nls = Math.max(output.length - s1.length, replacement.length - s2.length);\n  var separator = '\\n\\n'.substring(0, nls);\n\n  return s1 + separator + s2\n}\n\n/**\n * Determines whether an input can be converted\n * @private\n * @param {String|HTMLElement} input Describe this parameter\n * @returns Describe what it returns\n * @type String|Object|Array|Boolean|Number\n */\n\nfunction canConvert (input) {\n  return (\n    input != null && (\n      typeof input === 'string' ||\n      (input.nodeType && (\n        input.nodeType === 1 || input.nodeType === 9 || input.nodeType === 11\n      ))\n    )\n  )\n}\n\nexport default TurndownService;\n","import TurndownService from 'turndown';\n\n/**\n * Converts HTML content to Markdown format using the Turndown library with \n * customizations specific to SquibView's needs.\n */\nexport default class HtmlToMarkdown {\n  constructor(options = {}) {\n    this.turndownService = new TurndownService({\n      headingStyle: 'atx',       // Use # style headings\n      codeBlockStyle: 'fenced',  // Use ``` style code blocks\n      emDelimiter: '*',          // Use * for emphasis\n      bulletListMarker: '-',     // Use - for bullet lists\n      ...options\n    });\n    \n    // Add a simple cache for converted content to improve performance\n    this.cache = new Map();\n    this.cacheSize = options.cacheSize || 10;\n    \n    // Store special blocks for preservation\n    this._specialBlocks = new Map();\n    \n    this.configureTurndownRules();\n  }\n  \n  /**\n   * Configure custom Turndown rules\n   */\n  configureTurndownRules() {\n    // Preserve Mermaid diagram blocks with special identifiers\n    this.turndownService.addRule('mermaid', {\n      filter: node => {\n        return node.nodeName === 'DIV' && \n               node.classList.contains('mermaid');\n      },\n      replacement: (content, node) => {\n        // Generate a unique ID for this mermaid block to help with matching later\n        const blockId = 'mermaid_' + Math.random().toString(36).substring(2, 10);\n        \n        // Store the raw content for later use\n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'mermaid',\n            content: node.textContent\n          });\n        }\n        \n        // Return with special marker that can be identified later\n        return `\\n<div data-special-block=\"${blockId}\" class=\"mermaid\">\\n` +\n               node.textContent + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    // Preserve SVG elements with special identifiers\n    this.turndownService.addRule('svg', {\n      filter: 'svg',\n      replacement: (content, node) => {\n        // Generate a unique ID for this SVG block\n        const blockId = 'svg_' + Math.random().toString(36).substring(2, 10);\n        \n        // Store the raw SVG for later use\n        const serializer = new XMLSerializer();\n        const svgString = serializer.serializeToString(node);\n        \n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'svg',\n            content: svgString\n          });\n        }\n        \n        // Return with special marker\n        return `\\n<div data-special-block=\"${blockId}\" class=\"svg-container\">\\n` +\n               svgString + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    // Preserve GeoJSON map blocks\n    this.turndownService.addRule('geojson', {\n      filter: node => {\n        return node.nodeName === 'DIV' && \n               node.classList.contains('geojson-map');\n      },\n      replacement: (content, node) => {\n        // Generate a unique ID for this GeoJSON block\n        const blockId = 'geojson_' + Math.random().toString(36).substring(2, 10);\n        \n        // Try to extract the GeoJSON data from the script element\n        let geojsonContent = '';\n        try {\n          // The actual GeoJSON would be in a script tag or in a data attribute\n          // Here we'll use a placeholder since the actual data is hard to extract\n          geojsonContent = node.dataset.geojson || '{\"type\":\"FeatureCollection\",\"features\":[]}';\n        } catch(e) {\n          console.error('Error extracting GeoJSON data:', e);\n        }\n        \n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'geojson',\n            content: geojsonContent\n          });\n        }\n        \n        return `\\n<div data-special-block=\"${blockId}\" class=\"geojson-container\">\\n` +\n               geojsonContent + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    // Preserve Math blocks\n    this.turndownService.addRule('math', {\n      filter: node => {\n        return node.nodeName === 'DIV' && \n               node.classList.contains('math-display');\n      },\n      replacement: (content, node) => {\n        // Generate a unique ID for this math block\n        const blockId = 'math_' + Math.random().toString(36).substring(2, 10);\n        \n        // Get the raw math content (might be wrapped in $$...$$ in the original)\n        let mathContent = node.textContent;\n        \n        // Remove $$ delimiters if present\n        mathContent = mathContent.replace(/^\\$\\$([\\s\\S]*)\\$\\$$/, '$1');\n        \n        if (this._specialBlocks) {\n          this._specialBlocks.set(blockId, {\n            type: 'math',\n            content: mathContent\n          });\n        }\n        \n        return `\\n<div data-special-block=\"${blockId}\" class=\"math-container\">\\n` +\n               mathContent + \n               `\\n</div>\\n`;\n      }\n    });\n    \n    // Special handling for code blocks\n    this.turndownService.addRule('codeBlock', {\n      filter: node => {\n        return node.nodeName === 'PRE' && \n               node.firstChild && \n               node.firstChild.nodeName === 'CODE';\n      },\n      replacement: (content, node) => {\n        const code = node.firstChild.textContent;\n        let language = '';\n        \n        // Try to detect language from class\n        if (node.firstChild.className) {\n          const match = node.firstChild.className.match(/language-(\\w+)/);\n          if (match) {\n            language = match[1];\n          }\n        }\n        \n        return '\\n```' + language + '\\n' + code.trim() + '\\n```\\n';\n      }\n    });\n    \n    // Improve table handling\n    this.turndownService.addRule('tableCell', {\n      filter: ['th', 'td'],\n      replacement: (content, node) => {\n        return ' ' + content.trim() + ' |';\n      }\n    });\n    \n    this.turndownService.addRule('tableRow', {\n      filter: 'tr',\n      replacement: (content, node) => {\n        let prefix = '|';\n        \n        // Handle header rows\n        if (node.parentNode.nodeName === 'THEAD') {\n          const cells = node.querySelectorAll('th, td').length;\n          const separatorRow = '\\n|' + ' --- |'.repeat(cells);\n          return prefix + content + separatorRow;\n        }\n        \n        return prefix + content + '\\n';\n      }\n    });\n    \n    this.turndownService.addRule('table', {\n      filter: 'table',\n      replacement: (content, node) => {\n        // If the table doesn't have a header row, we need to add the separator\n        if (!node.querySelector('thead') && node.querySelector('tr')) {\n          const firstRow = node.querySelector('tr');\n          const cells = firstRow.querySelectorAll('th, td').length;\n          const separator = '\\n|' + ' --- |'.repeat(cells) + '\\n';\n          \n          // Insert separator after the first row\n          const rows = content.split('\\n');\n          if (rows.length > 0) {\n            return rows[0] + separator + rows.slice(1).join('\\n') + '\\n\\n';\n          }\n        }\n        \n        return content + '\\n\\n';\n      }\n    });\n  }\n  \n  /**\n   * Get a simplified hash code of a string for caching\n   * \n   * @private\n   * @param {string} str - The string to hash\n   * @returns {string} A hash representation of the string\n   */\n  _getStringHash(str) {\n    // Simple and fast hash function for strings\n    // This is not a cryptographic hash, just for caching purposes\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash.toString(36); // Convert to base36 for shorter string\n  }\n  \n  /**\n   * Convert HTML to Markdown with caching for performance\n   * \n   * @param {string} html - The HTML content to convert\n   * @param {Object} options - Additional options\n   * @param {string} options.originalSource - The original source if available\n   * @returns {string} The converted Markdown content\n   */\n  convert(html, options = {}) {\n    // Clear special blocks map for this conversion\n    this._specialBlocks.clear();\n    \n    // Use a hash of the HTML as the cache key\n    const cacheKey = this._getStringHash(html);\n    \n    // Check if we have a cached version\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey);\n    }\n    \n    // Convert the HTML to Markdown\n    let markdown = this.turndownService.turndown(html);\n    \n    // Post-process the markdown to restore special blocks\n    markdown = this._postProcessMarkdown(markdown, options.originalSource);\n    \n    // Cache the result\n    this.cache.set(cacheKey, markdown);\n    \n    // Keep the cache size under control\n    if (this.cache.size > this.cacheSize) {\n      // Remove the oldest entry\n      const firstKey = this.cache.keys().next().value;\n      this.cache.delete(firstKey);\n    }\n    \n    return markdown;\n  }\n  \n  /**\n   * Post-process markdown to restore special blocks and apply additional formatting\n   * \n   * @private\n   * @param {string} markdown - The converted markdown \n   * @param {string} originalSource - The original markdown source if available\n   * @returns {string} - The processed markdown\n   */\n  _postProcessMarkdown(markdown, originalSource) {\n    // First pass: Convert the special blocks markers back to proper markdown\n    \n    // Convert mermaid blocks\n    const mermaidBlockRegex = /<div data-special-block=\"mermaid_[^\"]*\" class=\"mermaid\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(mermaidBlockRegex, (match, content) => {\n      return `\\n\\`\\`\\`mermaid\\n${content.trim()}\\n\\`\\`\\`\\n`;\n    });\n    \n    // Convert SVG blocks\n    const svgBlockRegex = /<div data-special-block=\"svg_[^\"]*\" class=\"svg-container\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(svgBlockRegex, (match, content) => {\n      // Try to find a closing SVG tag\n      const svgMatch = content.match(/<svg[\\s\\S]*?<\\/svg>/);\n      if (svgMatch) {\n        return `\\n\\`\\`\\`svg\\n${svgMatch[0]}\\n\\`\\`\\`\\n`;\n      }\n      return match;\n    });\n    \n    // Convert GeoJSON blocks\n    const geojsonBlockRegex = /<div data-special-block=\"geojson_[^\"]*\" class=\"geojson-container\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(geojsonBlockRegex, (match, content) => {\n      try {\n        // Ensure content is valid JSON before creating the code block\n        JSON.parse(content);\n        return `\\n\\`\\`\\`geojson\\n${content.trim()}\\n\\`\\`\\`\\n`;\n      } catch (e) {\n        console.error('Invalid GeoJSON data:', e);\n        return `\\n\\`\\`\\`geojson\\n{\"type\":\"FeatureCollection\",\"features\":[]}\\n\\`\\`\\`\\n`;\n      }\n    });\n    \n    // Convert Math blocks\n    const mathBlockRegex = /<div data-special-block=\"math_[^\"]*\" class=\"math-container\">\\s*([\\s\\S]*?)\\s*<\\/div>/g;\n    markdown = markdown.replace(mathBlockRegex, (match, content) => {\n      return `\\n\\`\\`\\`math\\n${content.trim()}\\n\\`\\`\\`\\n`;\n    });\n    \n    // Second pass: Restore blocks from original source if possible\n    if (originalSource) {\n      // Extract code blocks from original source\n      const codeBlockRegex = /```(\\w+)\\s*([\\s\\S]*?)```/g;\n      let match;\n      let blockIndex = 0;\n      const originalBlocks = [];\n      \n      while ((match = codeBlockRegex.exec(originalSource)) !== null) {\n        const type = match[1];\n        const content = match[2];\n        \n        if (type === 'mermaid' || type === 'svg' || type === 'geojson' || type === 'math') {\n          originalBlocks.push({\n            type,\n            content: match[0],\n            index: blockIndex++\n          });\n        }\n      }\n      \n      // Try to match original blocks with current blocks\n      // This is a simplistic approach that assumes blocks are in the same order\n      \n      let mermaidIndex = 0;\n      let svgIndex = 0;\n      let geojsonIndex = 0;\n      let mathIndex = 0;\n      \n      // Replace mermaid blocks\n      markdown = markdown.replace(/```mermaid\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const mermaidBlocks = originalBlocks.filter(b => b.type === 'mermaid');\n        if (mermaidIndex < mermaidBlocks.length) {\n          return mermaidBlocks[mermaidIndex++].content;\n        }\n        return match;\n      });\n      \n      // Replace SVG blocks\n      markdown = markdown.replace(/```svg\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const svgBlocks = originalBlocks.filter(b => b.type === 'svg');\n        if (svgIndex < svgBlocks.length) {\n          return svgBlocks[svgIndex++].content;\n        }\n        return match;\n      });\n      \n      // Replace GeoJSON blocks\n      markdown = markdown.replace(/```geojson\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const geojsonBlocks = originalBlocks.filter(b => b.type === 'geojson');\n        if (geojsonIndex < geojsonBlocks.length) {\n          return geojsonBlocks[geojsonIndex++].content;\n        }\n        return match;\n      });\n      \n      // Replace Math blocks\n      markdown = markdown.replace(/```math\\s*([\\s\\S]*?)```/g, (match, content) => {\n        const mathBlocks = originalBlocks.filter(b => b.type === 'math');\n        if (mathIndex < mathBlocks.length) {\n          return mathBlocks[mathIndex++].content;\n        }\n        return match;\n      });\n    }\n    \n    return markdown;\n  }\n}"],"names":["E","prototype","on","name","callback","ctx","e","this","push","fn","once","self","listener","off","apply","arguments","_","emit","data","slice","call","evtArr","i","len","length","evts","liveEvents","tinyEmitter","exports","tinyEmitterModule","TinyEmitter","diff_match_patch","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","DIFF_DELETE","Diff","op","text","diff_main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","Error","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","diffs","diff_compute_","unshift","diff_cleanupMerge","longtext","shorttext","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_lineMode_","diff_bisect_","a","diff_linesToChars_","chars1","chars2","linearray","lineArray","diff_charsToLines_","diff_cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","subDiff","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","y1","x1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","chars","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","undefined","String","fromCharCode","maxLines","charCodeAt","join","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","dmp","diff_halfMatchI_","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","seed","best_common","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastEquality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","diff_cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","match","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","diff_cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","diff_xIndex","loc","last_chars1","last_chars2","diff_prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_para","replace","diff_text1","diff_text2","diff_levenshtein","levenshtein","insertions","deletions","diff_toDelta","encodeURI","diff_fromDelta","diffsLength","tokens","split","param","decodeURI","ex","n","parseInt","isNaN","match_main","match_bitap_","s","match_alphabet_","match_bitapScore_","accuracy","proximity","abs","score_threshold","best_loc","lastIndexOf","bin_min","bin_mid","matchmask","last_rd","bin_max","start","finish","rd","charMatch","patch_addContext_","patch","start2","length1","padding","prefix","suffix","start1","length2","patch_make","opt_b","opt_c","patches","patch_obj","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patch_deepCopy","patchesCopy","patchCopy","patch_apply","nullPadding","patch_addPadding","patch_splitMax","results","start_loc","expected_loc","end_loc","index2","index1","mod","paddingLength","extraLength","patch_size","bigpatch","precontext","empty","shift","postcontext","patch_toText","patch_fromText","textline","textPointer","patchHeader","m","sign","toString","module","RevisionManager","_createClass","_classCallCheck","initialContent","contentType","currentIndex","diffEngine","DiffMatchPatch","key","value","content","newContent","currentContent","getCurrentContent","diff","patchText","getCurrentContentType","_slicedToArray","currentType","index","SquibView","element","options","_objectSpread","defaultOptions","container","document","querySelector","events","revisionManager","renderers","_initializeHtmlToMarkdown","initializeLibraries","registerDefaultRenderers","createStructure","initializeEventHandlers","initializeResizeObserver","initialize","inputContentType","setContent","setView","initialView","updateTypeButtons","_initializeHtmlToMarkdown2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","HtmlToMarkdownClass","wrap","_context","prev","next","HtmlToMarkdown","_htmlToMarkdownConverter","cacheSize","Promise","resolve","then","HtmlToMarkdown$2","sent","t0","console","error","convert","div","createElement","innerHTML","textContent","stop","mermaid","startOnLoad","securityLevel","theme","errorCallback","warn","init","md","window","markdownit","linkify","typographer","highlight","str","lang","hljs","getLanguage","language","__","defaultFence","renderer","rules","fence","idx","env","renderToken","token","info","trim","geojsonId","random","mathId","type","config","_this","registerRenderer","render","source","renderMarkdown","sourceToOutput","outputToSource","output","htmlToMarkdown","operations","increaseHeadings","src","markdownAdjustHeadings","decreaseHeadings","removeHR","buttons","label","action","title","renderHTML","makeRevealJSFullPage","markdownTable","csvOrTsvToMarkdownTable","tableToCSV","classList","add","baseClass","titleShow","titleContent","showControls","controls","editor","input","typeButtonsContainer","universalButtonsContainer","_this2","forEach","button","btn","addEventListener","getContent","appendChild","_this3","querySelectorAll","dataset","view","copySource","copyHTML","revisionUndo","revisionRedo","editDebounceTimer","specialContentBlocks","Map","currentView","editableContent","clearTimeout","setTimeout","renderedContent","originalSource","newSource","addRevision","mermaidMatch","specialBlocks","mermaidRegex","exec","startIndex","endIndex","svgMatch","svgRegex","geojsonMatch","geojsonRegex","mathMatch","mathRegex","mermaidDivMatch","svgTagMatch","modifiedSource","mermaidDivRegex","svgTagRegex","geojsonDivRegex","mathDivRegex","mermaidIndex","mermaidBlocks","filter","block","geojsonDivMatch","svgIndex","svgBlocks","mathDivMatch","geojsonIndex","geojsonBlocks","mathIndex","mathBlocks","_this4","ResizeObserver","entries","_step","_iterator","_createForOfIteratorHelper","done","target","adjustLayout","err","f","observe","containerRect","getBoundingClientRect","titleHeight","offsetHeight","controlsHeight","availableHeight","height","availableWidth","width","style","containerWidth","containerHeight","saveRevision","renderOutput","prevState","undo","nextState","redo","state","setRevision","getRevisionCount","getCurrentIndex","_renderMarkdown","_callee2","markdown","contentDiv","images","_iterator2","_step2","_loop","_context3","img","canvas","tempImg","_context2","getContext","Image","crossOrigin","reject","onload","naturalWidth","naturalHeight","drawImage","dataUrl","toDataURL","onerror","delegateYield","t1","_x","tempDiv","delimiter","table","from","map","row","cell","includes","newMarkdown","getMarkdownSource","offset","headingMatch","currentHeadingLevel","newHeadingLevel","repeat","toggle","copyMDButton","copyHTMLButton","remove","htmlContent","outputDiv","insertContentInIframe","parentElement","iframe","border","display","iframeDoc","contentWindow","open","write","close","output_iframe","output_ifraome_content","_copySource","_callee3","copyButton","markdownText","textarea","_context4","navigator","clipboard","writeText","position","opacity","body","select","removeChild","contentEditable","_copyHTML","_callee4","clone","svgElements","_iterator3","_step3","_loop2","selection","range","_this5","_context6","cloneNode","formattedCode","borderCollapse","tr","td","backgroundColor","fontFamily","whiteSpace","parentNode","replaceWith","svg","pngBlob","_context5","svgToPng","reader","FileReader","onloadend","result","readAsDataURL","clientWidth","viewBox","baseVal","clientHeight","setAttribute","substr","alt","replaceChild","getPlatform","ClipboardItem","Blob","innerText","t2","copyToClipboard","left","top","t3","getSelection","createRange","selectNodeContents","removeAllRanges","addRange","execCommand","t4","svgElement","svgString","XMLSerializer","serializeToString","svgWidth","svgHeight","scale","clearRect","toBlob","blob","svgDataUrl","encodeURIComponent","show","string","focus","sel","setSelectionRange","isMac","platform","toUpperCase","prompt","toLowerCase","userAgent","inputDivHTML","replaceAll","slide","rows","Papa","parse","skipEmptyLines","header","separator","tableRows","character","count","_defineProperty","version","url","blockElements","isBlock","node","is","voidElements","isVoid","meaningfulWhenBlankElements","tagNames","nodeName","has","getElementsByTagName","some","tagName","cleanAttribute","attribute","Rules","_keep","_remove","blankRule","replacement","blankReplacement","keepReplacement","defaultRule","defaultReplacement","array","findRule","rule","filterValue","isArray","TypeError","nextSibling","current","isPre","firstChild","paragraph","lineBreak","br","heading","hLevel","headingStyle","blockquote","list","parent","lastElementChild","listItem","bulletListMarker","getAttribute","children","test","indentedCodeBlock","codeBlockStyle","fencedCodeBlock","code","fenceChar","fenceSize","fenceInCodeRegex","RegExp","horizontalRule","hr","inlineLink","linkStyle","href","referenceLink","reference","linkReferenceStyle","id","references","append","emphasis","emDelimiter","strong","strongDelimiter","hasSiblings","previousSibling","isCodeBlock","extraSpace","matches","image","keep","forNode","isBlank","root","Parser","domino","_htmlParser","HTMLParser","DOMParser","canParse","parseFromString","canParseHTMLNatively","require","createDocument","RootNode","getElementById","prevText","keepLeadingWs","nodeType","nextNode","collapseWhitespace","preformattedCode","isPreOrCode","Node","isCode","isMeaningfulWhenBlank","hasVoid","hasMeaningfulWhenBlank","flankingWhitespace","leading","trailing","edges","leadingAscii","leadingNonAscii","trailingNonAscii","trailingAscii","isFlankedByWhitespace","side","sibling","regExp","isFlanked","nodeValue","reduce","escapes","TurndownService","defaults","outerHTML","destination","extend","process","childNodes","escape","replacementForNode","postProcess","whitespace","s1","indexEnd","trimTrailingNewlines","s2","nls","turndown","canConvert","use","plugin","addRule","accumulator","turndownService","cache","_specialBlocks","configureTurndownRules","contains","blockId","set","geojsonContent","geojson","mathContent","className","cells","hash","clear","cacheKey","_getStringHash","get","_postProcessMarkdown","size","firstKey","keys","JSON","codeBlockRegex","blockIndex","originalBlocks","b"],"mappings":"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","x_google_ignoreList":[0,1,3]}