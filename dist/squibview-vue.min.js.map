{"version":3,"file":"squibview-vue.min.js","sources":["../src/SquibViewVue.js"],"sourcesContent":["import SquibView from './squibview.esm.min.js';\n\nexport default {\n  name: 'SquibViewVue',\n  props: {\n    initialContent: {\n      type: String,\n      default: ''\n    },\n    inputContentType: {\n      type: String,\n      default: 'md'\n    },\n    showControls: {\n      type: Boolean,\n      default: true\n    },\n    initialView: {\n      type: String,\n      default: 'split'\n    },\n    titleShow: {\n      type: Boolean,\n      default: false\n    },\n    titleContent: {\n      type: String,\n      default: ''\n    },\n    className: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      editor: null\n    };\n  },\n  mounted() {\n    this.initializeEditor();\n  },\n  methods: {\n    initializeEditor() {\n      this.editor = new SquibView(this.$refs.container, {\n        initialContent: this.initialContent,\n        inputContentType: this.inputContentType,\n        showControls: this.showControls,\n        initialView: this.initialView,\n        titleShow: this.titleShow,\n        titleContent: this.titleContent\n      });\n      \n      // Override methods to emit events\n      const originalSetContent = this.editor.setContent.bind(this.editor);\n      this.editor.setContent = (content, type, saveRevision) => {\n        originalSetContent(content, type, saveRevision);\n        this.$emit('content-change', content, type);\n      };\n      \n      const originalSetView = this.editor.setView.bind(this.editor);\n      this.editor.setView = (view) => {\n        originalSetView(view);\n        this.$emit('view-change', view);\n      };\n      \n      // Listen for editor events and re-emit them\n      this.editor.events.on('content:rendered', (contentType) => {\n        this.$emit('content-rendered', contentType);\n      });\n      \n      this.editor.events.on('revision:undo', (content, contentType) => {\n        this.$emit('revision-undo', content, contentType);\n      });\n      \n      this.editor.events.on('revision:redo', (content, contentType) => {\n        this.$emit('revision-redo', content, contentType);\n      });\n    }\n  },\n  watch: {\n    initialContent(newContent) {\n      if (this.editor && newContent !== this.editor.getContent()) {\n        this.editor.setContent(newContent, this.inputContentType || this.editor.inputContentType, false);\n      }\n    },\n    inputContentType(newType) {\n      if (this.editor && newType !== this.editor.inputContentType) {\n        this.editor.setContent(this.editor.getContent(), newType, false);\n      }\n    },\n    showControls(show) {\n      if (this.editor) {\n        this.editor.controlsShow(show);\n      }\n    },\n    titleShow(show) {\n      if (this.editor) {\n        this.editor.titleShow(show);\n      }\n    },\n    titleContent(content) {\n      if (this.editor) {\n        this.editor.titleSetContent(content);\n      }\n    },\n    initialView(view) {\n      if (this.editor) {\n        this.editor.setView(view);\n      }\n    }\n  },\n  beforeUnmount() {\n    // Cleanup if necessary\n    if (this.editor && this.editor.events) {\n      this.editor.events.off('*');\n    }\n  },\n  template: `\n    <div ref=\"container\" :class=\"['squibview-vue-container', className]\"></div>\n  `\n};"],"names":["SquibViewVue","name","props","initialContent","type","String","default","inputContentType","showControls","Boolean","initialView","titleShow","titleContent","className","data","editor","mounted","this","initializeEditor","methods","_this","SquibView","$refs","container","originalSetContent","setContent","bind","content","saveRevision","$emit","originalSetView","setView","view","events","on","contentType","watch","newContent","getContent","newType","show","controlsShow","titleSetContent","beforeUnmount","off","template"],"mappings":"sCAEA,IAAeA,EAAA,CACbC,KAAM,eACNC,MAAO,CACLC,eAAgB,CACdC,KAAMC,OACNC,QAAS,IAEXC,iBAAkB,CAChBH,KAAMC,OACNC,QAAS,MAEXE,aAAc,CACZJ,KAAMK,QACNH,SAAS,GAEXI,YAAa,CACXN,KAAMC,OACNC,QAAS,SAEXK,UAAW,CACTP,KAAMK,QACNH,SAAS,GAEXM,aAAc,CACZR,KAAMC,OACNC,QAAS,IAEXO,UAAW,CACTT,KAAMC,OACNC,QAAS,KAGbQ,KAAI,WACF,MAAO,CACLC,OAAQ,KAEX,EACDC,QAAO,WACLC,KAAKC,kBACN,EACDC,QAAS,CACPD,iBAAgB,WAAG,IAAAE,EAAAH,KACjBA,KAAKF,OAAS,IAAIM,EAAUJ,KAAKK,MAAMC,UAAW,CAChDpB,eAAgBc,KAAKd,eACrBI,iBAAkBU,KAAKV,iBACvBC,aAAcS,KAAKT,aACnBE,YAAaO,KAAKP,YAClBC,UAAWM,KAAKN,UAChBC,aAAcK,KAAKL,eAIrB,IAAMY,EAAqBP,KAAKF,OAAOU,WAAWC,KAAKT,KAAKF,QAC5DE,KAAKF,OAAOU,WAAa,SAACE,EAASvB,EAAMwB,GACvCJ,EAAmBG,EAASvB,EAAMwB,GAClCR,EAAKS,MAAM,iBAAkBF,EAASvB,EACvC,EAED,IAAM0B,EAAkBb,KAAKF,OAAOgB,QAAQL,KAAKT,KAAKF,QACtDE,KAAKF,OAAOgB,QAAU,SAACC,GACrBF,EAAgBE,GAChBZ,EAAKS,MAAM,cAAeG,EAC3B,EAGDf,KAAKF,OAAOkB,OAAOC,GAAG,oBAAoB,SAACC,GACzCf,EAAKS,MAAM,mBAAoBM,EACjC,IAEAlB,KAAKF,OAAOkB,OAAOC,GAAG,iBAAiB,SAACP,EAASQ,GAC/Cf,EAAKS,MAAM,gBAAiBF,EAASQ,EACvC,IAEAlB,KAAKF,OAAOkB,OAAOC,GAAG,iBAAiB,SAACP,EAASQ,GAC/Cf,EAAKS,MAAM,gBAAiBF,EAASQ,EACvC,GACF,GAEFC,MAAO,CACLjC,eAAAA,SAAekC,GACTpB,KAAKF,QAAUsB,IAAepB,KAAKF,OAAOuB,cAC5CrB,KAAKF,OAAOU,WAAWY,EAAYpB,KAAKV,kBAAoBU,KAAKF,OAAOR,kBAAkB,EAE7F,EACDA,iBAAAA,SAAiBgC,GACXtB,KAAKF,QAAUwB,IAAYtB,KAAKF,OAAOR,kBACzCU,KAAKF,OAAOU,WAAWR,KAAKF,OAAOuB,aAAcC,GAAS,EAE7D,EACD/B,aAAAA,SAAagC,GACPvB,KAAKF,QACPE,KAAKF,OAAO0B,aAAaD,EAE5B,EACD7B,UAAAA,SAAU6B,GACJvB,KAAKF,QACPE,KAAKF,OAAOJ,UAAU6B,EAEzB,EACD5B,aAAAA,SAAae,GACPV,KAAKF,QACPE,KAAKF,OAAO2B,gBAAgBf,EAE/B,EACDjB,YAAAA,SAAYsB,GACNf,KAAKF,QACPE,KAAKF,OAAOgB,QAAQC,EAExB,GAEFW,cAAa,WAEP1B,KAAKF,QAAUE,KAAKF,OAAOkB,QAC7BhB,KAAKF,OAAOkB,OAAOW,IAAI,IAE1B,EACDC,SAAQ"}