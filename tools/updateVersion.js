import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get __dirname for ES6 modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Path to the package.json file
const packageJsonPath = path.join(__dirname, '../package.json');
// Path to the src/version.js file
const versionJsPath = path.join(__dirname, '../src/version.js');

async function updateSrcVersion() {
  try {
    // Read the existing package.json file
    const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf8'));
    const currentVersion = packageJson.version;
    const repoUrlFromPackage = packageJson.repository && packageJson.repository.url ? packageJson.repository.url : 'https://github.com/deftio/squibview'; // Default if not found
    const repoUrl = repoUrlFromPackage.replace(/^git\+/, '').replace(/^git:\/\//, 'https://').replace(/\.git$/, '');

    if (!currentVersion) {
      throw new Error('Version not found in package.json');
    }

    console.log('Version from package.json:', currentVersion);
    console.log('Repository URL from package.json:', repoUrl);

    const versionJsContent = `// This file is auto-generated by tools/updateVersion.js. Do not edit directly.
export const VERSION = "${currentVersion}";
export const REPO_URL = "${repoUrl}";

export default { version: VERSION, url: REPO_URL };
`;

    // Write the new src/version.js file
    await fs.writeFile(versionJsPath, versionJsContent, 'utf8');

    console.log(`Updated src/version.js to version ${currentVersion} and repo URL ${repoUrl}`);
  } catch (error) {
    console.error('Error updating src/version.js:', error);
    process.exit(1); // Exit with error code if update fails
  }
}

updateSrcVersion();
